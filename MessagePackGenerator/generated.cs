// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(233)
            {
                { typeof(global::Intersect.Network.Packets.Server.CharacterPacket[]), 0 },
                { typeof(global::Intersect.Network.Packets.Server.EntityPacket[]), 1 },
                { typeof(global::Intersect.Network.Packets.Server.EntityStatusData[]), 2 },
                { typeof(global::Intersect.Network.Packets.Server.EntityVitalData[]), 3 },
                { typeof(global::Intersect.Network.Packets.Server.GameObjectPacket[]), 4 },
                { typeof(global::Intersect.Network.Packets.Server.InventoryUpdatePacket[]), 5 },
                { typeof(global::Intersect.Network.Packets.Server.MapItemUpdatePacket[]), 6 },
                { typeof(global::Intersect.Network.Packets.Server.MapPacket[]), 7 },
                { typeof(global::Intersect.Network.Packets.Server.PartyMemberPacket[]), 8 },
                { typeof(global::Intersect.Network.Packets.Server.SpellUpdatePacket[]), 9 },
                { typeof(global::Intersect.Network.Packets.Server.StatusPacket[]), 10 },
                { typeof(global::System.Collections.Generic.Dictionary<global::System.Guid, long>), 11 },
                { typeof(global::System.Collections.Generic.Dictionary<global::System.Guid, string>), 12 },
                { typeof(global::System.Collections.Generic.Dictionary<string, string>), 13 },
                { typeof(global::System.Guid[,]), 14 },
                { typeof(global::System.Guid[]), 15 },
                { typeof(string[,]), 16 },
                { typeof(global::Intersect.Enums.AdminActions), 17 },
                { typeof(global::Intersect.Enums.ChatMessageType), 18 },
                { typeof(global::Intersect.Enums.EntityTypes), 19 },
                { typeof(global::Intersect.Enums.EventGraphicType), 20 },
                { typeof(global::Intersect.Enums.GameObjectType), 21 },
                { typeof(global::Intersect.Enums.Gender), 22 },
                { typeof(global::Intersect.Enums.GuildMemberUpdateActions), 23 },
                { typeof(global::Intersect.Enums.MapListUpdates), 24 },
                { typeof(global::Intersect.Enums.StatusTypes), 25 },
                { typeof(global::Intersect.Enums.VariableDataTypes), 26 },
                { typeof(global::Intersect.Admin.Actions.AdminAction), 27 },
                { typeof(global::Intersect.Network.ConnectionPacket), 28 },
                { typeof(global::Intersect.Network.IntersectPacket), 29 },
                { typeof(global::Intersect.Network.Packets.AbstractTimedPacket), 30 },
                { typeof(global::Intersect.Network.Packets.EditorPacket), 31 },
                { typeof(global::Intersect.Network.Packets.Server.EntityPacket), 32 },
                { typeof(global::Intersect.Network.Packets.SlotQuantityPacket), 33 },
                { typeof(global::Intersect.Network.Packets.SlotSwapPacket), 34 },
                { typeof(global::Intersect.Admin.Actions.BanAction), 35 },
                { typeof(global::Intersect.Admin.Actions.KickAction), 36 },
                { typeof(global::Intersect.Admin.Actions.KillAction), 37 },
                { typeof(global::Intersect.Admin.Actions.MuteAction), 38 },
                { typeof(global::Intersect.Admin.Actions.SetAccessAction), 39 },
                { typeof(global::Intersect.Admin.Actions.SetFaceAction), 40 },
                { typeof(global::Intersect.Admin.Actions.SetSpriteAction), 41 },
                { typeof(global::Intersect.Admin.Actions.UnbanAction), 42 },
                { typeof(global::Intersect.Admin.Actions.UnmuteAction), 43 },
                { typeof(global::Intersect.Admin.Actions.WarpMeToAction), 44 },
                { typeof(global::Intersect.Admin.Actions.WarpToLocationAction), 45 },
                { typeof(global::Intersect.Admin.Actions.WarpToMapAction), 46 },
                { typeof(global::Intersect.Admin.Actions.WarpToMeAction), 47 },
                { typeof(global::Intersect.Color), 48 },
                { typeof(global::Intersect.GameObjects.Events.EventGraphic), 49 },
                { typeof(global::Intersect.Network.PackedIntersectPacket), 50 },
                { typeof(global::Intersect.Network.Packets.ApprovalPacket), 51 },
                { typeof(global::Intersect.Network.Packets.Client.AbandonQuestPacket), 52 },
                { typeof(global::Intersect.Network.Packets.Client.AcceptTradePacket), 53 },
                { typeof(global::Intersect.Network.Packets.Client.ActivateEventPacket), 54 },
                { typeof(global::Intersect.Network.Packets.Client.AdminActionPacket), 55 },
                { typeof(global::Intersect.Network.Packets.Client.AttackPacket), 56 },
                { typeof(global::Intersect.Network.Packets.Client.BlockPacket), 57 },
                { typeof(global::Intersect.Network.Packets.Client.BumpPacket), 58 },
                { typeof(global::Intersect.Network.Packets.Client.BuyItemPacket), 59 },
                { typeof(global::Intersect.Network.Packets.Client.ChatMsgPacket), 60 },
                { typeof(global::Intersect.Network.Packets.Client.CloseBagPacket), 61 },
                { typeof(global::Intersect.Network.Packets.Client.CloseBankPacket), 62 },
                { typeof(global::Intersect.Network.Packets.Client.CloseCraftingPacket), 63 },
                { typeof(global::Intersect.Network.Packets.Client.CloseShopPacket), 64 },
                { typeof(global::Intersect.Network.Packets.Client.CraftItemPacket), 65 },
                { typeof(global::Intersect.Network.Packets.Client.CreateAccountPacket), 66 },
                { typeof(global::Intersect.Network.Packets.Client.CreateCharacterPacket), 67 },
                { typeof(global::Intersect.Network.Packets.Client.DeclineTradePacket), 68 },
                { typeof(global::Intersect.Network.Packets.Client.DeleteCharacterPacket), 69 },
                { typeof(global::Intersect.Network.Packets.Client.DepositItemPacket), 70 },
                { typeof(global::Intersect.Network.Packets.Client.DirectionPacket), 71 },
                { typeof(global::Intersect.Network.Packets.Client.DropItemPacket), 72 },
                { typeof(global::Intersect.Network.Packets.Client.EnterGamePacket), 73 },
                { typeof(global::Intersect.Network.Packets.Client.EventInputVariablePacket), 74 },
                { typeof(global::Intersect.Network.Packets.Client.EventResponsePacket), 75 },
                { typeof(global::Intersect.Network.Packets.Client.ForgetSpellPacket), 76 },
                { typeof(global::Intersect.Network.Packets.Client.FriendRequestResponsePacket), 77 },
                { typeof(global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket), 78 },
                { typeof(global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket), 79 },
                { typeof(global::Intersect.Network.Packets.Client.GuildLeavePacket), 80 },
                { typeof(global::Intersect.Network.Packets.Client.HotbarSwapPacket), 81 },
                { typeof(global::Intersect.Network.Packets.Client.HotbarUpdatePacket), 82 },
                { typeof(global::Intersect.Network.Packets.Client.LoginPacket), 83 },
                { typeof(global::Intersect.Network.Packets.Client.LogoutPacket), 84 },
                { typeof(global::Intersect.Network.Packets.Client.MovePacket), 85 },
                { typeof(global::Intersect.Network.Packets.Client.NeedMapPacket), 86 },
                { typeof(global::Intersect.Network.Packets.Client.NewCharacterPacket), 87 },
                { typeof(global::Intersect.Network.Packets.Client.OfferTradeItemPacket), 88 },
                { typeof(global::Intersect.Network.Packets.Client.OpenAdminWindowPacket), 89 },
                { typeof(global::Intersect.Network.Packets.Client.PartyInvitePacket), 90 },
                { typeof(global::Intersect.Network.Packets.Client.PartyInviteResponsePacket), 91 },
                { typeof(global::Intersect.Network.Packets.Client.PartyKickPacket), 92 },
                { typeof(global::Intersect.Network.Packets.Client.PartyLeavePacket), 93 },
                { typeof(global::Intersect.Network.Packets.Client.PickupItemPacket), 94 },
                { typeof(global::Intersect.Network.Packets.Client.PingPacket), 95 },
                { typeof(global::Intersect.Network.Packets.Client.QuestResponsePacket), 96 },
                { typeof(global::Intersect.Network.Packets.Client.RequestFriendsPacket), 97 },
                { typeof(global::Intersect.Network.Packets.Client.RequestGuildPacket), 98 },
                { typeof(global::Intersect.Network.Packets.Client.RequestPasswordResetPacket), 99 },
                { typeof(global::Intersect.Network.Packets.Client.ResetPasswordPacket), 100 },
                { typeof(global::Intersect.Network.Packets.Client.RetrieveBagItemPacket), 101 },
                { typeof(global::Intersect.Network.Packets.Client.RevokeTradeItemPacket), 102 },
                { typeof(global::Intersect.Network.Packets.Client.SelectCharacterPacket), 103 },
                { typeof(global::Intersect.Network.Packets.Client.SellItemPacket), 104 },
                { typeof(global::Intersect.Network.Packets.Client.StoreBagItemPacket), 105 },
                { typeof(global::Intersect.Network.Packets.Client.SwapBagItemsPacket), 106 },
                { typeof(global::Intersect.Network.Packets.Client.SwapBankItemsPacket), 107 },
                { typeof(global::Intersect.Network.Packets.Client.SwapInvItemsPacket), 108 },
                { typeof(global::Intersect.Network.Packets.Client.SwapSpellsPacket), 109 },
                { typeof(global::Intersect.Network.Packets.Client.TradeRequestPacket), 110 },
                { typeof(global::Intersect.Network.Packets.Client.TradeRequestResponsePacket), 111 },
                { typeof(global::Intersect.Network.Packets.Client.UnequipItemPacket), 112 },
                { typeof(global::Intersect.Network.Packets.Client.UpdateFriendsPacket), 113 },
                { typeof(global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket), 114 },
                { typeof(global::Intersect.Network.Packets.Client.UpgradeStatPacket), 115 },
                { typeof(global::Intersect.Network.Packets.Client.UseItemPacket), 116 },
                { typeof(global::Intersect.Network.Packets.Client.UseSpellPacket), 117 },
                { typeof(global::Intersect.Network.Packets.Client.WithdrawItemPacket), 118 },
                { typeof(global::Intersect.Network.Packets.Editor.AddTilesetsPacket), 119 },
                { typeof(global::Intersect.Network.Packets.Editor.CreateGameObjectPacket), 120 },
                { typeof(global::Intersect.Network.Packets.Editor.CreateMapPacket), 121 },
                { typeof(global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket), 122 },
                { typeof(global::Intersect.Network.Packets.Editor.EnterMapPacket), 123 },
                { typeof(global::Intersect.Network.Packets.Editor.LinkMapPacket), 124 },
                { typeof(global::Intersect.Network.Packets.Editor.LoginPacket), 125 },
                { typeof(global::Intersect.Network.Packets.Editor.MapListUpdatePacket), 126 },
                { typeof(global::Intersect.Network.Packets.Editor.MapUpdatePacket), 127 },
                { typeof(global::Intersect.Network.Packets.Editor.NeedMapPacket), 128 },
                { typeof(global::Intersect.Network.Packets.Editor.PingPacket), 129 },
                { typeof(global::Intersect.Network.Packets.Editor.RequestGridPacket), 130 },
                { typeof(global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket), 131 },
                { typeof(global::Intersect.Network.Packets.Editor.SaveGameObjectPacket), 132 },
                { typeof(global::Intersect.Network.Packets.Editor.SaveTimeDataPacket), 133 },
                { typeof(global::Intersect.Network.Packets.Editor.UnlinkMapPacket), 134 },
                { typeof(global::Intersect.Network.Packets.HailPacket), 135 },
                { typeof(global::Intersect.Network.Packets.Server.ActionMsgPacket), 136 },
                { typeof(global::Intersect.Network.Packets.Server.AdminPanelPacket), 137 },
                { typeof(global::Intersect.Network.Packets.Server.AnnouncementPacket), 138 },
                { typeof(global::Intersect.Network.Packets.Server.BagPacket), 139 },
                { typeof(global::Intersect.Network.Packets.Server.BagUpdatePacket), 140 },
                { typeof(global::Intersect.Network.Packets.Server.BankPacket), 141 },
                { typeof(global::Intersect.Network.Packets.Server.BankUpdatePacket), 142 },
                { typeof(global::Intersect.Network.Packets.Server.CancelCastPacket), 143 },
                { typeof(global::Intersect.Network.Packets.Server.CharacterCreationPacket), 144 },
                { typeof(global::Intersect.Network.Packets.Server.CharacterPacket), 145 },
                { typeof(global::Intersect.Network.Packets.Server.CharactersPacket), 146 },
                { typeof(global::Intersect.Network.Packets.Server.ChatBubblePacket), 147 },
                { typeof(global::Intersect.Network.Packets.Server.ChatMsgPacket), 148 },
                { typeof(global::Intersect.Network.Packets.Server.ConfigPacket), 149 },
                { typeof(global::Intersect.Network.Packets.Server.CraftingTablePacket), 150 },
                { typeof(global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket), 151 },
                { typeof(global::Intersect.Network.Packets.Server.EnteringGamePacket), 152 },
                { typeof(global::Intersect.Network.Packets.Server.EnterMapPacket), 153 },
                { typeof(global::Intersect.Network.Packets.Server.EntityAttackPacket), 154 },
                { typeof(global::Intersect.Network.Packets.Server.EntityDashPacket), 155 },
                { typeof(global::Intersect.Network.Packets.Server.EntityDiePacket), 156 },
                { typeof(global::Intersect.Network.Packets.Server.EntityDirectionPacket), 157 },
                { typeof(global::Intersect.Network.Packets.Server.EntityLeftPacket), 158 },
                { typeof(global::Intersect.Network.Packets.Server.EntityMovePacket), 159 },
                { typeof(global::Intersect.Network.Packets.Server.EntityPositionPacket), 160 },
                { typeof(global::Intersect.Network.Packets.Server.EntityStatsPacket), 161 },
                { typeof(global::Intersect.Network.Packets.Server.EntityStatusData), 162 },
                { typeof(global::Intersect.Network.Packets.Server.EntityVitalData), 163 },
                { typeof(global::Intersect.Network.Packets.Server.EntityVitalsPacket), 164 },
                { typeof(global::Intersect.Network.Packets.Server.EntityZDimensionPacket), 165 },
                { typeof(global::Intersect.Network.Packets.Server.EquipmentPacket), 166 },
                { typeof(global::Intersect.Network.Packets.Server.ErrorMessagePacket), 167 },
                { typeof(global::Intersect.Network.Packets.Server.EventDialogPacket), 168 },
                { typeof(global::Intersect.Network.Packets.Server.EventEntityPacket), 169 },
                { typeof(global::Intersect.Network.Packets.Server.ExperiencePacket), 170 },
                { typeof(global::Intersect.Network.Packets.Server.FriendRequestPacket), 171 },
                { typeof(global::Intersect.Network.Packets.Server.FriendsPacket), 172 },
                { typeof(global::Intersect.Network.Packets.Server.GameDataPacket), 173 },
                { typeof(global::Intersect.Network.Packets.Server.GameObjectPacket), 174 },
                { typeof(global::Intersect.Network.Packets.Server.GuildInvitePacket), 175 },
                { typeof(global::Intersect.Network.Packets.Server.GuildPacket), 176 },
                { typeof(global::Intersect.Network.Packets.Server.HidePicturePacket), 177 },
                { typeof(global::Intersect.Network.Packets.Server.HoldPlayerPacket), 178 },
                { typeof(global::Intersect.Network.Packets.Server.HotbarPacket), 179 },
                { typeof(global::Intersect.Network.Packets.Server.InputVariablePacket), 180 },
                { typeof(global::Intersect.Network.Packets.Server.InventoryPacket), 181 },
                { typeof(global::Intersect.Network.Packets.Server.InventoryUpdatePacket), 182 },
                { typeof(global::Intersect.Network.Packets.Server.ItemCooldownPacket), 183 },
                { typeof(global::Intersect.Network.Packets.Server.JoinGamePacket), 184 },
                { typeof(global::Intersect.Network.Packets.Server.LabelPacket), 185 },
                { typeof(global::Intersect.Network.Packets.Server.MapAreaPacket), 186 },
                { typeof(global::Intersect.Network.Packets.Server.MapEntitiesPacket), 187 },
                { typeof(global::Intersect.Network.Packets.Server.MapEntityStatusPacket), 188 },
                { typeof(global::Intersect.Network.Packets.Server.MapEntityVitalsPacket), 189 },
                { typeof(global::Intersect.Network.Packets.Server.MapGridPacket), 190 },
                { typeof(global::Intersect.Network.Packets.Server.MapItemsPacket), 191 },
                { typeof(global::Intersect.Network.Packets.Server.MapItemUpdatePacket), 192 },
                { typeof(global::Intersect.Network.Packets.Server.MapListPacket), 193 },
                { typeof(global::Intersect.Network.Packets.Server.MapPacket), 194 },
                { typeof(global::Intersect.Network.Packets.Server.MoveRoutePacket), 195 },
                { typeof(global::Intersect.Network.Packets.Server.NpcAggressionPacket), 196 },
                { typeof(global::Intersect.Network.Packets.Server.NpcEntityPacket), 197 },
                { typeof(global::Intersect.Network.Packets.Server.OpenEditorPacket), 198 },
                { typeof(global::Intersect.Network.Packets.Server.PartyInvitePacket), 199 },
                { typeof(global::Intersect.Network.Packets.Server.PartyMemberPacket), 200 },
                { typeof(global::Intersect.Network.Packets.Server.PartyPacket), 201 },
                { typeof(global::Intersect.Network.Packets.Server.PartyUpdatePacket), 202 },
                { typeof(global::Intersect.Network.Packets.Server.PasswordResetResultPacket), 203 },
                { typeof(global::Intersect.Network.Packets.Server.PingPacket), 204 },
                { typeof(global::Intersect.Network.Packets.Server.PlayAnimationPacket), 205 },
                { typeof(global::Intersect.Network.Packets.Server.PlayerDeathPacket), 206 },
                { typeof(global::Intersect.Network.Packets.Server.PlayerEntityPacket), 207 },
                { typeof(global::Intersect.Network.Packets.Server.PlayMusicPacket), 208 },
                { typeof(global::Intersect.Network.Packets.Server.PlaySoundPacket), 209 },
                { typeof(global::Intersect.Network.Packets.Server.ProjectileDeadPacket), 210 },
                { typeof(global::Intersect.Network.Packets.Server.ProjectileEntityPacket), 211 },
                { typeof(global::Intersect.Network.Packets.Server.QuestOfferPacket), 212 },
                { typeof(global::Intersect.Network.Packets.Server.QuestProgressPacket), 213 },
                { typeof(global::Intersect.Network.Packets.Server.ResourceEntityPacket), 214 },
                { typeof(global::Intersect.Network.Packets.Server.ShopPacket), 215 },
                { typeof(global::Intersect.Network.Packets.Server.ShowPicturePacket), 216 },
                { typeof(global::Intersect.Network.Packets.Server.SpellCastPacket), 217 },
                { typeof(global::Intersect.Network.Packets.Server.SpellCooldownPacket), 218 },
                { typeof(global::Intersect.Network.Packets.Server.SpellPacket), 219 },
                { typeof(global::Intersect.Network.Packets.Server.SpellsPacket), 220 },
                { typeof(global::Intersect.Network.Packets.Server.SpellUpdatePacket), 221 },
                { typeof(global::Intersect.Network.Packets.Server.StatPointsPacket), 222 },
                { typeof(global::Intersect.Network.Packets.Server.StatusPacket), 223 },
                { typeof(global::Intersect.Network.Packets.Server.StopMusicPacket), 224 },
                { typeof(global::Intersect.Network.Packets.Server.StopSoundsPacket), 225 },
                { typeof(global::Intersect.Network.Packets.Server.TargetOverridePacket), 226 },
                { typeof(global::Intersect.Network.Packets.Server.TimeDataPacket), 227 },
                { typeof(global::Intersect.Network.Packets.Server.TimePacket), 228 },
                { typeof(global::Intersect.Network.Packets.Server.TradePacket), 229 },
                { typeof(global::Intersect.Network.Packets.Server.TradeRequestPacket), 230 },
                { typeof(global::Intersect.Network.Packets.Server.TradeUpdatePacket), 231 },
                { typeof(global::Intersect.Point), 232 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.CharacterPacket>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.EntityPacket>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.EntityStatusData>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.EntityVitalData>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.GameObjectPacket>();
                case 5: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.InventoryUpdatePacket>();
                case 6: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.MapItemUpdatePacket>();
                case 7: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.MapPacket>();
                case 8: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.PartyMemberPacket>();
                case 9: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.SpellUpdatePacket>();
                case 10: return new global::MessagePack.Formatters.ArrayFormatter<global::Intersect.Network.Packets.Server.StatusPacket>();
                case 11: return new global::MessagePack.Formatters.DictionaryFormatter<global::System.Guid, long>();
                case 12: return new global::MessagePack.Formatters.DictionaryFormatter<global::System.Guid, string>();
                case 13: return new global::MessagePack.Formatters.DictionaryFormatter<string, string>();
                case 14: return new global::MessagePack.Formatters.TwoDimensionalArrayFormatter<global::System.Guid>();
                case 15: return new global::MessagePack.Formatters.ArrayFormatter<global::System.Guid>();
                case 16: return new global::MessagePack.Formatters.TwoDimensionalArrayFormatter<string>();
                case 17: return new Intersect.Network.Formatters.Intersect.Enums.AdminActionsFormatter();
                case 18: return new Intersect.Network.Formatters.Intersect.Enums.ChatMessageTypeFormatter();
                case 19: return new Intersect.Network.Formatters.Intersect.Enums.EntityTypesFormatter();
                case 20: return new Intersect.Network.Formatters.Intersect.Enums.EventGraphicTypeFormatter();
                case 21: return new Intersect.Network.Formatters.Intersect.Enums.GameObjectTypeFormatter();
                case 22: return new Intersect.Network.Formatters.Intersect.Enums.GenderFormatter();
                case 23: return new Intersect.Network.Formatters.Intersect.Enums.GuildMemberUpdateActionsFormatter();
                case 24: return new Intersect.Network.Formatters.Intersect.Enums.MapListUpdatesFormatter();
                case 25: return new Intersect.Network.Formatters.Intersect.Enums.StatusTypesFormatter();
                case 26: return new Intersect.Network.Formatters.Intersect.Enums.VariableDataTypesFormatter();
                case 27: return new Intersect.Network.Formatters.Intersect.Admin.Actions.AdminActionFormatter();
                case 28: return new Intersect.Network.Formatters.Intersect.Network.ConnectionPacketFormatter();
                case 29: return new Intersect.Network.Formatters.Intersect.Network.IntersectPacketFormatter();
                case 30: return new Intersect.Network.Formatters.Intersect.Network.Packets.AbstractTimedPacketFormatter();
                case 31: return new Intersect.Network.Formatters.Intersect.Network.Packets.EditorPacketFormatter();
                case 32: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityPacketFormatter();
                case 33: return new Intersect.Network.Formatters.Intersect.Network.Packets.SlotQuantityPacketFormatter();
                case 34: return new Intersect.Network.Formatters.Intersect.Network.Packets.SlotSwapPacketFormatter();
                case 35: return new Intersect.Network.Formatters.Intersect.Admin.Actions.BanActionFormatter();
                case 36: return new Intersect.Network.Formatters.Intersect.Admin.Actions.KickActionFormatter();
                case 37: return new Intersect.Network.Formatters.Intersect.Admin.Actions.KillActionFormatter();
                case 38: return new Intersect.Network.Formatters.Intersect.Admin.Actions.MuteActionFormatter();
                case 39: return new Intersect.Network.Formatters.Intersect.Admin.Actions.SetAccessActionFormatter();
                case 40: return new Intersect.Network.Formatters.Intersect.Admin.Actions.SetFaceActionFormatter();
                case 41: return new Intersect.Network.Formatters.Intersect.Admin.Actions.SetSpriteActionFormatter();
                case 42: return new Intersect.Network.Formatters.Intersect.Admin.Actions.UnbanActionFormatter();
                case 43: return new Intersect.Network.Formatters.Intersect.Admin.Actions.UnmuteActionFormatter();
                case 44: return new Intersect.Network.Formatters.Intersect.Admin.Actions.WarpMeToActionFormatter();
                case 45: return new Intersect.Network.Formatters.Intersect.Admin.Actions.WarpToLocationActionFormatter();
                case 46: return new Intersect.Network.Formatters.Intersect.Admin.Actions.WarpToMapActionFormatter();
                case 47: return new Intersect.Network.Formatters.Intersect.Admin.Actions.WarpToMeActionFormatter();
                case 48: return new Intersect.Network.Formatters.Intersect.ColorFormatter();
                case 49: return new Intersect.Network.Formatters.Intersect.GameObjects.Events.EventGraphicFormatter();
                case 50: return new Intersect.Network.Formatters.Intersect.Network.PackedIntersectPacketFormatter();
                case 51: return new Intersect.Network.Formatters.Intersect.Network.Packets.ApprovalPacketFormatter();
                case 52: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.AbandonQuestPacketFormatter();
                case 53: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.AcceptTradePacketFormatter();
                case 54: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.ActivateEventPacketFormatter();
                case 55: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.AdminActionPacketFormatter();
                case 56: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.AttackPacketFormatter();
                case 57: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.BlockPacketFormatter();
                case 58: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.BumpPacketFormatter();
                case 59: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.BuyItemPacketFormatter();
                case 60: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.ChatMsgPacketFormatter();
                case 61: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CloseBagPacketFormatter();
                case 62: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CloseBankPacketFormatter();
                case 63: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CloseCraftingPacketFormatter();
                case 64: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CloseShopPacketFormatter();
                case 65: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CraftItemPacketFormatter();
                case 66: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CreateAccountPacketFormatter();
                case 67: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.CreateCharacterPacketFormatter();
                case 68: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.DeclineTradePacketFormatter();
                case 69: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.DeleteCharacterPacketFormatter();
                case 70: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.DepositItemPacketFormatter();
                case 71: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.DirectionPacketFormatter();
                case 72: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.DropItemPacketFormatter();
                case 73: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.EnterGamePacketFormatter();
                case 74: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.EventInputVariablePacketFormatter();
                case 75: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.EventResponsePacketFormatter();
                case 76: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.ForgetSpellPacketFormatter();
                case 77: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.FriendRequestResponsePacketFormatter();
                case 78: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.GuildInviteAcceptPacketFormatter();
                case 79: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.GuildInviteDeclinePacketFormatter();
                case 80: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.GuildLeavePacketFormatter();
                case 81: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.HotbarSwapPacketFormatter();
                case 82: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.HotbarUpdatePacketFormatter();
                case 83: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.LoginPacketFormatter();
                case 84: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.LogoutPacketFormatter();
                case 85: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.MovePacketFormatter();
                case 86: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.NeedMapPacketFormatter();
                case 87: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.NewCharacterPacketFormatter();
                case 88: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.OfferTradeItemPacketFormatter();
                case 89: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.OpenAdminWindowPacketFormatter();
                case 90: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PartyInvitePacketFormatter();
                case 91: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PartyInviteResponsePacketFormatter();
                case 92: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PartyKickPacketFormatter();
                case 93: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PartyLeavePacketFormatter();
                case 94: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PickupItemPacketFormatter();
                case 95: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.PingPacketFormatter();
                case 96: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.QuestResponsePacketFormatter();
                case 97: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.RequestFriendsPacketFormatter();
                case 98: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.RequestGuildPacketFormatter();
                case 99: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.RequestPasswordResetPacketFormatter();
                case 100: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.ResetPasswordPacketFormatter();
                case 101: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.RetrieveBagItemPacketFormatter();
                case 102: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.RevokeTradeItemPacketFormatter();
                case 103: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SelectCharacterPacketFormatter();
                case 104: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SellItemPacketFormatter();
                case 105: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.StoreBagItemPacketFormatter();
                case 106: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SwapBagItemsPacketFormatter();
                case 107: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SwapBankItemsPacketFormatter();
                case 108: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SwapInvItemsPacketFormatter();
                case 109: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.SwapSpellsPacketFormatter();
                case 110: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.TradeRequestPacketFormatter();
                case 111: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.TradeRequestResponsePacketFormatter();
                case 112: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UnequipItemPacketFormatter();
                case 113: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UpdateFriendsPacketFormatter();
                case 114: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UpdateGuildMemberPacketFormatter();
                case 115: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UpgradeStatPacketFormatter();
                case 116: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UseItemPacketFormatter();
                case 117: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.UseSpellPacketFormatter();
                case 118: return new Intersect.Network.Formatters.Intersect.Network.Packets.Client.WithdrawItemPacketFormatter();
                case 119: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.AddTilesetsPacketFormatter();
                case 120: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.CreateGameObjectPacketFormatter();
                case 121: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.CreateMapPacketFormatter();
                case 122: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.DeleteGameObjectPacketFormatter();
                case 123: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.EnterMapPacketFormatter();
                case 124: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.LinkMapPacketFormatter();
                case 125: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.LoginPacketFormatter();
                case 126: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.MapListUpdatePacketFormatter();
                case 127: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.MapUpdatePacketFormatter();
                case 128: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.NeedMapPacketFormatter();
                case 129: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.PingPacketFormatter();
                case 130: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.RequestGridPacketFormatter();
                case 131: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.RequestOpenEditorPacketFormatter();
                case 132: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.SaveGameObjectPacketFormatter();
                case 133: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.SaveTimeDataPacketFormatter();
                case 134: return new Intersect.Network.Formatters.Intersect.Network.Packets.Editor.UnlinkMapPacketFormatter();
                case 135: return new Intersect.Network.Formatters.Intersect.Network.Packets.HailPacketFormatter();
                case 136: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ActionMsgPacketFormatter();
                case 137: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.AdminPanelPacketFormatter();
                case 138: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.AnnouncementPacketFormatter();
                case 139: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.BagPacketFormatter();
                case 140: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.BagUpdatePacketFormatter();
                case 141: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.BankPacketFormatter();
                case 142: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.BankUpdatePacketFormatter();
                case 143: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CancelCastPacketFormatter();
                case 144: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CharacterCreationPacketFormatter();
                case 145: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CharacterPacketFormatter();
                case 146: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CharactersPacketFormatter();
                case 147: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ChatBubblePacketFormatter();
                case 148: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ChatMsgPacketFormatter();
                case 149: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ConfigPacketFormatter();
                case 150: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CraftingTablePacketFormatter();
                case 151: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.CustomSpriteLayersPacketFormatter();
                case 152: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EnteringGamePacketFormatter();
                case 153: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EnterMapPacketFormatter();
                case 154: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityAttackPacketFormatter();
                case 155: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityDashPacketFormatter();
                case 156: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityDiePacketFormatter();
                case 157: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityDirectionPacketFormatter();
                case 158: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityLeftPacketFormatter();
                case 159: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityMovePacketFormatter();
                case 160: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityPositionPacketFormatter();
                case 161: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityStatsPacketFormatter();
                case 162: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityStatusDataFormatter();
                case 163: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityVitalDataFormatter();
                case 164: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityVitalsPacketFormatter();
                case 165: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EntityZDimensionPacketFormatter();
                case 166: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EquipmentPacketFormatter();
                case 167: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ErrorMessagePacketFormatter();
                case 168: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EventDialogPacketFormatter();
                case 169: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.EventEntityPacketFormatter();
                case 170: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ExperiencePacketFormatter();
                case 171: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.FriendRequestPacketFormatter();
                case 172: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.FriendsPacketFormatter();
                case 173: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.GameDataPacketFormatter();
                case 174: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.GameObjectPacketFormatter();
                case 175: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.GuildInvitePacketFormatter();
                case 176: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.GuildPacketFormatter();
                case 177: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.HidePicturePacketFormatter();
                case 178: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.HoldPlayerPacketFormatter();
                case 179: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.HotbarPacketFormatter();
                case 180: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.InputVariablePacketFormatter();
                case 181: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.InventoryPacketFormatter();
                case 182: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.InventoryUpdatePacketFormatter();
                case 183: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ItemCooldownPacketFormatter();
                case 184: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.JoinGamePacketFormatter();
                case 185: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.LabelPacketFormatter();
                case 186: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapAreaPacketFormatter();
                case 187: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapEntitiesPacketFormatter();
                case 188: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapEntityStatusPacketFormatter();
                case 189: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapEntityVitalsPacketFormatter();
                case 190: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapGridPacketFormatter();
                case 191: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapItemsPacketFormatter();
                case 192: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapItemUpdatePacketFormatter();
                case 193: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapListPacketFormatter();
                case 194: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MapPacketFormatter();
                case 195: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.MoveRoutePacketFormatter();
                case 196: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.NpcAggressionPacketFormatter();
                case 197: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.NpcEntityPacketFormatter();
                case 198: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.OpenEditorPacketFormatter();
                case 199: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PartyInvitePacketFormatter();
                case 200: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PartyMemberPacketFormatter();
                case 201: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PartyPacketFormatter();
                case 202: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PartyUpdatePacketFormatter();
                case 203: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PasswordResetResultPacketFormatter();
                case 204: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PingPacketFormatter();
                case 205: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PlayAnimationPacketFormatter();
                case 206: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PlayerDeathPacketFormatter();
                case 207: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PlayerEntityPacketFormatter();
                case 208: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PlayMusicPacketFormatter();
                case 209: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.PlaySoundPacketFormatter();
                case 210: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ProjectileDeadPacketFormatter();
                case 211: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ProjectileEntityPacketFormatter();
                case 212: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.QuestOfferPacketFormatter();
                case 213: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.QuestProgressPacketFormatter();
                case 214: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ResourceEntityPacketFormatter();
                case 215: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ShopPacketFormatter();
                case 216: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.ShowPicturePacketFormatter();
                case 217: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.SpellCastPacketFormatter();
                case 218: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.SpellCooldownPacketFormatter();
                case 219: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.SpellPacketFormatter();
                case 220: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.SpellsPacketFormatter();
                case 221: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.SpellUpdatePacketFormatter();
                case 222: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.StatPointsPacketFormatter();
                case 223: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.StatusPacketFormatter();
                case 224: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.StopMusicPacketFormatter();
                case 225: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.StopSoundsPacketFormatter();
                case 226: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TargetOverridePacketFormatter();
                case 227: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TimeDataPacketFormatter();
                case 228: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TimePacketFormatter();
                case 229: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TradePacketFormatter();
                case 230: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TradeRequestPacketFormatter();
                case 231: return new Intersect.Network.Formatters.Intersect.Network.Packets.Server.TradeUpdatePacketFormatter();
                case 232: return new Intersect.Network.Formatters.Intersect.PointFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Enums
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AdminActionsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.AdminActions>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.AdminActions value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.AdminActions Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.AdminActions)reader.ReadInt32();
        }
    }

    public sealed class ChatMessageTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.ChatMessageType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.ChatMessageType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.ChatMessageType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.ChatMessageType)reader.ReadInt32();
        }
    }

    public sealed class EntityTypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.EntityTypes>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.EntityTypes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.EntityTypes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.EntityTypes)reader.ReadInt32();
        }
    }

    public sealed class EventGraphicTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.EventGraphicType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.EventGraphicType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.EventGraphicType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.EventGraphicType)reader.ReadInt32();
        }
    }

    public sealed class GameObjectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.GameObjectType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.GameObjectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.GameObjectType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.GameObjectType)reader.ReadInt32();
        }
    }

    public sealed class GenderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.Gender>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.Gender value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.Gender Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.Gender)reader.ReadInt32();
        }
    }

    public sealed class GuildMemberUpdateActionsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.GuildMemberUpdateActions>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.GuildMemberUpdateActions value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.GuildMemberUpdateActions Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.GuildMemberUpdateActions)reader.ReadInt32();
        }
    }

    public sealed class MapListUpdatesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.MapListUpdates>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.MapListUpdates value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.MapListUpdates Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.MapListUpdates)reader.ReadInt32();
        }
    }

    public sealed class StatusTypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.StatusTypes>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.StatusTypes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Intersect.Enums.StatusTypes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.StatusTypes)reader.ReadInt32();
        }
    }

    public sealed class VariableDataTypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Enums.VariableDataTypes>
    {
        public void Serialize(ref MessagePackWriter writer, global::Intersect.Enums.VariableDataTypes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::Intersect.Enums.VariableDataTypes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Intersect.Enums.VariableDataTypes)reader.ReadByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Admin.Actions
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class AdminActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.AdminAction>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public AdminActionFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(13, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Admin.Actions.BanAction).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Admin.Actions.KickAction).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Admin.Actions.KillAction).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Admin.Actions.MuteAction).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Admin.Actions.SetAccessAction).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Intersect.Admin.Actions.SetFaceAction).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Intersect.Admin.Actions.SetSpriteAction).TypeHandle, new KeyValuePair<int, int>(6, 6) },
                { typeof(global::Intersect.Admin.Actions.UnbanAction).TypeHandle, new KeyValuePair<int, int>(7, 7) },
                { typeof(global::Intersect.Admin.Actions.UnmuteAction).TypeHandle, new KeyValuePair<int, int>(8, 8) },
                { typeof(global::Intersect.Admin.Actions.WarpMeToAction).TypeHandle, new KeyValuePair<int, int>(9, 9) },
                { typeof(global::Intersect.Admin.Actions.WarpToLocationAction).TypeHandle, new KeyValuePair<int, int>(10, 10) },
                { typeof(global::Intersect.Admin.Actions.WarpToMapAction).TypeHandle, new KeyValuePair<int, int>(11, 11) },
                { typeof(global::Intersect.Admin.Actions.WarpToMeAction).TypeHandle, new KeyValuePair<int, int>(12, 12) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(13)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
                { 9, 9 },
                { 10, 10 },
                { 11, 11 },
                { 12, 12 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.AdminAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.BanAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.BanAction)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.KickAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.KickAction)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.KillAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.KillAction)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.MuteAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.MuteAction)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetAccessAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.SetAccessAction)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetFaceAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.SetFaceAction)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetSpriteAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.SetSpriteAction)value, options);
                        break;
                    case 7:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.UnbanAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.UnbanAction)value, options);
                        break;
                    case 8:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.UnmuteAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.UnmuteAction)value, options);
                        break;
                    case 9:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpMeToAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.WarpMeToAction)value, options);
                        break;
                    case 10:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToLocationAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.WarpToLocationAction)value, options);
                        break;
                    case 11:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToMapAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.WarpToMapAction)value, options);
                        break;
                    case 12:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToMeAction>().Serialize(ref writer, (global::Intersect.Admin.Actions.WarpToMeAction)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Admin.Actions.AdminAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Admin.Actions.AdminAction");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Admin.Actions.AdminAction result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.BanAction>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.KickAction>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.KillAction>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.MuteAction>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetAccessAction>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetFaceAction>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.SetSpriteAction>().Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.UnbanAction>().Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.UnmuteAction>().Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpMeToAction>().Deserialize(ref reader, options);
                    break;
                case 10:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToLocationAction>().Deserialize(ref reader, options);
                    break;
                case 11:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToMapAction>().Deserialize(ref reader, options);
                    break;
                case 12:
                    result = (global::Intersect.Admin.Actions.AdminAction)options.Resolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.WarpToMeAction>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class ConnectionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.ConnectionPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public ConnectionPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.ApprovalPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.HailPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.ConnectionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.ApprovalPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.ApprovalPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.HailPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.HailPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.ConnectionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.ConnectionPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.ConnectionPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.ConnectionPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.ApprovalPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.ConnectionPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.HailPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IntersectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.IntersectPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IntersectPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(140, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.ConnectionPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.AbstractTimedPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.EditorPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Server.EntityPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.SlotQuantityPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Intersect.Network.Packets.SlotSwapPacket).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Intersect.Network.Packets.Client.AbandonQuestPacket).TypeHandle, new KeyValuePair<int, int>(6, 6) },
                { typeof(global::Intersect.Network.Packets.Client.AcceptTradePacket).TypeHandle, new KeyValuePair<int, int>(8, 7) },
                { typeof(global::Intersect.Network.Packets.Client.ActivateEventPacket).TypeHandle, new KeyValuePair<int, int>(9, 8) },
                { typeof(global::Intersect.Network.Packets.Client.AdminActionPacket).TypeHandle, new KeyValuePair<int, int>(10, 9) },
                { typeof(global::Intersect.Network.Packets.Client.BlockPacket).TypeHandle, new KeyValuePair<int, int>(11, 10) },
                { typeof(global::Intersect.Network.Packets.Client.BumpPacket).TypeHandle, new KeyValuePair<int, int>(12, 11) },
                { typeof(global::Intersect.Network.Packets.Client.ChatMsgPacket).TypeHandle, new KeyValuePair<int, int>(13, 12) },
                { typeof(global::Intersect.Network.Packets.Client.CloseBagPacket).TypeHandle, new KeyValuePair<int, int>(14, 13) },
                { typeof(global::Intersect.Network.Packets.Client.CloseBankPacket).TypeHandle, new KeyValuePair<int, int>(15, 14) },
                { typeof(global::Intersect.Network.Packets.Client.CloseCraftingPacket).TypeHandle, new KeyValuePair<int, int>(16, 15) },
                { typeof(global::Intersect.Network.Packets.Client.CloseShopPacket).TypeHandle, new KeyValuePair<int, int>(17, 16) },
                { typeof(global::Intersect.Network.Packets.Client.CraftItemPacket).TypeHandle, new KeyValuePair<int, int>(18, 17) },
                { typeof(global::Intersect.Network.Packets.Client.CreateAccountPacket).TypeHandle, new KeyValuePair<int, int>(19, 18) },
                { typeof(global::Intersect.Network.Packets.Client.CreateCharacterPacket).TypeHandle, new KeyValuePair<int, int>(20, 19) },
                { typeof(global::Intersect.Network.Packets.Client.DeclineTradePacket).TypeHandle, new KeyValuePair<int, int>(21, 20) },
                { typeof(global::Intersect.Network.Packets.Client.DeleteCharacterPacket).TypeHandle, new KeyValuePair<int, int>(22, 21) },
                { typeof(global::Intersect.Network.Packets.Client.DirectionPacket).TypeHandle, new KeyValuePair<int, int>(23, 22) },
                { typeof(global::Intersect.Network.Packets.Client.EnterGamePacket).TypeHandle, new KeyValuePair<int, int>(24, 23) },
                { typeof(global::Intersect.Network.Packets.Client.EventInputVariablePacket).TypeHandle, new KeyValuePair<int, int>(25, 24) },
                { typeof(global::Intersect.Network.Packets.Client.EventResponsePacket).TypeHandle, new KeyValuePair<int, int>(26, 25) },
                { typeof(global::Intersect.Network.Packets.Client.ForgetSpellPacket).TypeHandle, new KeyValuePair<int, int>(27, 26) },
                { typeof(global::Intersect.Network.Packets.Client.FriendRequestResponsePacket).TypeHandle, new KeyValuePair<int, int>(28, 27) },
                { typeof(global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket).TypeHandle, new KeyValuePair<int, int>(29, 28) },
                { typeof(global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket).TypeHandle, new KeyValuePair<int, int>(30, 29) },
                { typeof(global::Intersect.Network.Packets.Client.GuildLeavePacket).TypeHandle, new KeyValuePair<int, int>(31, 30) },
                { typeof(global::Intersect.Network.Packets.Client.HotbarUpdatePacket).TypeHandle, new KeyValuePair<int, int>(32, 31) },
                { typeof(global::Intersect.Network.Packets.Client.LoginPacket).TypeHandle, new KeyValuePair<int, int>(33, 32) },
                { typeof(global::Intersect.Network.Packets.Client.LogoutPacket).TypeHandle, new KeyValuePair<int, int>(34, 33) },
                { typeof(global::Intersect.Network.Packets.Client.NeedMapPacket).TypeHandle, new KeyValuePair<int, int>(35, 34) },
                { typeof(global::Intersect.Network.Packets.Client.NewCharacterPacket).TypeHandle, new KeyValuePair<int, int>(36, 35) },
                { typeof(global::Intersect.Network.Packets.Client.OpenAdminWindowPacket).TypeHandle, new KeyValuePair<int, int>(37, 36) },
                { typeof(global::Intersect.Network.Packets.Client.PartyInvitePacket).TypeHandle, new KeyValuePair<int, int>(38, 37) },
                { typeof(global::Intersect.Network.Packets.Client.PartyInviteResponsePacket).TypeHandle, new KeyValuePair<int, int>(39, 38) },
                { typeof(global::Intersect.Network.Packets.Client.PartyKickPacket).TypeHandle, new KeyValuePair<int, int>(40, 39) },
                { typeof(global::Intersect.Network.Packets.Client.PartyLeavePacket).TypeHandle, new KeyValuePair<int, int>(41, 40) },
                { typeof(global::Intersect.Network.Packets.Client.PickupItemPacket).TypeHandle, new KeyValuePair<int, int>(42, 41) },
                { typeof(global::Intersect.Network.Packets.Client.QuestResponsePacket).TypeHandle, new KeyValuePair<int, int>(43, 42) },
                { typeof(global::Intersect.Network.Packets.Client.RequestFriendsPacket).TypeHandle, new KeyValuePair<int, int>(44, 43) },
                { typeof(global::Intersect.Network.Packets.Client.RequestGuildPacket).TypeHandle, new KeyValuePair<int, int>(45, 44) },
                { typeof(global::Intersect.Network.Packets.Client.RequestPasswordResetPacket).TypeHandle, new KeyValuePair<int, int>(46, 45) },
                { typeof(global::Intersect.Network.Packets.Client.ResetPasswordPacket).TypeHandle, new KeyValuePair<int, int>(47, 46) },
                { typeof(global::Intersect.Network.Packets.Client.SelectCharacterPacket).TypeHandle, new KeyValuePair<int, int>(48, 47) },
                { typeof(global::Intersect.Network.Packets.Client.TradeRequestPacket).TypeHandle, new KeyValuePair<int, int>(49, 48) },
                { typeof(global::Intersect.Network.Packets.Client.TradeRequestResponsePacket).TypeHandle, new KeyValuePair<int, int>(50, 49) },
                { typeof(global::Intersect.Network.Packets.Client.UnequipItemPacket).TypeHandle, new KeyValuePair<int, int>(51, 50) },
                { typeof(global::Intersect.Network.Packets.Client.UpdateFriendsPacket).TypeHandle, new KeyValuePair<int, int>(52, 51) },
                { typeof(global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket).TypeHandle, new KeyValuePair<int, int>(53, 52) },
                { typeof(global::Intersect.Network.Packets.Client.UpgradeStatPacket).TypeHandle, new KeyValuePair<int, int>(54, 53) },
                { typeof(global::Intersect.Network.Packets.Client.UseItemPacket).TypeHandle, new KeyValuePair<int, int>(55, 54) },
                { typeof(global::Intersect.Network.Packets.Client.UseSpellPacket).TypeHandle, new KeyValuePair<int, int>(56, 55) },
                { typeof(global::Intersect.Network.Packets.Client.LoginPacket).TypeHandle, new KeyValuePair<int, int>(57, 56) },
                { typeof(global::Intersect.Network.Packets.Client.PingPacket).TypeHandle, new KeyValuePair<int, int>(58, 57) },
                { typeof(global::Intersect.Network.Packets.Server.ActionMsgPacket).TypeHandle, new KeyValuePair<int, int>(59, 58) },
                { typeof(global::Intersect.Network.Packets.Server.AdminPanelPacket).TypeHandle, new KeyValuePair<int, int>(60, 59) },
                { typeof(global::Intersect.Network.Packets.Server.AnnouncementPacket).TypeHandle, new KeyValuePair<int, int>(61, 60) },
                { typeof(global::Intersect.Network.Packets.Server.BagPacket).TypeHandle, new KeyValuePair<int, int>(62, 61) },
                { typeof(global::Intersect.Network.Packets.Server.BankPacket).TypeHandle, new KeyValuePair<int, int>(63, 62) },
                { typeof(global::Intersect.Network.Packets.Server.CancelCastPacket).TypeHandle, new KeyValuePair<int, int>(64, 63) },
                { typeof(global::Intersect.Network.Packets.Server.CharacterCreationPacket).TypeHandle, new KeyValuePair<int, int>(65, 64) },
                { typeof(global::Intersect.Network.Packets.Server.CharacterPacket).TypeHandle, new KeyValuePair<int, int>(66, 65) },
                { typeof(global::Intersect.Network.Packets.Server.CharactersPacket).TypeHandle, new KeyValuePair<int, int>(67, 66) },
                { typeof(global::Intersect.Network.Packets.Server.ChatBubblePacket).TypeHandle, new KeyValuePair<int, int>(68, 67) },
                { typeof(global::Intersect.Network.Packets.Server.ChatMsgPacket).TypeHandle, new KeyValuePair<int, int>(69, 68) },
                { typeof(global::Intersect.Network.Packets.Server.ConfigPacket).TypeHandle, new KeyValuePair<int, int>(70, 69) },
                { typeof(global::Intersect.Network.Packets.Server.CraftingTablePacket).TypeHandle, new KeyValuePair<int, int>(71, 70) },
                { typeof(global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket).TypeHandle, new KeyValuePair<int, int>(72, 71) },
                { typeof(global::Intersect.Network.Packets.Server.EnteringGamePacket).TypeHandle, new KeyValuePair<int, int>(73, 72) },
                { typeof(global::Intersect.Network.Packets.Server.EnterMapPacket).TypeHandle, new KeyValuePair<int, int>(74, 73) },
                { typeof(global::Intersect.Network.Packets.Server.EntityDashPacket).TypeHandle, new KeyValuePair<int, int>(75, 74) },
                { typeof(global::Intersect.Network.Packets.Server.EntityDiePacket).TypeHandle, new KeyValuePair<int, int>(76, 75) },
                { typeof(global::Intersect.Network.Packets.Server.EntityDirectionPacket).TypeHandle, new KeyValuePair<int, int>(77, 76) },
                { typeof(global::Intersect.Network.Packets.Server.EntityLeftPacket).TypeHandle, new KeyValuePair<int, int>(78, 77) },
                { typeof(global::Intersect.Network.Packets.Server.EntityMovePacket).TypeHandle, new KeyValuePair<int, int>(79, 78) },
                { typeof(global::Intersect.Network.Packets.Server.EntityStatsPacket).TypeHandle, new KeyValuePair<int, int>(80, 79) },
                { typeof(global::Intersect.Network.Packets.Server.EntityVitalsPacket).TypeHandle, new KeyValuePair<int, int>(81, 80) },
                { typeof(global::Intersect.Network.Packets.Server.EntityZDimensionPacket).TypeHandle, new KeyValuePair<int, int>(82, 81) },
                { typeof(global::Intersect.Network.Packets.Server.EquipmentPacket).TypeHandle, new KeyValuePair<int, int>(83, 82) },
                { typeof(global::Intersect.Network.Packets.Server.ErrorMessagePacket).TypeHandle, new KeyValuePair<int, int>(84, 83) },
                { typeof(global::Intersect.Network.Packets.Server.EventDialogPacket).TypeHandle, new KeyValuePair<int, int>(85, 84) },
                { typeof(global::Intersect.Network.Packets.Server.ExperiencePacket).TypeHandle, new KeyValuePair<int, int>(86, 85) },
                { typeof(global::Intersect.Network.Packets.Server.FriendRequestPacket).TypeHandle, new KeyValuePair<int, int>(87, 86) },
                { typeof(global::Intersect.Network.Packets.Server.FriendsPacket).TypeHandle, new KeyValuePair<int, int>(88, 87) },
                { typeof(global::Intersect.Network.Packets.Server.GameDataPacket).TypeHandle, new KeyValuePair<int, int>(89, 88) },
                { typeof(global::Intersect.Network.Packets.Server.GameObjectPacket).TypeHandle, new KeyValuePair<int, int>(90, 89) },
                { typeof(global::Intersect.Network.Packets.Server.GuildInvitePacket).TypeHandle, new KeyValuePair<int, int>(91, 90) },
                { typeof(global::Intersect.Network.Packets.Server.GuildPacket).TypeHandle, new KeyValuePair<int, int>(92, 91) },
                { typeof(global::Intersect.Network.Packets.Server.HidePicturePacket).TypeHandle, new KeyValuePair<int, int>(93, 92) },
                { typeof(global::Intersect.Network.Packets.Server.HoldPlayerPacket).TypeHandle, new KeyValuePair<int, int>(94, 93) },
                { typeof(global::Intersect.Network.Packets.Server.HotbarPacket).TypeHandle, new KeyValuePair<int, int>(95, 94) },
                { typeof(global::Intersect.Network.Packets.Server.InputVariablePacket).TypeHandle, new KeyValuePair<int, int>(96, 95) },
                { typeof(global::Intersect.Network.Packets.Server.InventoryPacket).TypeHandle, new KeyValuePair<int, int>(97, 96) },
                { typeof(global::Intersect.Network.Packets.Server.InventoryUpdatePacket).TypeHandle, new KeyValuePair<int, int>(98, 97) },
                { typeof(global::Intersect.Network.Packets.Server.ItemCooldownPacket).TypeHandle, new KeyValuePair<int, int>(99, 98) },
                { typeof(global::Intersect.Network.Packets.Server.LabelPacket).TypeHandle, new KeyValuePair<int, int>(100, 99) },
                { typeof(global::Intersect.Network.Packets.Server.MapAreaPacket).TypeHandle, new KeyValuePair<int, int>(101, 100) },
                { typeof(global::Intersect.Network.Packets.Server.MapEntitiesPacket).TypeHandle, new KeyValuePair<int, int>(102, 101) },
                { typeof(global::Intersect.Network.Packets.Server.MapEntityStatusPacket).TypeHandle, new KeyValuePair<int, int>(103, 102) },
                { typeof(global::Intersect.Network.Packets.Server.MapEntityVitalsPacket).TypeHandle, new KeyValuePair<int, int>(104, 103) },
                { typeof(global::Intersect.Network.Packets.Server.MapGridPacket).TypeHandle, new KeyValuePair<int, int>(105, 104) },
                { typeof(global::Intersect.Network.Packets.Server.MapItemsPacket).TypeHandle, new KeyValuePair<int, int>(106, 105) },
                { typeof(global::Intersect.Network.Packets.Server.MapItemUpdatePacket).TypeHandle, new KeyValuePair<int, int>(107, 106) },
                { typeof(global::Intersect.Network.Packets.Server.MapListPacket).TypeHandle, new KeyValuePair<int, int>(108, 107) },
                { typeof(global::Intersect.Network.Packets.Server.MapPacket).TypeHandle, new KeyValuePair<int, int>(109, 108) },
                { typeof(global::Intersect.Network.Packets.Server.MoveRoutePacket).TypeHandle, new KeyValuePair<int, int>(110, 109) },
                { typeof(global::Intersect.Network.Packets.Server.NpcAggressionPacket).TypeHandle, new KeyValuePair<int, int>(111, 110) },
                { typeof(global::Intersect.Network.Packets.Server.OpenEditorPacket).TypeHandle, new KeyValuePair<int, int>(112, 111) },
                { typeof(global::Intersect.Network.Packets.Server.PartyInvitePacket).TypeHandle, new KeyValuePair<int, int>(113, 112) },
                { typeof(global::Intersect.Network.Packets.Server.PartyMemberPacket).TypeHandle, new KeyValuePair<int, int>(114, 113) },
                { typeof(global::Intersect.Network.Packets.Server.PartyPacket).TypeHandle, new KeyValuePair<int, int>(115, 114) },
                { typeof(global::Intersect.Network.Packets.Server.PartyUpdatePacket).TypeHandle, new KeyValuePair<int, int>(116, 115) },
                { typeof(global::Intersect.Network.Packets.Server.PasswordResetResultPacket).TypeHandle, new KeyValuePair<int, int>(117, 116) },
                { typeof(global::Intersect.Network.Packets.Server.PlayAnimationPacket).TypeHandle, new KeyValuePair<int, int>(118, 117) },
                { typeof(global::Intersect.Network.Packets.Server.PlayerDeathPacket).TypeHandle, new KeyValuePair<int, int>(119, 118) },
                { typeof(global::Intersect.Network.Packets.Server.PlayMusicPacket).TypeHandle, new KeyValuePair<int, int>(120, 119) },
                { typeof(global::Intersect.Network.Packets.Server.PlaySoundPacket).TypeHandle, new KeyValuePair<int, int>(121, 120) },
                { typeof(global::Intersect.Network.Packets.Server.ProjectileDeadPacket).TypeHandle, new KeyValuePair<int, int>(122, 121) },
                { typeof(global::Intersect.Network.Packets.Server.QuestOfferPacket).TypeHandle, new KeyValuePair<int, int>(123, 122) },
                { typeof(global::Intersect.Network.Packets.Server.QuestProgressPacket).TypeHandle, new KeyValuePair<int, int>(124, 123) },
                { typeof(global::Intersect.Network.Packets.Server.ShopPacket).TypeHandle, new KeyValuePair<int, int>(125, 124) },
                { typeof(global::Intersect.Network.Packets.Server.ShowPicturePacket).TypeHandle, new KeyValuePair<int, int>(126, 125) },
                { typeof(global::Intersect.Network.Packets.Server.SpellCastPacket).TypeHandle, new KeyValuePair<int, int>(127, 126) },
                { typeof(global::Intersect.Network.Packets.Server.SpellCooldownPacket).TypeHandle, new KeyValuePair<int, int>(128, 127) },
                { typeof(global::Intersect.Network.Packets.Server.SpellPacket).TypeHandle, new KeyValuePair<int, int>(129, 128) },
                { typeof(global::Intersect.Network.Packets.Server.SpellsPacket).TypeHandle, new KeyValuePair<int, int>(130, 129) },
                { typeof(global::Intersect.Network.Packets.Server.SpellUpdatePacket).TypeHandle, new KeyValuePair<int, int>(131, 130) },
                { typeof(global::Intersect.Network.Packets.Server.StatPointsPacket).TypeHandle, new KeyValuePair<int, int>(132, 131) },
                { typeof(global::Intersect.Network.Packets.Server.StatusPacket).TypeHandle, new KeyValuePair<int, int>(133, 132) },
                { typeof(global::Intersect.Network.Packets.Server.StopMusicPacket).TypeHandle, new KeyValuePair<int, int>(134, 133) },
                { typeof(global::Intersect.Network.Packets.Server.StopSoundsPacket).TypeHandle, new KeyValuePair<int, int>(135, 134) },
                { typeof(global::Intersect.Network.Packets.Server.TargetOverridePacket).TypeHandle, new KeyValuePair<int, int>(136, 135) },
                { typeof(global::Intersect.Network.Packets.Server.TimeDataPacket).TypeHandle, new KeyValuePair<int, int>(137, 136) },
                { typeof(global::Intersect.Network.Packets.Server.TimePacket).TypeHandle, new KeyValuePair<int, int>(138, 137) },
                { typeof(global::Intersect.Network.Packets.Server.TradePacket).TypeHandle, new KeyValuePair<int, int>(139, 138) },
                { typeof(global::Intersect.Network.Packets.Server.TradeRequestPacket).TypeHandle, new KeyValuePair<int, int>(140, 139) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(140)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 8, 7 },
                { 9, 8 },
                { 10, 9 },
                { 11, 10 },
                { 12, 11 },
                { 13, 12 },
                { 14, 13 },
                { 15, 14 },
                { 16, 15 },
                { 17, 16 },
                { 18, 17 },
                { 19, 18 },
                { 20, 19 },
                { 21, 20 },
                { 22, 21 },
                { 23, 22 },
                { 24, 23 },
                { 25, 24 },
                { 26, 25 },
                { 27, 26 },
                { 28, 27 },
                { 29, 28 },
                { 30, 29 },
                { 31, 30 },
                { 32, 31 },
                { 33, 32 },
                { 34, 33 },
                { 35, 34 },
                { 36, 35 },
                { 37, 36 },
                { 38, 37 },
                { 39, 38 },
                { 40, 39 },
                { 41, 40 },
                { 42, 41 },
                { 43, 42 },
                { 44, 43 },
                { 45, 44 },
                { 46, 45 },
                { 47, 46 },
                { 48, 47 },
                { 49, 48 },
                { 50, 49 },
                { 51, 50 },
                { 52, 51 },
                { 53, 52 },
                { 54, 53 },
                { 55, 54 },
                { 56, 55 },
                { 57, 56 },
                { 58, 57 },
                { 59, 58 },
                { 60, 59 },
                { 61, 60 },
                { 62, 61 },
                { 63, 62 },
                { 64, 63 },
                { 65, 64 },
                { 66, 65 },
                { 67, 66 },
                { 68, 67 },
                { 69, 68 },
                { 70, 69 },
                { 71, 70 },
                { 72, 71 },
                { 73, 72 },
                { 74, 73 },
                { 75, 74 },
                { 76, 75 },
                { 77, 76 },
                { 78, 77 },
                { 79, 78 },
                { 80, 79 },
                { 81, 80 },
                { 82, 81 },
                { 83, 82 },
                { 84, 83 },
                { 85, 84 },
                { 86, 85 },
                { 87, 86 },
                { 88, 87 },
                { 89, 88 },
                { 90, 89 },
                { 91, 90 },
                { 92, 91 },
                { 93, 92 },
                { 94, 93 },
                { 95, 94 },
                { 96, 95 },
                { 97, 96 },
                { 98, 97 },
                { 99, 98 },
                { 100, 99 },
                { 101, 100 },
                { 102, 101 },
                { 103, 102 },
                { 104, 103 },
                { 105, 104 },
                { 106, 105 },
                { 107, 106 },
                { 108, 107 },
                { 109, 108 },
                { 110, 109 },
                { 111, 110 },
                { 112, 111 },
                { 113, 112 },
                { 114, 113 },
                { 115, 114 },
                { 116, 115 },
                { 117, 116 },
                { 118, 117 },
                { 119, 118 },
                { 120, 119 },
                { 121, 120 },
                { 122, 121 },
                { 123, 122 },
                { 124, 123 },
                { 125, 124 },
                { 126, 125 },
                { 127, 126 },
                { 128, 127 },
                { 129, 128 },
                { 130, 129 },
                { 131, 130 },
                { 132, 131 },
                { 133, 132 },
                { 134, 133 },
                { 135, 134 },
                { 136, 135 },
                { 137, 136 },
                { 138, 137 },
                { 139, 138 },
                { 140, 139 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.IntersectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.ConnectionPacket>().Serialize(ref writer, (global::Intersect.Network.ConnectionPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.AbstractTimedPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.AbstractTimedPacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.EditorPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.EditorPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.SlotQuantityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.SlotQuantityPacket)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.SlotSwapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.SlotSwapPacket)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AbandonQuestPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.AbandonQuestPacket)value, options);
                        break;
                    case 7:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AcceptTradePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.AcceptTradePacket)value, options);
                        break;
                    case 8:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ActivateEventPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.ActivateEventPacket)value, options);
                        break;
                    case 9:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AdminActionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.AdminActionPacket)value, options);
                        break;
                    case 10:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BlockPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.BlockPacket)value, options);
                        break;
                    case 11:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BumpPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.BumpPacket)value, options);
                        break;
                    case 12:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ChatMsgPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.ChatMsgPacket)value, options);
                        break;
                    case 13:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseBagPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CloseBagPacket)value, options);
                        break;
                    case 14:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseBankPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CloseBankPacket)value, options);
                        break;
                    case 15:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseCraftingPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CloseCraftingPacket)value, options);
                        break;
                    case 16:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseShopPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CloseShopPacket)value, options);
                        break;
                    case 17:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CraftItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CraftItemPacket)value, options);
                        break;
                    case 18:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CreateAccountPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CreateAccountPacket)value, options);
                        break;
                    case 19:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CreateCharacterPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.CreateCharacterPacket)value, options);
                        break;
                    case 20:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DeclineTradePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.DeclineTradePacket)value, options);
                        break;
                    case 21:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DeleteCharacterPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.DeleteCharacterPacket)value, options);
                        break;
                    case 22:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DirectionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.DirectionPacket)value, options);
                        break;
                    case 23:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EnterGamePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.EnterGamePacket)value, options);
                        break;
                    case 24:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EventInputVariablePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.EventInputVariablePacket)value, options);
                        break;
                    case 25:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EventResponsePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.EventResponsePacket)value, options);
                        break;
                    case 26:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ForgetSpellPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.ForgetSpellPacket)value, options);
                        break;
                    case 27:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.FriendRequestResponsePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.FriendRequestResponsePacket)value, options);
                        break;
                    case 28:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket)value, options);
                        break;
                    case 29:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket)value, options);
                        break;
                    case 30:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildLeavePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.GuildLeavePacket)value, options);
                        break;
                    case 31:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.HotbarUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.HotbarUpdatePacket)value, options);
                        break;
                    case 32:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LoginPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.LoginPacket)value, options);
                        break;
                    case 33:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LogoutPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.LogoutPacket)value, options);
                        break;
                    case 34:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.NeedMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.NeedMapPacket)value, options);
                        break;
                    case 35:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.NewCharacterPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.NewCharacterPacket)value, options);
                        break;
                    case 36:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.OpenAdminWindowPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.OpenAdminWindowPacket)value, options);
                        break;
                    case 37:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyInvitePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PartyInvitePacket)value, options);
                        break;
                    case 38:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyInviteResponsePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PartyInviteResponsePacket)value, options);
                        break;
                    case 39:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyKickPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PartyKickPacket)value, options);
                        break;
                    case 40:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyLeavePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PartyLeavePacket)value, options);
                        break;
                    case 41:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PickupItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PickupItemPacket)value, options);
                        break;
                    case 42:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.QuestResponsePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.QuestResponsePacket)value, options);
                        break;
                    case 43:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestFriendsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.RequestFriendsPacket)value, options);
                        break;
                    case 44:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestGuildPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.RequestGuildPacket)value, options);
                        break;
                    case 45:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestPasswordResetPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.RequestPasswordResetPacket)value, options);
                        break;
                    case 46:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ResetPasswordPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.ResetPasswordPacket)value, options);
                        break;
                    case 47:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SelectCharacterPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SelectCharacterPacket)value, options);
                        break;
                    case 48:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.TradeRequestPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.TradeRequestPacket)value, options);
                        break;
                    case 49:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.TradeRequestResponsePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.TradeRequestResponsePacket)value, options);
                        break;
                    case 50:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UnequipItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UnequipItemPacket)value, options);
                        break;
                    case 51:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpdateFriendsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UpdateFriendsPacket)value, options);
                        break;
                    case 52:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket)value, options);
                        break;
                    case 53:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpgradeStatPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UpgradeStatPacket)value, options);
                        break;
                    case 54:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UseItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UseItemPacket)value, options);
                        break;
                    case 55:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UseSpellPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.UseSpellPacket)value, options);
                        break;
                    case 56:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LoginPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.LoginPacket)value, options);
                        break;
                    case 57:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PingPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PingPacket)value, options);
                        break;
                    case 58:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ActionMsgPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ActionMsgPacket)value, options);
                        break;
                    case 59:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.AdminPanelPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.AdminPanelPacket)value, options);
                        break;
                    case 60:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.AnnouncementPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.AnnouncementPacket)value, options);
                        break;
                    case 61:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.BagPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.BagPacket)value, options);
                        break;
                    case 62:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.BankPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.BankPacket)value, options);
                        break;
                    case 63:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CancelCastPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CancelCastPacket)value, options);
                        break;
                    case 64:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterCreationPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CharacterCreationPacket)value, options);
                        break;
                    case 65:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CharacterPacket)value, options);
                        break;
                    case 66:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharactersPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CharactersPacket)value, options);
                        break;
                    case 67:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ChatBubblePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ChatBubblePacket)value, options);
                        break;
                    case 68:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ChatMsgPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ChatMsgPacket)value, options);
                        break;
                    case 69:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ConfigPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ConfigPacket)value, options);
                        break;
                    case 70:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CraftingTablePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CraftingTablePacket)value, options);
                        break;
                    case 71:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket)value, options);
                        break;
                    case 72:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EnteringGamePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EnteringGamePacket)value, options);
                        break;
                    case 73:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EnterMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EnterMapPacket)value, options);
                        break;
                    case 74:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDashPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityDashPacket)value, options);
                        break;
                    case 75:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDiePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityDiePacket)value, options);
                        break;
                    case 76:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDirectionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityDirectionPacket)value, options);
                        break;
                    case 77:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityLeftPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityLeftPacket)value, options);
                        break;
                    case 78:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityMovePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityMovePacket)value, options);
                        break;
                    case 79:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityStatsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityStatsPacket)value, options);
                        break;
                    case 80:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityVitalsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityVitalsPacket)value, options);
                        break;
                    case 81:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityZDimensionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityZDimensionPacket)value, options);
                        break;
                    case 82:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EquipmentPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EquipmentPacket)value, options);
                        break;
                    case 83:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ErrorMessagePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ErrorMessagePacket)value, options);
                        break;
                    case 84:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EventDialogPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EventDialogPacket)value, options);
                        break;
                    case 85:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ExperiencePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ExperiencePacket)value, options);
                        break;
                    case 86:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.FriendRequestPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.FriendRequestPacket)value, options);
                        break;
                    case 87:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.FriendsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.FriendsPacket)value, options);
                        break;
                    case 88:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameDataPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.GameDataPacket)value, options);
                        break;
                    case 89:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameObjectPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.GameObjectPacket)value, options);
                        break;
                    case 90:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GuildInvitePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.GuildInvitePacket)value, options);
                        break;
                    case 91:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GuildPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.GuildPacket)value, options);
                        break;
                    case 92:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HidePicturePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.HidePicturePacket)value, options);
                        break;
                    case 93:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HoldPlayerPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.HoldPlayerPacket)value, options);
                        break;
                    case 94:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HotbarPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.HotbarPacket)value, options);
                        break;
                    case 95:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InputVariablePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.InputVariablePacket)value, options);
                        break;
                    case 96:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.InventoryPacket)value, options);
                        break;
                    case 97:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.InventoryUpdatePacket)value, options);
                        break;
                    case 98:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ItemCooldownPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ItemCooldownPacket)value, options);
                        break;
                    case 99:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.LabelPacket)value, options);
                        break;
                    case 100:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapAreaPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapAreaPacket)value, options);
                        break;
                    case 101:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntitiesPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapEntitiesPacket)value, options);
                        break;
                    case 102:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntityStatusPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapEntityStatusPacket)value, options);
                        break;
                    case 103:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntityVitalsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapEntityVitalsPacket)value, options);
                        break;
                    case 104:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapGridPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapGridPacket)value, options);
                        break;
                    case 105:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapItemsPacket)value, options);
                        break;
                    case 106:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapItemUpdatePacket)value, options);
                        break;
                    case 107:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapListPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapListPacket)value, options);
                        break;
                    case 108:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MapPacket)value, options);
                        break;
                    case 109:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MoveRoutePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.MoveRoutePacket)value, options);
                        break;
                    case 110:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.NpcAggressionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.NpcAggressionPacket)value, options);
                        break;
                    case 111:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.OpenEditorPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.OpenEditorPacket)value, options);
                        break;
                    case 112:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyInvitePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PartyInvitePacket)value, options);
                        break;
                    case 113:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PartyMemberPacket)value, options);
                        break;
                    case 114:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PartyPacket)value, options);
                        break;
                    case 115:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PartyUpdatePacket)value, options);
                        break;
                    case 116:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PasswordResetResultPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PasswordResetResultPacket)value, options);
                        break;
                    case 117:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayAnimationPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PlayAnimationPacket)value, options);
                        break;
                    case 118:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayerDeathPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PlayerDeathPacket)value, options);
                        break;
                    case 119:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayMusicPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PlayMusicPacket)value, options);
                        break;
                    case 120:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlaySoundPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PlaySoundPacket)value, options);
                        break;
                    case 121:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ProjectileDeadPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ProjectileDeadPacket)value, options);
                        break;
                    case 122:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.QuestOfferPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.QuestOfferPacket)value, options);
                        break;
                    case 123:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.QuestProgressPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.QuestProgressPacket)value, options);
                        break;
                    case 124:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ShopPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ShopPacket)value, options);
                        break;
                    case 125:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ShowPicturePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ShowPicturePacket)value, options);
                        break;
                    case 126:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellCastPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.SpellCastPacket)value, options);
                        break;
                    case 127:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellCooldownPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.SpellCooldownPacket)value, options);
                        break;
                    case 128:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.SpellPacket)value, options);
                        break;
                    case 129:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.SpellsPacket)value, options);
                        break;
                    case 130:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.SpellUpdatePacket)value, options);
                        break;
                    case 131:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatPointsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.StatPointsPacket)value, options);
                        break;
                    case 132:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.StatusPacket)value, options);
                        break;
                    case 133:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StopMusicPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.StopMusicPacket)value, options);
                        break;
                    case 134:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StopSoundsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.StopSoundsPacket)value, options);
                        break;
                    case 135:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TargetOverridePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.TargetOverridePacket)value, options);
                        break;
                    case 136:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TimeDataPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.TimeDataPacket)value, options);
                        break;
                    case 137:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TimePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.TimePacket)value, options);
                        break;
                    case 138:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TradePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.TradePacket)value, options);
                        break;
                    case 139:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TradeRequestPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.TradeRequestPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.IntersectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.IntersectPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.IntersectPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.ConnectionPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.AbstractTimedPacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.EditorPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.SlotQuantityPacket>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.SlotSwapPacket>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AbandonQuestPacket>().Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AcceptTradePacket>().Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ActivateEventPacket>().Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AdminActionPacket>().Deserialize(ref reader, options);
                    break;
                case 10:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BlockPacket>().Deserialize(ref reader, options);
                    break;
                case 11:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BumpPacket>().Deserialize(ref reader, options);
                    break;
                case 12:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ChatMsgPacket>().Deserialize(ref reader, options);
                    break;
                case 13:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseBagPacket>().Deserialize(ref reader, options);
                    break;
                case 14:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseBankPacket>().Deserialize(ref reader, options);
                    break;
                case 15:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseCraftingPacket>().Deserialize(ref reader, options);
                    break;
                case 16:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CloseShopPacket>().Deserialize(ref reader, options);
                    break;
                case 17:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CraftItemPacket>().Deserialize(ref reader, options);
                    break;
                case 18:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CreateAccountPacket>().Deserialize(ref reader, options);
                    break;
                case 19:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.CreateCharacterPacket>().Deserialize(ref reader, options);
                    break;
                case 20:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DeclineTradePacket>().Deserialize(ref reader, options);
                    break;
                case 21:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DeleteCharacterPacket>().Deserialize(ref reader, options);
                    break;
                case 22:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DirectionPacket>().Deserialize(ref reader, options);
                    break;
                case 23:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EnterGamePacket>().Deserialize(ref reader, options);
                    break;
                case 24:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EventInputVariablePacket>().Deserialize(ref reader, options);
                    break;
                case 25:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.EventResponsePacket>().Deserialize(ref reader, options);
                    break;
                case 26:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ForgetSpellPacket>().Deserialize(ref reader, options);
                    break;
                case 27:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.FriendRequestResponsePacket>().Deserialize(ref reader, options);
                    break;
                case 28:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket>().Deserialize(ref reader, options);
                    break;
                case 29:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket>().Deserialize(ref reader, options);
                    break;
                case 30:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.GuildLeavePacket>().Deserialize(ref reader, options);
                    break;
                case 31:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.HotbarUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 32:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LoginPacket>().Deserialize(ref reader, options);
                    break;
                case 33:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LogoutPacket>().Deserialize(ref reader, options);
                    break;
                case 34:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.NeedMapPacket>().Deserialize(ref reader, options);
                    break;
                case 35:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.NewCharacterPacket>().Deserialize(ref reader, options);
                    break;
                case 36:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.OpenAdminWindowPacket>().Deserialize(ref reader, options);
                    break;
                case 37:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyInvitePacket>().Deserialize(ref reader, options);
                    break;
                case 38:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyInviteResponsePacket>().Deserialize(ref reader, options);
                    break;
                case 39:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyKickPacket>().Deserialize(ref reader, options);
                    break;
                case 40:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PartyLeavePacket>().Deserialize(ref reader, options);
                    break;
                case 41:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PickupItemPacket>().Deserialize(ref reader, options);
                    break;
                case 42:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.QuestResponsePacket>().Deserialize(ref reader, options);
                    break;
                case 43:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestFriendsPacket>().Deserialize(ref reader, options);
                    break;
                case 44:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestGuildPacket>().Deserialize(ref reader, options);
                    break;
                case 45:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RequestPasswordResetPacket>().Deserialize(ref reader, options);
                    break;
                case 46:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.ResetPasswordPacket>().Deserialize(ref reader, options);
                    break;
                case 47:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SelectCharacterPacket>().Deserialize(ref reader, options);
                    break;
                case 48:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.TradeRequestPacket>().Deserialize(ref reader, options);
                    break;
                case 49:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.TradeRequestResponsePacket>().Deserialize(ref reader, options);
                    break;
                case 50:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UnequipItemPacket>().Deserialize(ref reader, options);
                    break;
                case 51:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpdateFriendsPacket>().Deserialize(ref reader, options);
                    break;
                case 52:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket>().Deserialize(ref reader, options);
                    break;
                case 53:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UpgradeStatPacket>().Deserialize(ref reader, options);
                    break;
                case 54:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UseItemPacket>().Deserialize(ref reader, options);
                    break;
                case 55:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.UseSpellPacket>().Deserialize(ref reader, options);
                    break;
                case 56:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.LoginPacket>().Deserialize(ref reader, options);
                    break;
                case 57:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PingPacket>().Deserialize(ref reader, options);
                    break;
                case 58:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ActionMsgPacket>().Deserialize(ref reader, options);
                    break;
                case 59:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.AdminPanelPacket>().Deserialize(ref reader, options);
                    break;
                case 60:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.AnnouncementPacket>().Deserialize(ref reader, options);
                    break;
                case 61:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.BagPacket>().Deserialize(ref reader, options);
                    break;
                case 62:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.BankPacket>().Deserialize(ref reader, options);
                    break;
                case 63:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CancelCastPacket>().Deserialize(ref reader, options);
                    break;
                case 64:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterCreationPacket>().Deserialize(ref reader, options);
                    break;
                case 65:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterPacket>().Deserialize(ref reader, options);
                    break;
                case 66:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharactersPacket>().Deserialize(ref reader, options);
                    break;
                case 67:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ChatBubblePacket>().Deserialize(ref reader, options);
                    break;
                case 68:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ChatMsgPacket>().Deserialize(ref reader, options);
                    break;
                case 69:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ConfigPacket>().Deserialize(ref reader, options);
                    break;
                case 70:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CraftingTablePacket>().Deserialize(ref reader, options);
                    break;
                case 71:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket>().Deserialize(ref reader, options);
                    break;
                case 72:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EnteringGamePacket>().Deserialize(ref reader, options);
                    break;
                case 73:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EnterMapPacket>().Deserialize(ref reader, options);
                    break;
                case 74:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDashPacket>().Deserialize(ref reader, options);
                    break;
                case 75:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDiePacket>().Deserialize(ref reader, options);
                    break;
                case 76:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityDirectionPacket>().Deserialize(ref reader, options);
                    break;
                case 77:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityLeftPacket>().Deserialize(ref reader, options);
                    break;
                case 78:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityMovePacket>().Deserialize(ref reader, options);
                    break;
                case 79:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityStatsPacket>().Deserialize(ref reader, options);
                    break;
                case 80:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityVitalsPacket>().Deserialize(ref reader, options);
                    break;
                case 81:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityZDimensionPacket>().Deserialize(ref reader, options);
                    break;
                case 82:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EquipmentPacket>().Deserialize(ref reader, options);
                    break;
                case 83:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ErrorMessagePacket>().Deserialize(ref reader, options);
                    break;
                case 84:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EventDialogPacket>().Deserialize(ref reader, options);
                    break;
                case 85:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ExperiencePacket>().Deserialize(ref reader, options);
                    break;
                case 86:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.FriendRequestPacket>().Deserialize(ref reader, options);
                    break;
                case 87:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.FriendsPacket>().Deserialize(ref reader, options);
                    break;
                case 88:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameDataPacket>().Deserialize(ref reader, options);
                    break;
                case 89:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameObjectPacket>().Deserialize(ref reader, options);
                    break;
                case 90:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GuildInvitePacket>().Deserialize(ref reader, options);
                    break;
                case 91:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GuildPacket>().Deserialize(ref reader, options);
                    break;
                case 92:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HidePicturePacket>().Deserialize(ref reader, options);
                    break;
                case 93:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HoldPlayerPacket>().Deserialize(ref reader, options);
                    break;
                case 94:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.HotbarPacket>().Deserialize(ref reader, options);
                    break;
                case 95:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InputVariablePacket>().Deserialize(ref reader, options);
                    break;
                case 96:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryPacket>().Deserialize(ref reader, options);
                    break;
                case 97:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 98:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ItemCooldownPacket>().Deserialize(ref reader, options);
                    break;
                case 99:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                    break;
                case 100:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapAreaPacket>().Deserialize(ref reader, options);
                    break;
                case 101:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntitiesPacket>().Deserialize(ref reader, options);
                    break;
                case 102:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntityStatusPacket>().Deserialize(ref reader, options);
                    break;
                case 103:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntityVitalsPacket>().Deserialize(ref reader, options);
                    break;
                case 104:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapGridPacket>().Deserialize(ref reader, options);
                    break;
                case 105:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemsPacket>().Deserialize(ref reader, options);
                    break;
                case 106:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 107:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapListPacket>().Deserialize(ref reader, options);
                    break;
                case 108:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapPacket>().Deserialize(ref reader, options);
                    break;
                case 109:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MoveRoutePacket>().Deserialize(ref reader, options);
                    break;
                case 110:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.NpcAggressionPacket>().Deserialize(ref reader, options);
                    break;
                case 111:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.OpenEditorPacket>().Deserialize(ref reader, options);
                    break;
                case 112:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyInvitePacket>().Deserialize(ref reader, options);
                    break;
                case 113:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket>().Deserialize(ref reader, options);
                    break;
                case 114:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyPacket>().Deserialize(ref reader, options);
                    break;
                case 115:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 116:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PasswordResetResultPacket>().Deserialize(ref reader, options);
                    break;
                case 117:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayAnimationPacket>().Deserialize(ref reader, options);
                    break;
                case 118:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayerDeathPacket>().Deserialize(ref reader, options);
                    break;
                case 119:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayMusicPacket>().Deserialize(ref reader, options);
                    break;
                case 120:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlaySoundPacket>().Deserialize(ref reader, options);
                    break;
                case 121:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ProjectileDeadPacket>().Deserialize(ref reader, options);
                    break;
                case 122:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.QuestOfferPacket>().Deserialize(ref reader, options);
                    break;
                case 123:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.QuestProgressPacket>().Deserialize(ref reader, options);
                    break;
                case 124:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ShopPacket>().Deserialize(ref reader, options);
                    break;
                case 125:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ShowPicturePacket>().Deserialize(ref reader, options);
                    break;
                case 126:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellCastPacket>().Deserialize(ref reader, options);
                    break;
                case 127:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellCooldownPacket>().Deserialize(ref reader, options);
                    break;
                case 128:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellPacket>().Deserialize(ref reader, options);
                    break;
                case 129:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellsPacket>().Deserialize(ref reader, options);
                    break;
                case 130:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 131:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatPointsPacket>().Deserialize(ref reader, options);
                    break;
                case 132:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket>().Deserialize(ref reader, options);
                    break;
                case 133:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StopMusicPacket>().Deserialize(ref reader, options);
                    break;
                case 134:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StopSoundsPacket>().Deserialize(ref reader, options);
                    break;
                case 135:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TargetOverridePacket>().Deserialize(ref reader, options);
                    break;
                case 136:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TimeDataPacket>().Deserialize(ref reader, options);
                    break;
                case 137:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TimePacket>().Deserialize(ref reader, options);
                    break;
                case 138:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TradePacket>().Deserialize(ref reader, options);
                    break;
                case 139:
                    result = (global::Intersect.Network.IntersectPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.TradeRequestPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class AbstractTimedPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.AbstractTimedPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public AbstractTimedPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(7, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.Client.AttackPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.Client.MovePacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.Client.PingPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Server.EntityAttackPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.Server.EntityPositionPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Intersect.Network.Packets.Server.JoinGamePacket).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Intersect.Network.Packets.Server.PingPacket).TypeHandle, new KeyValuePair<int, int>(6, 6) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(7)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.AbstractTimedPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AttackPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.AttackPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.MovePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.MovePacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PingPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.PingPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityAttackPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityAttackPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPositionPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EntityPositionPacket)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.JoinGamePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.JoinGamePacket)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PingPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PingPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.Packets.AbstractTimedPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.Packets.AbstractTimedPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.Packets.AbstractTimedPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.AttackPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.MovePacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.PingPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityAttackPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPositionPacket>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.JoinGamePacket>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Intersect.Network.Packets.AbstractTimedPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PingPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class EditorPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.EditorPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public EditorPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(14, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.Editor.AddTilesetsPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.Editor.CreateGameObjectPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.Editor.CreateMapPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.Editor.EnterMapPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Intersect.Network.Packets.Editor.LinkMapPacket).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Intersect.Network.Packets.Editor.MapListUpdatePacket).TypeHandle, new KeyValuePair<int, int>(6, 6) },
                { typeof(global::Intersect.Network.Packets.Editor.MapUpdatePacket).TypeHandle, new KeyValuePair<int, int>(7, 7) },
                { typeof(global::Intersect.Network.Packets.Editor.NeedMapPacket).TypeHandle, new KeyValuePair<int, int>(8, 8) },
                { typeof(global::Intersect.Network.Packets.Editor.RequestGridPacket).TypeHandle, new KeyValuePair<int, int>(9, 9) },
                { typeof(global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket).TypeHandle, new KeyValuePair<int, int>(10, 10) },
                { typeof(global::Intersect.Network.Packets.Editor.SaveGameObjectPacket).TypeHandle, new KeyValuePair<int, int>(11, 11) },
                { typeof(global::Intersect.Network.Packets.Editor.SaveTimeDataPacket).TypeHandle, new KeyValuePair<int, int>(12, 12) },
                { typeof(global::Intersect.Network.Packets.Editor.UnlinkMapPacket).TypeHandle, new KeyValuePair<int, int>(13, 13) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(14)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
                { 9, 9 },
                { 10, 10 },
                { 11, 11 },
                { 12, 12 },
                { 13, 13 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.EditorPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.AddTilesetsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.AddTilesetsPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.CreateGameObjectPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.CreateGameObjectPacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.CreateMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.CreateMapPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.EnterMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.EnterMapPacket)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.LinkMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.LinkMapPacket)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.MapListUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.MapListUpdatePacket)value, options);
                        break;
                    case 7:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.MapUpdatePacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.MapUpdatePacket)value, options);
                        break;
                    case 8:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.NeedMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.NeedMapPacket)value, options);
                        break;
                    case 9:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.RequestGridPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.RequestGridPacket)value, options);
                        break;
                    case 10:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket)value, options);
                        break;
                    case 11:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.SaveGameObjectPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.SaveGameObjectPacket)value, options);
                        break;
                    case 12:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.SaveTimeDataPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.SaveTimeDataPacket)value, options);
                        break;
                    case 13:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.UnlinkMapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Editor.UnlinkMapPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.Packets.EditorPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.Packets.EditorPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.Packets.EditorPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.AddTilesetsPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.CreateGameObjectPacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.CreateMapPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.EnterMapPacket>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.LinkMapPacket>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.MapListUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.MapUpdatePacket>().Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.NeedMapPacket>().Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.RequestGridPacket>().Deserialize(ref reader, options);
                    break;
                case 10:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket>().Deserialize(ref reader, options);
                    break;
                case 11:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.SaveGameObjectPacket>().Deserialize(ref reader, options);
                    break;
                case 12:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.SaveTimeDataPacket>().Deserialize(ref reader, options);
                    break;
                case 13:
                    result = (global::Intersect.Network.Packets.EditorPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Editor.UnlinkMapPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class SlotQuantityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.SlotQuantityPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public SlotQuantityPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(9, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.Client.BuyItemPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.Client.DepositItemPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.Client.DropItemPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Client.OfferTradeItemPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.Client.RetrieveBagItemPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Intersect.Network.Packets.Client.RevokeTradeItemPacket).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Intersect.Network.Packets.Client.SellItemPacket).TypeHandle, new KeyValuePair<int, int>(6, 6) },
                { typeof(global::Intersect.Network.Packets.Client.StoreBagItemPacket).TypeHandle, new KeyValuePair<int, int>(7, 7) },
                { typeof(global::Intersect.Network.Packets.Client.WithdrawItemPacket).TypeHandle, new KeyValuePair<int, int>(8, 8) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(9)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.SlotQuantityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BuyItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.BuyItemPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DepositItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.DepositItemPacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DropItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.DropItemPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.OfferTradeItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.OfferTradeItemPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RetrieveBagItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.RetrieveBagItemPacket)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RevokeTradeItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.RevokeTradeItemPacket)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SellItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SellItemPacket)value, options);
                        break;
                    case 7:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.StoreBagItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.StoreBagItemPacket)value, options);
                        break;
                    case 8:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.WithdrawItemPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.WithdrawItemPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.Packets.SlotQuantityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.Packets.SlotQuantityPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.Packets.SlotQuantityPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.BuyItemPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DepositItemPacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.DropItemPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.OfferTradeItemPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RetrieveBagItemPacket>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.RevokeTradeItemPacket>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SellItemPacket>().Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.StoreBagItemPacket>().Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Intersect.Network.Packets.SlotQuantityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.WithdrawItemPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class SlotSwapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.SlotSwapPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public SlotSwapPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.Client.HotbarSwapPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.Client.SwapBagItemsPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.Client.SwapBankItemsPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Client.SwapInvItemsPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.Client.SwapSpellsPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.SlotSwapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.HotbarSwapPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.HotbarSwapPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapBagItemsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SwapBagItemsPacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapBankItemsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SwapBankItemsPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapInvItemsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SwapInvItemsPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapSpellsPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Client.SwapSpellsPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.Packets.SlotSwapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.Packets.SlotSwapPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.Packets.SlotSwapPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.Packets.SlotSwapPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.HotbarSwapPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.Packets.SlotSwapPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapBagItemsPacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.Packets.SlotSwapPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapBankItemsPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.Packets.SlotSwapPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapInvItemsPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.Packets.SlotSwapPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Client.SwapSpellsPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets.Server
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class EntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public EntityPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Intersect.Network.Packets.Server.PlayerEntityPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Intersect.Network.Packets.Server.EventEntityPacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Intersect.Network.Packets.Server.NpcEntityPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Intersect.Network.Packets.Server.ProjectileEntityPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Intersect.Network.Packets.Server.ResourceEntityPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayerEntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.PlayerEntityPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EventEntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.EventEntityPacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.NpcEntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.NpcEntityPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ProjectileEntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ProjectileEntityPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ResourceEntityPacket>().Serialize(ref writer, (global::Intersect.Network.Packets.Server.ResourceEntityPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Intersect.Network.Packets.Server.EntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Intersect.Network.Packets.Server.EntityPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Intersect.Network.Packets.Server.EntityPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::Intersect.Network.Packets.Server.EntityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PlayerEntityPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Intersect.Network.Packets.Server.EntityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EventEntityPacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Intersect.Network.Packets.Server.EntityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.NpcEntityPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Intersect.Network.Packets.Server.EntityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ProjectileEntityPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Intersect.Network.Packets.Server.EntityPacket)options.Resolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.ResourceEntityPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Admin.Actions
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class BanActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.BanAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.BanAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.DurationDays);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Reason, options);
            writer.Write(value.BanIp);
        }

        public global::Intersect.Admin.Actions.BanAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __DurationDays__ = default(int);
            var __Reason__ = default(string);
            var __BanIp__ = default(bool);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DurationDays__ = reader.ReadInt32();
                        break;
                    case 3:
                        __Reason__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __BanIp__ = reader.ReadBoolean();
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.BanAction();
            ____result.Name = __Name__;
            ____result.DurationDays = __DurationDays__;
            ____result.Reason = __Reason__;
            ____result.BanIp = __BanIp__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KickActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.KickAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.KickAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.KickAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.KickAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KillActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.KillAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.KillAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.KillAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.KillAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MuteActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.MuteAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.MuteAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.DurationDays);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Reason, options);
            writer.Write(value.BanIp);
        }

        public global::Intersect.Admin.Actions.MuteAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __DurationDays__ = default(int);
            var __Reason__ = default(string);
            var __BanIp__ = default(bool);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DurationDays__ = reader.ReadInt32();
                        break;
                    case 3:
                        __Reason__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __BanIp__ = reader.ReadBoolean();
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.MuteAction();
            ____result.Name = __Name__;
            ____result.DurationDays = __DurationDays__;
            ____result.Reason = __Reason__;
            ____result.BanIp = __BanIp__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetAccessActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.SetAccessAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.SetAccessAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Power, options);
        }

        public global::Intersect.Admin.Actions.SetAccessAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Power__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Power__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.SetAccessAction();
            ____result.Name = __Name__;
            ____result.Power = __Power__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetFaceActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.SetFaceAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.SetFaceAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
        }

        public global::Intersect.Admin.Actions.SetFaceAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Face__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.SetFaceAction();
            ____result.Name = __Name__;
            ____result.Face = __Face__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetSpriteActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.SetSpriteAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.SetSpriteAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
        }

        public global::Intersect.Admin.Actions.SetSpriteAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.SetSpriteAction();
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnbanActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.UnbanAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.UnbanAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.UnbanAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.UnbanAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnmuteActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.UnmuteAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.UnmuteAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.UnmuteAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.UnmuteAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WarpMeToActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.WarpMeToAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.WarpMeToAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.WarpMeToAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.WarpMeToAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WarpToLocationActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.WarpToLocationAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.WarpToLocationAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::Intersect.Admin.Actions.WarpToLocationAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __X__ = reader.ReadByte();
                        break;
                    case 3:
                        __Y__ = reader.ReadByte();
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.WarpToLocationAction();
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WarpToMapActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.WarpToMapAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.WarpToMapAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Admin.Actions.WarpToMapAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.WarpToMapAction();
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WarpToMeActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Admin.Actions.WarpToMeAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Admin.Actions.WarpToMeAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Serialize(ref writer, value.Action, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Admin.Actions.WarpToMeAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.AdminActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.AdminActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Admin.Actions.WarpToMeAction();
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ColorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Color>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Color value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.A);
            writer.Write(value.R);
            writer.Write(value.G);
            writer.Write(value.B);
        }

        public global::Intersect.Color Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __A__ = default(byte);
            var __R__ = default(byte);
            var __G__ = default(byte);
            var __B__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __A__ = reader.ReadByte();
                        break;
                    case 1:
                        __R__ = reader.ReadByte();
                        break;
                    case 2:
                        __G__ = reader.ReadByte();
                        break;
                    case 3:
                        __B__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Color();
            ____result.A = __A__;
            ____result.R = __R__;
            ____result.G = __G__;
            ____result.B = __B__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PointFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Point>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Point value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::Intersect.Point Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __X__ = default(int);
            var __Y__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Point(__X__, __Y__);
            ____result.X = __X__;
            ____result.Y = __Y__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.GameObjects.Events
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class EventGraphicFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.GameObjects.Events.EventGraphic>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.GameObjects.Events.EventGraphic value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Filename, options);
            writer.Write(value.Height);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EventGraphicType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Width);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::Intersect.GameObjects.Events.EventGraphic Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Filename__ = default(string);
            var __Height__ = default(int);
            var __Type__ = default(global::Intersect.Enums.EventGraphicType);
            var __Width__ = default(int);
            var __X__ = default(int);
            var __Y__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Filename__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Height__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EventGraphicType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Width__ = reader.ReadInt32();
                        break;
                    case 4:
                        __X__ = reader.ReadInt32();
                        break;
                    case 5:
                        __Y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.GameObjects.Events.EventGraphic();
            ____result.Filename = __Filename__;
            ____result.Height = __Height__;
            ____result.Type = __Type__;
            ____result.Width = __Width__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class PackedIntersectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.PackedIntersectPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.PackedIntersectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.Key);
            writer.Write(value.Data);
        }

        public global::Intersect.Network.PackedIntersectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Key__ = default(short);
            var __Data__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Key__ = reader.ReadInt16();
                        break;
                    case 1:
                        __Data__ = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.PackedIntersectPacket();
            ____result.Key = __Key__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ApprovalPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.ApprovalPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.ApprovalPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.EncryptedData);
        }

        public global::Intersect.Network.Packets.ApprovalPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __EncryptedData__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EncryptedData__ = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.ApprovalPacket();
            ____result.EncryptedData = __EncryptedData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HailPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.HailPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.HailPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.EncryptedData);
        }

        public global::Intersect.Network.Packets.HailPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __EncryptedData__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EncryptedData__ = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.HailPacket();
            ____result.EncryptedData = __EncryptedData__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets.Client
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AbandonQuestPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.AbandonQuestPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.AbandonQuestPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.QuestId, options);
        }

        public global::Intersect.Network.Packets.Client.AbandonQuestPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __QuestId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __QuestId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.AbandonQuestPacket(__QuestId__);
            ____result.QuestId = __QuestId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AcceptTradePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.AcceptTradePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.AcceptTradePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.AcceptTradePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.AcceptTradePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ActivateEventPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.ActivateEventPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.ActivateEventPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
        }

        public global::Intersect.Network.Packets.Client.ActivateEventPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.ActivateEventPacket(__EventId__);
            ____result.EventId = __EventId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AdminActionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.AdminActionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.AdminActionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.AdminAction>().Serialize(ref writer, value.Action, options);
        }

        public global::Intersect.Network.Packets.Client.AdminActionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Action__ = default(global::Intersect.Admin.Actions.AdminAction);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Admin.Actions.AdminAction>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.AdminActionPacket(__Action__);
            ____result.Action = __Action__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AttackPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.AttackPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.AttackPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Target, options);
        }

        public global::Intersect.Network.Packets.Client.AttackPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Target__ = default(global::System.Guid);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __Target__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.AttackPacket();
            ____result.Target = __Target__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BlockPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.BlockPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.BlockPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Blocking);
        }

        public global::Intersect.Network.Packets.Client.BlockPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Blocking__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Blocking__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.BlockPacket(__Blocking__);
            ____result.Blocking = __Blocking__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BumpPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.BumpPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.BumpPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
        }

        public global::Intersect.Network.Packets.Client.BumpPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __EventId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.BumpPacket(__MapId__, __EventId__);
            ____result.MapId = __MapId__;
            ____result.EventId = __EventId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BuyItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.BuyItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.BuyItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.BuyItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.BuyItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChatMsgPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.ChatMsgPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.ChatMsgPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
            writer.Write(value.Channel);
        }

        public global::Intersect.Network.Packets.Client.ChatMsgPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Message__ = default(string);
            var __Channel__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Channel__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.ChatMsgPacket(__Message__, __Channel__);
            ____result.Message = __Message__;
            ____result.Channel = __Channel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CloseBagPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CloseBagPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CloseBagPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.CloseBagPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CloseBagPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CloseBankPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CloseBankPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CloseBankPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.CloseBankPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CloseBankPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CloseCraftingPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CloseCraftingPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CloseCraftingPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.CloseCraftingPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CloseCraftingPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CloseShopPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CloseShopPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CloseShopPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.CloseShopPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CloseShopPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CraftItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CraftItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CraftItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.CraftId, options);
        }

        public global::Intersect.Network.Packets.Client.CraftItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CraftId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CraftId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CraftItemPacket(__CraftId__);
            ____result.CraftId = __CraftId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateAccountPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CreateAccountPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CreateAccountPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Username, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Password, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Email, options);
        }

        public global::Intersect.Network.Packets.Client.CreateAccountPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Username__ = default(string);
            var __Password__ = default(string);
            var __Email__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Username__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Password__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Email__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CreateAccountPacket(__Username__, __Password__, __Email__);
            ____result.Username = __Username__;
            ____result.Password = __Password__;
            ____result.Email = __Email__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateCharacterPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.CreateCharacterPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.CreateCharacterPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ClassId, options);
            writer.Write(value.Sprite);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.CustomSpriteLayers, options);
        }

        public global::Intersect.Network.Packets.Client.CreateCharacterPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __ClassId__ = default(global::System.Guid);
            var __Sprite__ = default(int);
            var __CustomSpriteLayers__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ClassId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Sprite__ = reader.ReadInt32();
                        break;
                    case 3:
                        __CustomSpriteLayers__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.CreateCharacterPacket(__Name__, __ClassId__, __Sprite__, __CustomSpriteLayers__);
            ____result.Name = __Name__;
            ____result.ClassId = __ClassId__;
            ____result.Sprite = __Sprite__;
            ____result.CustomSpriteLayers = __CustomSpriteLayers__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeclineTradePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.DeclineTradePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.DeclineTradePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.DeclineTradePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.DeclineTradePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeleteCharacterPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.DeleteCharacterPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.DeleteCharacterPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.CharacterId, options);
        }

        public global::Intersect.Network.Packets.Client.DeleteCharacterPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CharacterId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CharacterId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.DeleteCharacterPacket(__CharacterId__);
            ____result.CharacterId = __CharacterId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DepositItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.DepositItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.DepositItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.DepositItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.DepositItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DirectionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.DirectionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.DirectionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Direction);
        }

        public global::Intersect.Network.Packets.Client.DirectionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Direction__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Direction__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.DirectionPacket(__Direction__);
            ____result.Direction = __Direction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DropItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.DropItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.DropItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.DropItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.DropItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnterGamePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.EnterGamePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.EnterGamePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.EnterGamePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.EnterGamePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventInputVariablePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.EventInputVariablePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.EventInputVariablePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
            writer.Write(value.Value);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.StringValue, options);
            writer.Write(value.Canceled);
        }

        public global::Intersect.Network.Packets.Client.EventInputVariablePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);
            var __Value__ = default(int);
            var __StringValue__ = default(string);
            var __Canceled__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Value__ = reader.ReadInt32();
                        break;
                    case 2:
                        __StringValue__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Canceled__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.EventInputVariablePacket(__EventId__, __Value__, __StringValue__, __Canceled__);
            ____result.EventId = __EventId__;
            ____result.Value = __Value__;
            ____result.StringValue = __StringValue__;
            ____result.Canceled = __Canceled__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventResponsePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.EventResponsePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.EventResponsePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
            writer.Write(value.Response);
        }

        public global::Intersect.Network.Packets.Client.EventResponsePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);
            var __Response__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Response__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.EventResponsePacket(__EventId__, __Response__);
            ____result.EventId = __EventId__;
            ____result.Response = __Response__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ForgetSpellPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.ForgetSpellPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.ForgetSpellPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Slot);
        }

        public global::Intersect.Network.Packets.Client.ForgetSpellPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.ForgetSpellPacket(__Slot__);
            ____result.Slot = __Slot__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FriendRequestResponsePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.FriendRequestResponsePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.FriendRequestResponsePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.FriendId, options);
            writer.Write(value.AcceptingRequest);
        }

        public global::Intersect.Network.Packets.Client.FriendRequestResponsePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __FriendId__ = default(global::System.Guid);
            var __AcceptingRequest__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __FriendId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AcceptingRequest__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.FriendRequestResponsePacket(__FriendId__, __AcceptingRequest__);
            ____result.FriendId = __FriendId__;
            ____result.AcceptingRequest = __AcceptingRequest__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildInviteAcceptPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.GuildInviteAcceptPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildInviteDeclinePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.GuildInviteDeclinePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildLeavePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.GuildLeavePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.GuildLeavePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.GuildLeavePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.GuildLeavePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HotbarSwapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.HotbarSwapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.HotbarSwapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Slot1);
            writer.Write(value.Slot2);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.HotbarSwapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot1__ = default(int);
            var __Slot2__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot2__ = reader.ReadInt32();
                        break;
                    case 2:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.HotbarSwapPacket(__Slot1__, __Slot2__);
            ____result.Slot1 = __Slot1__;
            ____result.Slot2 = __Slot2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HotbarUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.HotbarUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.HotbarUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.HotbarSlot);
            writer.Write(value.Type);
            writer.Write(value.Index);
        }

        public global::Intersect.Network.Packets.Client.HotbarUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __HotbarSlot__ = default(byte);
            var __Type__ = default(sbyte);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __HotbarSlot__ = reader.ReadByte();
                        break;
                    case 1:
                        __Type__ = reader.ReadSByte();
                        break;
                    case 2:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.HotbarUpdatePacket(__HotbarSlot__, __Type__, __Index__);
            ____result.HotbarSlot = __HotbarSlot__;
            ____result.Type = __Type__;
            ____result.Index = __Index__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoginPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.LoginPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.LoginPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Username, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Password, options);
        }

        public global::Intersect.Network.Packets.Client.LoginPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Username__ = default(string);
            var __Password__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Username__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Password__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.LoginPacket(__Username__, __Password__);
            ____result.Username = __Username__;
            ____result.Password = __Password__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LogoutPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.LogoutPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.LogoutPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.ReturningToCharSelect);
        }

        public global::Intersect.Network.Packets.Client.LogoutPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __ReturningToCharSelect__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ReturningToCharSelect__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.LogoutPacket(__ReturningToCharSelect__);
            ____result.ReturningToCharSelect = __ReturningToCharSelect__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MovePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.MovePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.MovePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Dir);
        }

        public global::Intersect.Network.Packets.Client.MovePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Dir__ = default(byte);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __X__ = reader.ReadByte();
                        break;
                    case 5:
                        __Y__ = reader.ReadByte();
                        break;
                    case 6:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.MovePacket();
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Dir = __Dir__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NeedMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.NeedMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.NeedMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Client.NeedMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.NeedMapPacket(__MapId__);
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NewCharacterPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.NewCharacterPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.NewCharacterPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.NewCharacterPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.NewCharacterPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class OfferTradeItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.OfferTradeItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.OfferTradeItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.OfferTradeItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.OfferTradeItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class OpenAdminWindowPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.OpenAdminWindowPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.OpenAdminWindowPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.OpenAdminWindowPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.OpenAdminWindowPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyInvitePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PartyInvitePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PartyInvitePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Client.PartyInvitePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PartyInvitePacket(__TargetId__);
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyInviteResponsePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PartyInviteResponsePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PartyInviteResponsePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.PartyId, options);
            writer.Write(value.AcceptingInvite);
        }

        public global::Intersect.Network.Packets.Client.PartyInviteResponsePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PartyId__ = default(global::System.Guid);
            var __AcceptingInvite__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __PartyId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AcceptingInvite__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PartyInviteResponsePacket(__PartyId__, __AcceptingInvite__);
            ____result.PartyId = __PartyId__;
            ____result.AcceptingInvite = __AcceptingInvite__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyKickPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PartyKickPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PartyKickPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Client.PartyKickPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PartyKickPacket(__TargetId__);
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyLeavePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PartyLeavePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PartyLeavePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.PartyLeavePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PartyLeavePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PickupItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PickupItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PickupItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.UniqueId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.TileIndex);
        }

        public global::Intersect.Network.Packets.Client.PickupItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UniqueId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __TileIndex__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __UniqueId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TileIndex__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PickupItemPacket();
            ____result.UniqueId = __UniqueId__;
            ____result.MapId = __MapId__;
            ____result.TileIndex = __TileIndex__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PingPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.PingPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.PingPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            writer.Write(value.Responding);
        }

        public global::Intersect.Network.Packets.Client.PingPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Responding__ = default(bool);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __Responding__ = reader.ReadBoolean();
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.PingPacket();
            ____result.Responding = __Responding__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestResponsePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.QuestResponsePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.QuestResponsePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.QuestId, options);
            writer.Write(value.AcceptingQuest);
        }

        public global::Intersect.Network.Packets.Client.QuestResponsePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __QuestId__ = default(global::System.Guid);
            var __AcceptingQuest__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __QuestId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AcceptingQuest__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.QuestResponsePacket(__QuestId__, __AcceptingQuest__);
            ____result.QuestId = __QuestId__;
            ____result.AcceptingQuest = __AcceptingQuest__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestFriendsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.RequestFriendsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.RequestFriendsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.RequestFriendsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.RequestFriendsPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestGuildPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.RequestGuildPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.RequestGuildPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Client.RequestGuildPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.RequestGuildPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestPasswordResetPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.RequestPasswordResetPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.RequestPasswordResetPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NameOrEmail, options);
        }

        public global::Intersect.Network.Packets.Client.RequestPasswordResetPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __NameOrEmail__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __NameOrEmail__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.RequestPasswordResetPacket(__NameOrEmail__);
            ____result.NameOrEmail = __NameOrEmail__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResetPasswordPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.ResetPasswordPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.ResetPasswordPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NameOrEmail, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ResetCode, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NewPassword, options);
        }

        public global::Intersect.Network.Packets.Client.ResetPasswordPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __NameOrEmail__ = default(string);
            var __ResetCode__ = default(string);
            var __NewPassword__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __NameOrEmail__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ResetCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __NewPassword__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.ResetPasswordPacket(__NameOrEmail__, __ResetCode__, __NewPassword__);
            ____result.NameOrEmail = __NameOrEmail__;
            ____result.ResetCode = __ResetCode__;
            ____result.NewPassword = __NewPassword__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RetrieveBagItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.RetrieveBagItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.RetrieveBagItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(5);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
            writer.Write(value.InventorySlot);
        }

        public global::Intersect.Network.Packets.Client.RetrieveBagItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __InventorySlot__ = default(int);
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 4:
                        __InventorySlot__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.RetrieveBagItemPacket();
            ____result.InventorySlot = __InventorySlot__;
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RevokeTradeItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.RevokeTradeItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.RevokeTradeItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.RevokeTradeItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.RevokeTradeItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SelectCharacterPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SelectCharacterPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SelectCharacterPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.CharacterId, options);
        }

        public global::Intersect.Network.Packets.Client.SelectCharacterPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CharacterId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CharacterId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SelectCharacterPacket(__CharacterId__);
            ____result.CharacterId = __CharacterId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SellItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SellItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SellItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.SellItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SellItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StoreBagItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.StoreBagItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.StoreBagItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.BagSlot);
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.StoreBagItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __BagSlot__ = default(int);
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __BagSlot__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.StoreBagItemPacket(__BagSlot__, __Slot__, __Quantity__);
            ____result.BagSlot = __BagSlot__;
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SwapBagItemsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SwapBagItemsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SwapBagItemsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Slot1);
            writer.Write(value.Slot2);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.SwapBagItemsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot1__ = default(int);
            var __Slot2__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot2__ = reader.ReadInt32();
                        break;
                    case 2:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SwapBagItemsPacket(__Slot1__, __Slot2__);
            ____result.Slot1 = __Slot1__;
            ____result.Slot2 = __Slot2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SwapBankItemsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SwapBankItemsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SwapBankItemsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Slot1);
            writer.Write(value.Slot2);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.SwapBankItemsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot1__ = default(int);
            var __Slot2__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot2__ = reader.ReadInt32();
                        break;
                    case 2:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SwapBankItemsPacket(__Slot1__, __Slot2__);
            ____result.Slot1 = __Slot1__;
            ____result.Slot2 = __Slot2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SwapInvItemsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SwapInvItemsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SwapInvItemsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Slot1);
            writer.Write(value.Slot2);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.SwapInvItemsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot1__ = default(int);
            var __Slot2__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot2__ = reader.ReadInt32();
                        break;
                    case 2:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SwapInvItemsPacket(__Slot1__, __Slot2__);
            ____result.Slot1 = __Slot1__;
            ____result.Slot2 = __Slot2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SwapSpellsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.SwapSpellsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.SwapSpellsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Slot1);
            writer.Write(value.Slot2);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.SwapSpellsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot1__ = default(int);
            var __Slot2__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Slot2__ = reader.ReadInt32();
                        break;
                    case 2:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.SwapSpellsPacket(__Slot1__, __Slot2__);
            ____result.Slot1 = __Slot1__;
            ____result.Slot2 = __Slot2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TradeRequestPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.TradeRequestPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.TradeRequestPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Client.TradeRequestPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.TradeRequestPacket(__TargetId__);
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TradeRequestResponsePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.TradeRequestResponsePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.TradeRequestResponsePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TradeId, options);
            writer.Write(value.AcceptingInvite);
        }

        public global::Intersect.Network.Packets.Client.TradeRequestResponsePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TradeId__ = default(global::System.Guid);
            var __AcceptingInvite__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TradeId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AcceptingInvite__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.TradeRequestResponsePacket(__TradeId__, __AcceptingInvite__);
            ____result.TradeId = __TradeId__;
            ____result.AcceptingInvite = __AcceptingInvite__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnequipItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UnequipItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UnequipItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Slot);
        }

        public global::Intersect.Network.Packets.Client.UnequipItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UnequipItemPacket(__Slot__);
            ____result.Slot = __Slot__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateFriendsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UpdateFriendsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UpdateFriendsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.Adding);
        }

        public global::Intersect.Network.Packets.Client.UpdateFriendsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Adding__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Adding__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UpdateFriendsPacket(__Name__, __Adding__);
            ____result.Name = __Name__;
            ____result.Adding = __Adding__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateGuildMemberPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GuildMemberUpdateActions>().Serialize(ref writer, value.Action, options);
        }

        public global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Action__ = default(global::Intersect.Enums.GuildMemberUpdateActions);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Action__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GuildMemberUpdateActions>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UpdateGuildMemberPacket(__Name__, __Action__);
            ____result.Name = __Name__;
            ____result.Action = __Action__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpgradeStatPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UpgradeStatPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UpgradeStatPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Stat);
        }

        public global::Intersect.Network.Packets.Client.UpgradeStatPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Stat__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Stat__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UpgradeStatPacket(__Stat__);
            ____result.Stat = __Stat__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UseItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UseItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UseItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Client.UseItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 1:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UseItemPacket(__Slot__, __TargetId__);
            ____result.Slot = __Slot__;
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UseSpellPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.UseSpellPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.UseSpellPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Client.UseSpellPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 1:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.UseSpellPacket(__Slot__, __TargetId__);
            ____result.Slot = __Slot__;
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WithdrawItemPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Client.WithdrawItemPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Client.WithdrawItemPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.WriteNil();
            writer.Write(value.Slot);
            writer.Write(value.Quantity);
            writer.Write(value.IsValid);
        }

        public global::Intersect.Network.Packets.Client.WithdrawItemPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __Quantity__ = default(int);
            var __IsValid__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 3:
                        __IsValid__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Client.WithdrawItemPacket();
            ____result.Slot = __Slot__;
            ____result.Quantity = __Quantity__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets.Editor
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AddTilesetsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.AddTilesetsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.AddTilesetsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Tilesets, options);
        }

        public global::Intersect.Network.Packets.Editor.AddTilesetsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Tilesets__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Tilesets__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.AddTilesetsPacket(__Tilesets__);
            ____result.Tilesets = __Tilesets__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateGameObjectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.CreateGameObjectPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.CreateGameObjectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
        }

        public global::Intersect.Network.Packets.Editor.CreateGameObjectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::Intersect.Enums.GameObjectType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.CreateGameObjectPacket(__Type__);
            ____result.Type = __Type__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.CreateMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.CreateMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.AttachedToMap);
            writer.Write(value.AttachDir);
            writer.Write(value.MapListParentType);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapListParentId, options);
        }

        public global::Intersect.Network.Packets.Editor.CreateMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __AttachedToMap__ = default(bool);
            var __AttachDir__ = default(byte);
            var __MapListParentType__ = default(byte);
            var __MapListParentId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AttachedToMap__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __AttachDir__ = reader.ReadByte();
                        break;
                    case 3:
                        __MapListParentType__ = reader.ReadByte();
                        break;
                    case 4:
                        __MapListParentId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.CreateMapPacket();
            ____result.MapId = __MapId__;
            ____result.AttachedToMap = __AttachedToMap__;
            ____result.AttachDir = __AttachDir__;
            ____result.MapListParentType = __MapListParentType__;
            ____result.MapListParentId = __MapListParentId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeleteGameObjectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
        }

        public global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::Intersect.Enums.GameObjectType);
            var __Id__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.DeleteGameObjectPacket(__Type__, __Id__);
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnterMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.EnterMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.EnterMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Editor.EnterMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.EnterMapPacket(__MapId__);
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LinkMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.LinkMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.LinkMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.LinkMapId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.AdjacentMapId, options);
            writer.Write(value.GridX);
            writer.Write(value.GridY);
        }

        public global::Intersect.Network.Packets.Editor.LinkMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LinkMapId__ = default(global::System.Guid);
            var __AdjacentMapId__ = default(global::System.Guid);
            var __GridX__ = default(int);
            var __GridY__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __LinkMapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AdjacentMapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GridX__ = reader.ReadInt32();
                        break;
                    case 3:
                        __GridY__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.LinkMapPacket(__LinkMapId__, __AdjacentMapId__, __GridX__, __GridY__);
            ____result.LinkMapId = __LinkMapId__;
            ____result.AdjacentMapId = __AdjacentMapId__;
            ____result.GridX = __GridX__;
            ____result.GridY = __GridY__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoginPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.LoginPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.LoginPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Username, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Password, options);
        }

        public global::Intersect.Network.Packets.Editor.LoginPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Username__ = default(string);
            var __Password__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Username__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Password__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.LoginPacket(__Username__, __Password__);
            ____result.Username = __Username__;
            ____result.Password = __Password__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapListUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.MapListUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.MapListUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.MapListUpdates>().Serialize(ref writer, value.UpdateType, options);
            writer.Write(value.TargetType);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
            writer.Write(value.ParentType);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ParentId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::Intersect.Network.Packets.Editor.MapListUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UpdateType__ = default(global::Intersect.Enums.MapListUpdates);
            var __TargetType__ = default(int);
            var __TargetId__ = default(global::System.Guid);
            var __ParentType__ = default(int);
            var __ParentId__ = default(global::System.Guid);
            var __Name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __UpdateType__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.MapListUpdates>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TargetType__ = reader.ReadInt32();
                        break;
                    case 2:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ParentType__ = reader.ReadInt32();
                        break;
                    case 4:
                        __ParentId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.MapListUpdatePacket(__UpdateType__, __TargetType__, __TargetId__, __ParentType__, __ParentId__, __Name__);
            ____result.UpdateType = __UpdateType__;
            ____result.TargetType = __TargetType__;
            ____result.TargetId = __TargetId__;
            ____result.ParentType = __ParentType__;
            ____result.ParentId = __ParentId__;
            ____result.Name = __Name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.MapUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.MapUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.JsonData, options);
            writer.Write(value.TileData);
            writer.Write(value.AttributeData);
        }

        public global::Intersect.Network.Packets.Editor.MapUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __JsonData__ = default(string);
            var __TileData__ = default(byte[]);
            var __AttributeData__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __JsonData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TileData__ = reader.ReadBytes()?.ToArray();
                        break;
                    case 3:
                        __AttributeData__ = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.MapUpdatePacket(__MapId__, __JsonData__, __TileData__, __AttributeData__);
            ____result.MapId = __MapId__;
            ____result.JsonData = __JsonData__;
            ____result.TileData = __TileData__;
            ____result.AttributeData = __AttributeData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NeedMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.NeedMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.NeedMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Editor.NeedMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.NeedMapPacket(__MapId__);
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PingPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.PingPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.PingPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Editor.PingPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.PingPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestGridPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.RequestGridPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.RequestGridPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Editor.RequestGridPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.RequestGridPacket(__MapId__);
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestOpenEditorPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
        }

        public global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::Intersect.Enums.GameObjectType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.RequestOpenEditorPacket(__Type__);
            ____result.Type = __Type__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SaveGameObjectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.SaveGameObjectPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.SaveGameObjectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Data, options);
        }

        public global::Intersect.Network.Packets.Editor.SaveGameObjectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::Intersect.Enums.GameObjectType);
            var __Id__ = default(global::System.Guid);
            var __Data__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Data__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.SaveGameObjectPacket(__Type__, __Id__, __Data__);
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SaveTimeDataPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.SaveTimeDataPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.SaveTimeDataPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TimeJson, options);
        }

        public global::Intersect.Network.Packets.Editor.SaveTimeDataPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TimeJson__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TimeJson__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.SaveTimeDataPacket(__TimeJson__);
            ____result.TimeJson = __TimeJson__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnlinkMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Editor.UnlinkMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Editor.UnlinkMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.CurrentMapId, options);
        }

        public global::Intersect.Network.Packets.Editor.UnlinkMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __CurrentMapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __CurrentMapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Editor.UnlinkMapPacket(__MapId__, __CurrentMapId__);
            ____result.MapId = __MapId__;
            ____result.CurrentMapId = __CurrentMapId__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Intersect.Network.Formatters.Intersect.Network.Packets.Server
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ActionMsgPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ActionMsgPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ActionMsgPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
        }

        public global::Intersect.Network.Packets.Server.ActionMsgPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(int);
            var __Y__ = default(int);
            var __Message__ = default(string);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __X__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Y__ = reader.ReadInt32();
                        break;
                    case 3:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ActionMsgPacket(__MapId__, __X__, __Y__, __Message__, __Color__);
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Message = __Message__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AdminPanelPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.AdminPanelPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.AdminPanelPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.AdminPanelPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.AdminPanelPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AnnouncementPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.AnnouncementPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.AnnouncementPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
            writer.Write(value.Duration);
        }

        public global::Intersect.Network.Packets.Server.AnnouncementPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Message__ = default(string);
            var __Duration__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Duration__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.AnnouncementPacket(__Message__, __Duration__);
            ____result.Message = __Message__;
            ____result.Duration = __Duration__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BagPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.BagPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.BagPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.Slots);
            writer.Write(value.Close);
        }

        public global::Intersect.Network.Packets.Server.BagPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Slots__ = default(int);
            var __Close__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slots__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Close__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.BagPacket(__Slots__, __Close__);
            ____result.Slots = __Slots__;
            ____result.Close = __Close__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BagUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.BagUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.BagUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.WriteNil();
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ItemId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Serialize(ref writer, value.BagId, options);
            writer.Write(value.Quantity);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StatBuffs, options);
        }

        public global::Intersect.Network.Packets.Server.BagUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __ItemId__ = default(global::System.Guid);
            var __BagId__ = default(global::System.Guid?);
            var __Quantity__ = default(int);
            var __StatBuffs__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ItemId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __BagId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 5:
                        __StatBuffs__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.BagUpdatePacket();
            ____result.Slot = __Slot__;
            ____result.ItemId = __ItemId__;
            ____result.BagId = __BagId__;
            ____result.Quantity = __Quantity__;
            ____result.StatBuffs = __StatBuffs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BankPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.BankPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.BankPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Close);
        }

        public global::Intersect.Network.Packets.Server.BankPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Close__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Close__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.BankPacket(__Close__);
            ____result.Close = __Close__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BankUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.BankUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.BankUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.WriteNil();
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ItemId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Serialize(ref writer, value.BagId, options);
            writer.Write(value.Quantity);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StatBuffs, options);
        }

        public global::Intersect.Network.Packets.Server.BankUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __ItemId__ = default(global::System.Guid);
            var __BagId__ = default(global::System.Guid?);
            var __Quantity__ = default(int);
            var __StatBuffs__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ItemId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __BagId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 5:
                        __StatBuffs__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.BankUpdatePacket();
            ____result.Slot = __Slot__;
            ____result.ItemId = __ItemId__;
            ____result.BagId = __BagId__;
            ____result.Quantity = __Quantity__;
            ____result.StatBuffs = __StatBuffs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CancelCastPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CancelCastPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CancelCastPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
        }

        public global::Intersect.Network.Packets.Server.CancelCastPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CancelCastPacket(__EntityId__);
            ____result.EntityId = __EntityId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CharacterCreationPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CharacterCreationPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CharacterCreationPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.CharacterCreationPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CharacterCreationPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CharacterPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CharacterPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CharacterPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ClassName, options);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Equipment, options);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.CustomSpriteLayers, options);
        }

        public global::Intersect.Network.Packets.Server.CharacterPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __ClassName__ = default(string);
            var __Equipment__ = default(string[]);
            var __CustomSpriteLayers__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 5:
                        __ClassName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Equipment__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __CustomSpriteLayers__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CharacterPacket(__Id__, __Name__, __Sprite__, __Face__, __Level__, __ClassName__, __Equipment__, __CustomSpriteLayers__);
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.ClassName = __ClassName__;
            ____result.Equipment = __Equipment__;
            ____result.CustomSpriteLayers = __CustomSpriteLayers__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CharactersPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CharactersPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CharactersPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterPacket[]>().Serialize(ref writer, value.Characters, options);
            writer.Write(value.FreeSlot);
        }

        public global::Intersect.Network.Packets.Server.CharactersPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Characters__ = default(global::Intersect.Network.Packets.Server.CharacterPacket[]);
            var __FreeSlot__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Characters__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CharacterPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __FreeSlot__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CharactersPacket(__Characters__, __FreeSlot__);
            ____result.Characters = __Characters__;
            ____result.FreeSlot = __FreeSlot__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChatBubblePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ChatBubblePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ChatBubblePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Text, options);
        }

        public global::Intersect.Network.Packets.Server.ChatBubblePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __Text__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ChatBubblePacket(__EntityId__, __Type__, __MapId__, __Text__);
            ____result.EntityId = __EntityId__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.Text = __Text__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChatMsgPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ChatMsgPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ChatMsgPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.ChatMessageType>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Target, options);
        }

        public global::Intersect.Network.Packets.Server.ChatMsgPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Message__ = default(string);
            var __Type__ = default(global::Intersect.Enums.ChatMessageType);
            var __Color__ = default(global::Intersect.Color);
            var __Target__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.ChatMessageType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Target__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ChatMsgPacket(__Message__, __Type__, __Color__, __Target__);
            ____result.Message = __Message__;
            ____result.Type = __Type__;
            ____result.Color = __Color__;
            ____result.Target = __Target__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ConfigPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ConfigPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ConfigPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Config, options);
        }

        public global::Intersect.Network.Packets.Server.ConfigPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Config__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Config__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ConfigPacket(__Config__);
            ____result.Config = __Config__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CraftingTablePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CraftingTablePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CraftingTablePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TableData, options);
            writer.Write(value.Close);
        }

        public global::Intersect.Network.Packets.Server.CraftingTablePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TableData__ = default(string);
            var __Close__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TableData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Close__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CraftingTablePacket(__TableData__, __Close__);
            ____result.TableData = __TableData__;
            ____result.Close = __Close__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CustomSpriteLayersPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.CustomSpriteLayers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
        }

        public global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CustomSpriteLayers__ = default(string[]);
            var __EntityId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __CustomSpriteLayers__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket();
            ____result.CustomSpriteLayers = __CustomSpriteLayers__;
            ____result.EntityId = __EntityId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnteringGamePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EnteringGamePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EnteringGamePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.EnteringGamePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EnteringGamePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnterMapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EnterMapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EnterMapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Server.EnterMapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EnterMapPacket(__MapId__);
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityAttackPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityAttackPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityAttackPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.AttackTimer);
        }

        public global::Intersect.Network.Packets.Server.EntityAttackPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __AttackTimer__ = default(int);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __AttackTimer__ = reader.ReadInt32();
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityAttackPacket();
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.AttackTimer = __AttackTimer__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityDashPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityDashPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityDashPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EndMapId, options);
            writer.Write(value.EndX);
            writer.Write(value.EndY);
            writer.Write(value.DashTime);
            writer.Write(value.Direction);
        }

        public global::Intersect.Network.Packets.Server.EntityDashPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __EndMapId__ = default(global::System.Guid);
            var __EndX__ = default(byte);
            var __EndY__ = default(byte);
            var __DashTime__ = default(int);
            var __Direction__ = default(sbyte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EndMapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EndX__ = reader.ReadByte();
                        break;
                    case 3:
                        __EndY__ = reader.ReadByte();
                        break;
                    case 4:
                        __DashTime__ = reader.ReadInt32();
                        break;
                    case 5:
                        __Direction__ = reader.ReadSByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityDashPacket(__EntityId__, __EndMapId__, __EndX__, __EndY__, __DashTime__, __Direction__);
            ____result.EntityId = __EntityId__;
            ____result.EndMapId = __EndMapId__;
            ____result.EndX = __EndX__;
            ____result.EndY = __EndY__;
            ____result.DashTime = __DashTime__;
            ____result.Direction = __Direction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityDiePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityDiePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityDiePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Server.EntityDiePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityDiePacket(__Id__, __Type__, __MapId__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityDirectionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityDirectionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityDirectionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.Direction);
        }

        public global::Intersect.Network.Packets.Server.EntityDirectionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __Direction__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Direction__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityDirectionPacket(__Id__, __Type__, __MapId__, __Direction__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.Direction = __Direction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityLeftPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityLeftPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityLeftPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
        }

        public global::Intersect.Network.Packets.Server.EntityLeftPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityLeftPacket(__Id__, __Type__, __MapId__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityMovePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityMovePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityMovePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Direction);
            writer.Write(value.Correction);
        }

        public global::Intersect.Network.Packets.Server.EntityMovePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Direction__ = default(byte);
            var __Correction__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __X__ = reader.ReadByte();
                        break;
                    case 4:
                        __Y__ = reader.ReadByte();
                        break;
                    case 5:
                        __Direction__ = reader.ReadByte();
                        break;
                    case 6:
                        __Correction__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityMovePacket(__Id__, __Type__, __MapId__, __X__, __Y__, __Direction__, __Correction__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Direction = __Direction__;
            ____result.Correction = __Correction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityPositionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityPositionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityPositionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Direction);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
        }

        public global::Intersect.Network.Packets.Server.EntityPositionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Direction__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __X__ = reader.ReadByte();
                        break;
                    case 7:
                        __Y__ = reader.ReadByte();
                        break;
                    case 8:
                        __Direction__ = reader.ReadByte();
                        break;
                    case 9:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 10:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityPositionPacket();
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Direction = __Direction__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityStatsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityStatsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityStatsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
        }

        public global::Intersect.Network.Packets.Server.EntityStatsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __Stats__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityStatsPacket(__Id__, __Type__, __MapId__, __Stats__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.Stats = __Stats__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityStatusDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityStatusData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityStatusData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.Statuses, options);
        }

        public global::Intersect.Network.Packets.Server.EntityStatusData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __Statuses__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Statuses__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityStatusData();
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.Statuses = __Statuses__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityVitalDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityVitalData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityVitalData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vitals, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVitals, options);
            writer.Write(value.CombatTimeRemaining);
        }

        public global::Intersect.Network.Packets.Server.EntityVitalData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __Vitals__ = default(int[]);
            var __MaxVitals__ = default(int[]);
            var __CombatTimeRemaining__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Vitals__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MaxVitals__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CombatTimeRemaining__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityVitalData();
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.Vitals = __Vitals__;
            ____result.MaxVitals = __MaxVitals__;
            ____result.CombatTimeRemaining = __CombatTimeRemaining__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityVitalsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityVitalsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityVitalsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vitals, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVitals, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.CombatTimeRemaining);
        }

        public global::Intersect.Network.Packets.Server.EntityVitalsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.EntityTypes);
            var __MapId__ = default(global::System.Guid);
            var __Vitals__ = default(int[]);
            var __MaxVitals__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __CombatTimeRemaining__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.EntityTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Vitals__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __MaxVitals__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __CombatTimeRemaining__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityVitalsPacket(__Id__, __Type__, __MapId__, __Vitals__, __MaxVitals__, __StatusEffects__, __CombatTimeRemaining__);
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.MapId = __MapId__;
            ____result.Vitals = __Vitals__;
            ____result.MaxVitals = __MaxVitals__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.CombatTimeRemaining = __CombatTimeRemaining__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityZDimensionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EntityZDimensionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EntityZDimensionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            writer.Write(value.Level);
        }

        public global::Intersect.Network.Packets.Server.EntityZDimensionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __Level__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Level__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EntityZDimensionPacket(__EntityId__, __Level__);
            ____result.EntityId = __EntityId__;
            ____result.Level = __Level__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EquipmentPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EquipmentPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EquipmentPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.InventorySlots, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.ItemIds, options);
        }

        public global::Intersect.Network.Packets.Server.EquipmentPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __InventorySlots__ = default(int[]);
            var __ItemIds__ = default(global::System.Guid[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __InventorySlots__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ItemIds__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EquipmentPacket(__EntityId__, __InventorySlots__, __ItemIds__);
            ____result.EntityId = __EntityId__;
            ____result.InventorySlots = __InventorySlots__;
            ____result.ItemIds = __ItemIds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ErrorMessagePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ErrorMessagePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ErrorMessagePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Header, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Error, options);
        }

        public global::Intersect.Network.Packets.Server.ErrorMessagePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Header__ = default(string);
            var __Error__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Header__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Error__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ErrorMessagePacket(__Header__, __Error__);
            ____result.Header = __Header__;
            ____result.Error = __Error__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventDialogPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EventDialogPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EventDialogPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Prompt, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Type);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.Responses, options);
        }

        public global::Intersect.Network.Packets.Server.EventDialogPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);
            var __Prompt__ = default(string);
            var __Face__ = default(string);
            var __Type__ = default(byte);
            var __Responses__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Prompt__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Type__ = reader.ReadByte();
                        break;
                    case 4:
                        __Responses__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EventDialogPacket(__EventId__, __Prompt__, __Face__, __Type__, __Responses__);
            ____result.EventId = __EventId__;
            ____result.Prompt = __Prompt__;
            ____result.Face = __Face__;
            ____result.Type = __Type__;
            ____result.Responses = __Responses__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventEntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.EventEntityPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.EventEntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(30);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Z);
            writer.Write(value.Dir);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
            writer.Write(value.HideEntity);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.Animations, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.IsSelf);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.NameColor, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.HeaderLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.FooterLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            writer.Write(value.DirectionFix);
            writer.Write(value.WalkingAnim);
            writer.Write(value.DisablePreview);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.GameObjects.Events.EventGraphic>().Serialize(ref writer, value.Graphic, options);
            writer.Write(value.RenderLayer);
        }

        public global::Intersect.Network.Packets.Server.EventEntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DirectionFix__ = default(bool);
            var __WalkingAnim__ = default(bool);
            var __DisablePreview__ = default(bool);
            var __Description__ = default(string);
            var __Graphic__ = default(global::Intersect.GameObjects.Events.EventGraphic);
            var __RenderLayer__ = default(byte);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Z__ = default(byte);
            var __Dir__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __HideEntity__ = default(bool);
            var __Animations__ = default(global::System.Guid[]);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Stats__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __IsSelf__ = default(bool);
            var __NameColor__ = default(global::Intersect.Color);
            var __HeaderLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __FooterLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 24:
                        __DirectionFix__ = reader.ReadBoolean();
                        break;
                    case 25:
                        __WalkingAnim__ = reader.ReadBoolean();
                        break;
                    case 26:
                        __DisablePreview__ = reader.ReadBoolean();
                        break;
                    case 27:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __Graphic__ = formatterResolver.GetFormatterWithVerify<global::Intersect.GameObjects.Events.EventGraphic>().Deserialize(ref reader, options);
                        break;
                    case 29:
                        __RenderLayer__ = reader.ReadByte();
                        break;
                    case 1:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 7:
                        __X__ = reader.ReadByte();
                        break;
                    case 8:
                        __Y__ = reader.ReadByte();
                        break;
                    case 9:
                        __Z__ = reader.ReadByte();
                        break;
                    case 10:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 11:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __HideEntity__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __Animations__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __IsSelf__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __NameColor__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __HeaderLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __FooterLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.EventEntityPacket();
            ____result.DirectionFix = __DirectionFix__;
            ____result.WalkingAnim = __WalkingAnim__;
            ____result.DisablePreview = __DisablePreview__;
            ____result.Description = __Description__;
            ____result.Graphic = __Graphic__;
            ____result.RenderLayer = __RenderLayer__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Z = __Z__;
            ____result.Dir = __Dir__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.HideEntity = __HideEntity__;
            ____result.Animations = __Animations__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Stats = __Stats__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.IsSelf = __IsSelf__;
            ____result.NameColor = __NameColor__;
            ____result.HeaderLabel = __HeaderLabel__;
            ____result.FooterLabel = __FooterLabel__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ExperiencePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ExperiencePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ExperiencePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.Experience);
            writer.Write(value.ExperienceToNextLevel);
        }

        public global::Intersect.Network.Packets.Server.ExperiencePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Experience__ = default(long);
            var __ExperienceToNextLevel__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Experience__ = reader.ReadInt64();
                        break;
                    case 1:
                        __ExperienceToNextLevel__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ExperiencePacket(__Experience__, __ExperienceToNextLevel__);
            ____result.Experience = __Experience__;
            ____result.ExperienceToNextLevel = __ExperienceToNextLevel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FriendRequestPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.FriendRequestPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.FriendRequestPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.FriendId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FriendName, options);
        }

        public global::Intersect.Network.Packets.Server.FriendRequestPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __FriendId__ = default(global::System.Guid);
            var __FriendName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __FriendId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __FriendName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.FriendRequestPacket(__FriendId__, __FriendName__);
            ____result.FriendId = __FriendId__;
            ____result.FriendName = __FriendName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FriendsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.FriendsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.FriendsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.OnlineFriends, options);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.OfflineFriends, options);
        }

        public global::Intersect.Network.Packets.Server.FriendsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OnlineFriends__ = default(global::System.Collections.Generic.Dictionary<string, string>);
            var __OfflineFriends__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OnlineFriends__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __OfflineFriends__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.FriendsPacket(__OnlineFriends__, __OfflineFriends__);
            ____result.OnlineFriends = __OnlineFriends__;
            ____result.OfflineFriends = __OfflineFriends__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameDataPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.GameDataPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.GameDataPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameObjectPacket[]>().Serialize(ref writer, value.GameObjects, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ColorsJson, options);
        }

        public global::Intersect.Network.Packets.Server.GameDataPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GameObjects__ = default(global::Intersect.Network.Packets.Server.GameObjectPacket[]);
            var __ColorsJson__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __GameObjects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.GameObjectPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ColorsJson__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.GameDataPacket(__GameObjects__, __ColorsJson__);
            ____result.GameObjects = __GameObjects__;
            ____result.ColorsJson = __ColorsJson__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameObjectPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.GameObjectPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.GameObjectPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.AnotherFollowing);
            writer.Write(value.Deleted);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Data, options);
        }

        public global::Intersect.Network.Packets.Server.GameObjectPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.GameObjectType);
            var __AnotherFollowing__ = default(bool);
            var __Deleted__ = default(bool);
            var __Data__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AnotherFollowing__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __Deleted__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __Data__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.GameObjectPacket();
            ____result.Id = __Id__;
            ____result.Type = __Type__;
            ____result.AnotherFollowing = __AnotherFollowing__;
            ____result.Deleted = __Deleted__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildInvitePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.GuildInvitePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.GuildInvitePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Inviter, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.GuildName, options);
        }

        public global::Intersect.Network.Packets.Server.GuildInvitePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Inviter__ = default(string);
            var __GuildName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Inviter__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __GuildName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.GuildInvitePacket(__Inviter__, __GuildName__);
            ____result.Inviter = __Inviter__;
            ____result.GuildName = __GuildName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GuildPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.GuildPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.GuildPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.OnlineMembers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.OfflineMembers, options);
        }

        public global::Intersect.Network.Packets.Server.GuildPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OnlineMembers__ = default(global::System.Collections.Generic.Dictionary<string, string>);
            var __OfflineMembers__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OnlineMembers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __OfflineMembers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.GuildPacket(__OnlineMembers__, __OfflineMembers__);
            ____result.OnlineMembers = __OnlineMembers__;
            ____result.OfflineMembers = __OfflineMembers__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HidePicturePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.HidePicturePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.HidePicturePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.HidePicturePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.HidePicturePacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HoldPlayerPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.HoldPlayerPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.HoldPlayerPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.Releasing);
        }

        public global::Intersect.Network.Packets.Server.HoldPlayerPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Releasing__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Releasing__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.HoldPlayerPacket(__EventId__, __MapId__, __Releasing__);
            ____result.EventId = __EventId__;
            ____result.MapId = __MapId__;
            ____result.Releasing = __Releasing__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HotbarPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.HotbarPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.HotbarPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.SlotData, options);
        }

        public global::Intersect.Network.Packets.Server.HotbarPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SlotData__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SlotData__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.HotbarPacket(__SlotData__);
            ____result.SlotData = __SlotData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InputVariablePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.InputVariablePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.InputVariablePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EventId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Title, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Prompt, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.VariableDataTypes>().Serialize(ref writer, value.Type, options);
        }

        public global::Intersect.Network.Packets.Server.InputVariablePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EventId__ = default(global::System.Guid);
            var __Title__ = default(string);
            var __Prompt__ = default(string);
            var __Type__ = default(global::Intersect.Enums.VariableDataTypes);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EventId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Title__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Prompt__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.VariableDataTypes>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.InputVariablePacket(__EventId__, __Title__, __Prompt__, __Type__);
            ____result.EventId = __EventId__;
            ____result.Title = __Title__;
            ____result.Prompt = __Prompt__;
            ____result.Type = __Type__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.InventoryPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.InventoryPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryUpdatePacket[]>().Serialize(ref writer, value.Slots, options);
        }

        public global::Intersect.Network.Packets.Server.InventoryPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slots__ = default(global::Intersect.Network.Packets.Server.InventoryUpdatePacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slots__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.InventoryUpdatePacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.InventoryPacket(__Slots__);
            ____result.Slots = __Slots__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.InventoryUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.InventoryUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.WriteNil();
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ItemId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Serialize(ref writer, value.BagId, options);
            writer.Write(value.Quantity);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StatBuffs, options);
        }

        public global::Intersect.Network.Packets.Server.InventoryUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __ItemId__ = default(global::System.Guid);
            var __BagId__ = default(global::System.Guid?);
            var __Quantity__ = default(int);
            var __StatBuffs__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ItemId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __BagId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 5:
                        __StatBuffs__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.InventoryUpdatePacket();
            ____result.Slot = __Slot__;
            ____result.ItemId = __ItemId__;
            ____result.BagId = __BagId__;
            ____result.Quantity = __Quantity__;
            ____result.StatBuffs = __StatBuffs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemCooldownPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ItemCooldownPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ItemCooldownPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, long>>().Serialize(ref writer, value.ItemCds, options);
        }

        public global::Intersect.Network.Packets.Server.ItemCooldownPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ItemCds__ = default(global::System.Collections.Generic.Dictionary<global::System.Guid, long>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ItemCds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, long>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ItemCooldownPacket(__ItemCds__);
            ____result.ItemCds = __ItemCds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinGamePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.JoinGamePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.JoinGamePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
        }

        public global::Intersect.Network.Packets.Server.JoinGamePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.JoinGamePacket();
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LabelPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.LabelPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.LabelPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Label, options);
        }

        public global::Intersect.Network.Packets.Server.LabelPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Color__ = default(global::Intersect.Color);
            var __Label__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Label__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.LabelPacket();
            ____result.Color = __Color__;
            ____result.Label = __Label__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapAreaPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapAreaPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapAreaPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapPacket[]>().Serialize(ref writer, value.Maps, options);
        }

        public global::Intersect.Network.Packets.Server.MapAreaPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Maps__ = default(global::Intersect.Network.Packets.Server.MapPacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Maps__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapPacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapAreaPacket(__Maps__);
            ____result.Maps = __Maps__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapEntitiesPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapEntitiesPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapEntitiesPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPacket[]>().Serialize(ref writer, value.MapEntities, options);
        }

        public global::Intersect.Network.Packets.Server.MapEntitiesPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapEntities__ = default(global::Intersect.Network.Packets.Server.EntityPacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapEntities__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityPacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapEntitiesPacket(__MapEntities__);
            ____result.MapEntities = __MapEntities__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapEntityStatusPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapEntityStatusPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapEntityStatusPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityStatusData[]>().Serialize(ref writer, value.EntityUpdates, options);
        }

        public global::Intersect.Network.Packets.Server.MapEntityStatusPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __EntityUpdates__ = default(global::Intersect.Network.Packets.Server.EntityStatusData[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EntityUpdates__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityStatusData[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapEntityStatusPacket(__MapId__, __EntityUpdates__);
            ____result.MapId = __MapId__;
            ____result.EntityUpdates = __EntityUpdates__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapEntityVitalsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapEntityVitalsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapEntityVitalsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityVitalData[]>().Serialize(ref writer, value.EntityUpdates, options);
        }

        public global::Intersect.Network.Packets.Server.MapEntityVitalsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __EntityUpdates__ = default(global::Intersect.Network.Packets.Server.EntityVitalData[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EntityUpdates__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EntityVitalData[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapEntityVitalsPacket(__MapId__, __EntityUpdates__);
            ____result.MapId = __MapId__;
            ____result.EntityUpdates = __EntityUpdates__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapGridPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapGridPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapGridPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[,]>().Serialize(ref writer, value.Grid, options);
            formatterResolver.GetFormatterWithVerify<string[,]>().Serialize(ref writer, value.EditorGrid, options);
            writer.Write(value.ClearKnownMaps);
        }

        public global::Intersect.Network.Packets.Server.MapGridPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Grid__ = default(global::System.Guid[,]);
            var __EditorGrid__ = default(string[,]);
            var __ClearKnownMaps__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Grid__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[,]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EditorGrid__ = formatterResolver.GetFormatterWithVerify<string[,]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ClearKnownMaps__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapGridPacket(__Grid__, __EditorGrid__, __ClearKnownMaps__);
            ____result.Grid = __Grid__;
            ____result.EditorGrid = __EditorGrid__;
            ____result.ClearKnownMaps = __ClearKnownMaps__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapItemsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapItemsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapItemsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemUpdatePacket[]>().Serialize(ref writer, value.Items, options);
        }

        public global::Intersect.Network.Packets.Server.MapItemsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Items__ = default(global::Intersect.Network.Packets.Server.MapItemUpdatePacket[]);
            var __MapId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Items__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemUpdatePacket[]>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapItemsPacket(__MapId__, __Items__);
            ____result.Items = __Items__;
            ____result.MapId = __MapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapItemUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapItemUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapItemUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.TileIndex);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ItemId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Serialize(ref writer, value.BagId, options);
            writer.Write(value.Quantity);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StatBuffs, options);
        }

        public global::Intersect.Network.Packets.Server.MapItemUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __TileIndex__ = default(int);
            var __Id__ = default(global::System.Guid);
            var __ItemId__ = default(global::System.Guid);
            var __BagId__ = default(global::System.Guid?);
            var __Quantity__ = default(int);
            var __StatBuffs__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TileIndex__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ItemId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __BagId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 6:
                        __StatBuffs__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapItemUpdatePacket(__MapId__, __TileIndex__, __Id__, __ItemId__, __BagId__, __Quantity__, __StatBuffs__);
            ____result.MapId = __MapId__;
            ____result.TileIndex = __TileIndex__;
            ____result.Id = __Id__;
            ____result.ItemId = __ItemId__;
            ____result.BagId = __BagId__;
            ____result.Quantity = __Quantity__;
            ____result.StatBuffs = __StatBuffs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapListPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapListPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapListPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.MapListData, options);
        }

        public global::Intersect.Network.Packets.Server.MapListPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapListData__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapListData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapListPacket(__MapListData__);
            ____result.MapListData = __MapListData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MapPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MapPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.Deleted);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Data, options);
            writer.Write(value.TileData);
            writer.Write(value.AttributeData);
            writer.Write(value.Revision);
            writer.Write(value.GridX);
            writer.Write(value.GridY);
            formatterResolver.GetFormatterWithVerify<bool[]>().Serialize(ref writer, value.CameraHolds, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntitiesPacket>().Serialize(ref writer, value.MapEntities, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemsPacket>().Serialize(ref writer, value.MapItems, options);
        }

        public global::Intersect.Network.Packets.Server.MapPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapId__ = default(global::System.Guid);
            var __Deleted__ = default(bool);
            var __Data__ = default(string);
            var __TileData__ = default(byte[]);
            var __AttributeData__ = default(byte[]);
            var __Revision__ = default(int);
            var __GridX__ = default(int);
            var __GridY__ = default(int);
            var __CameraHolds__ = default(bool[]);
            var __MapEntities__ = default(global::Intersect.Network.Packets.Server.MapEntitiesPacket);
            var __MapItems__ = default(global::Intersect.Network.Packets.Server.MapItemsPacket);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Deleted__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __Data__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TileData__ = reader.ReadBytes()?.ToArray();
                        break;
                    case 4:
                        __AttributeData__ = reader.ReadBytes()?.ToArray();
                        break;
                    case 5:
                        __Revision__ = reader.ReadInt32();
                        break;
                    case 6:
                        __GridX__ = reader.ReadInt32();
                        break;
                    case 7:
                        __GridY__ = reader.ReadInt32();
                        break;
                    case 8:
                        __CameraHolds__ = formatterResolver.GetFormatterWithVerify<bool[]>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __MapEntities__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapEntitiesPacket>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __MapItems__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.MapItemsPacket>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MapPacket(__MapId__, __Deleted__, __Data__, __TileData__, __AttributeData__, __Revision__, __GridX__, __GridY__, __CameraHolds__);
            ____result.MapId = __MapId__;
            ____result.Deleted = __Deleted__;
            ____result.Data = __Data__;
            ____result.TileData = __TileData__;
            ____result.AttributeData = __AttributeData__;
            ____result.Revision = __Revision__;
            ____result.GridX = __GridX__;
            ____result.GridY = __GridY__;
            ____result.CameraHolds = __CameraHolds__;
            ____result.MapEntities = __MapEntities__;
            ____result.MapItems = __MapItems__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MoveRoutePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.MoveRoutePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.MoveRoutePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Active);
        }

        public global::Intersect.Network.Packets.Server.MoveRoutePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Active__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Active__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.MoveRoutePacket(__Active__);
            ____result.Active = __Active__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NpcAggressionPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.NpcAggressionPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.NpcAggressionPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            writer.Write(value.Aggression);
        }

        public global::Intersect.Network.Packets.Server.NpcAggressionPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __Aggression__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Aggression__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.NpcAggressionPacket(__EntityId__, __Aggression__);
            ____result.EntityId = __EntityId__;
            ____result.Aggression = __Aggression__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NpcEntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.NpcEntityPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.NpcEntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(25);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Z);
            writer.Write(value.Dir);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
            writer.Write(value.HideEntity);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.Animations, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.IsSelf);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.NameColor, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.HeaderLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.FooterLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            writer.Write(value.Aggression);
        }

        public global::Intersect.Network.Packets.Server.NpcEntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Aggression__ = default(int);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Z__ = default(byte);
            var __Dir__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __HideEntity__ = default(bool);
            var __Animations__ = default(global::System.Guid[]);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Stats__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __IsSelf__ = default(bool);
            var __NameColor__ = default(global::Intersect.Color);
            var __HeaderLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __FooterLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 24:
                        __Aggression__ = reader.ReadInt32();
                        break;
                    case 1:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 7:
                        __X__ = reader.ReadByte();
                        break;
                    case 8:
                        __Y__ = reader.ReadByte();
                        break;
                    case 9:
                        __Z__ = reader.ReadByte();
                        break;
                    case 10:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 11:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __HideEntity__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __Animations__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __IsSelf__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __NameColor__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __HeaderLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __FooterLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.NpcEntityPacket();
            ____result.Aggression = __Aggression__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Z = __Z__;
            ____result.Dir = __Dir__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.HideEntity = __HideEntity__;
            ____result.Animations = __Animations__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Stats = __Stats__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.IsSelf = __IsSelf__;
            ____result.NameColor = __NameColor__;
            ____result.HeaderLabel = __HeaderLabel__;
            ____result.FooterLabel = __FooterLabel__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class OpenEditorPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.OpenEditorPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.OpenEditorPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Serialize(ref writer, value.Type, options);
        }

        public global::Intersect.Network.Packets.Server.OpenEditorPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::Intersect.Enums.GameObjectType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.GameObjectType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.OpenEditorPacket(__Type__);
            ____result.Type = __Type__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyInvitePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PartyInvitePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PartyInvitePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LeaderName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.LeaderId, options);
        }

        public global::Intersect.Network.Packets.Server.PartyInvitePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LeaderName__ = default(string);
            var __LeaderId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __LeaderName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __LeaderId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PartyInvitePacket(__LeaderName__, __LeaderId__);
            ____result.LeaderName = __LeaderName__;
            ____result.LeaderId = __LeaderId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyMemberPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PartyMemberPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PartyMemberPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            writer.Write(value.Level);
        }

        public global::Intersect.Network.Packets.Server.PartyMemberPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Level__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Level__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PartyMemberPacket(__Id__, __Name__, __Vital__, __MaxVital__, __Level__);
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Level = __Level__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PartyPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PartyPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket[]>().Serialize(ref writer, value.MemberData, options);
        }

        public global::Intersect.Network.Packets.Server.PartyPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MemberData__ = default(global::Intersect.Network.Packets.Server.PartyMemberPacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MemberData__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PartyPacket(__MemberData__);
            ____result.MemberData = __MemberData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PartyUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PartyUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PartyUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.MemberIndex);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket>().Serialize(ref writer, value.MemberData, options);
        }

        public global::Intersect.Network.Packets.Server.PartyUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MemberIndex__ = default(int);
            var __MemberData__ = default(global::Intersect.Network.Packets.Server.PartyMemberPacket);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MemberIndex__ = reader.ReadInt32();
                        break;
                    case 1:
                        __MemberData__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.PartyMemberPacket>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PartyUpdatePacket(__MemberIndex__, __MemberData__);
            ____result.MemberIndex = __MemberIndex__;
            ____result.MemberData = __MemberData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PasswordResetResultPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PasswordResetResultPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PasswordResetResultPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Succeeded);
        }

        public global::Intersect.Network.Packets.Server.PasswordResetResultPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Succeeded__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Succeeded__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PasswordResetResultPacket(__Succeeded__);
            ____result.Succeeded = __Succeeded__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PingPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PingPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PingPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.Adjusted);
            writer.Write(value.UTC);
            writer.Write(value.Offset);
            writer.Write(value.RequestingReply);
        }

        public global::Intersect.Network.Packets.Server.PingPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __RequestingReply__ = default(bool);
            var __Adjusted__ = default(long);
            var __UTC__ = default(long);
            var __Offset__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __RequestingReply__ = reader.ReadBoolean();
                        break;
                    case 0:
                        __Adjusted__ = reader.ReadInt64();
                        break;
                    case 1:
                        __UTC__ = reader.ReadInt64();
                        break;
                    case 2:
                        __Offset__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PingPacket();
            ____result.RequestingReply = __RequestingReply__;
            ____result.Adjusted = __Adjusted__;
            ____result.UTC = __UTC__;
            ____result.Offset = __Offset__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayAnimationPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PlayAnimationPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PlayAnimationPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.AnimationId, options);
            writer.Write(value.TargetType);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Direction);
        }

        public global::Intersect.Network.Packets.Server.PlayAnimationPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AnimationId__ = default(global::System.Guid);
            var __TargetType__ = default(int);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __X__ = default(int);
            var __Y__ = default(int);
            var __Direction__ = default(sbyte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __AnimationId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TargetType__ = reader.ReadInt32();
                        break;
                    case 2:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __X__ = reader.ReadInt32();
                        break;
                    case 5:
                        __Y__ = reader.ReadInt32();
                        break;
                    case 6:
                        __Direction__ = reader.ReadSByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PlayAnimationPacket(__AnimationId__, __TargetType__, __EntityId__, __MapId__, __X__, __Y__, __Direction__);
            ____result.AnimationId = __AnimationId__;
            ____result.TargetType = __TargetType__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Direction = __Direction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerDeathPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PlayerDeathPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PlayerDeathPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.PlayerId, options);
        }

        public global::Intersect.Network.Packets.Server.PlayerDeathPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PlayerDeathPacket(__PlayerId__);
            ____result.PlayerId = __PlayerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerEntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PlayerEntityPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PlayerEntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(31);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Z);
            writer.Write(value.Dir);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
            writer.Write(value.HideEntity);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.Animations, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.IsSelf);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.NameColor, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.HeaderLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.FooterLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            writer.Write(value.AccessLevel);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.Gender>().Serialize(ref writer, value.Gender, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ClassId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EquipmentPacket>().Serialize(ref writer, value.Equipment, options);
            writer.Write(value.CombatTimeRemaining);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Guild, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket>().Serialize(ref writer, value.CustomSpriteLayers, options);
        }

        public global::Intersect.Network.Packets.Server.PlayerEntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AccessLevel__ = default(int);
            var __Gender__ = default(global::Intersect.Enums.Gender);
            var __ClassId__ = default(global::System.Guid);
            var __Equipment__ = default(global::Intersect.Network.Packets.Server.EquipmentPacket);
            var __CombatTimeRemaining__ = default(long);
            var __Guild__ = default(string);
            var __CustomSpriteLayers__ = default(global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Z__ = default(byte);
            var __Dir__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __HideEntity__ = default(bool);
            var __Animations__ = default(global::System.Guid[]);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Stats__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __IsSelf__ = default(bool);
            var __NameColor__ = default(global::Intersect.Color);
            var __HeaderLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __FooterLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 24:
                        __AccessLevel__ = reader.ReadInt32();
                        break;
                    case 25:
                        __Gender__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.Gender>().Deserialize(ref reader, options);
                        break;
                    case 26:
                        __ClassId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __Equipment__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.EquipmentPacket>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __CombatTimeRemaining__ = reader.ReadInt64();
                        break;
                    case 29:
                        __Guild__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __CustomSpriteLayers__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.CustomSpriteLayersPacket>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 7:
                        __X__ = reader.ReadByte();
                        break;
                    case 8:
                        __Y__ = reader.ReadByte();
                        break;
                    case 9:
                        __Z__ = reader.ReadByte();
                        break;
                    case 10:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 11:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __HideEntity__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __Animations__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __IsSelf__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __NameColor__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __HeaderLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __FooterLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PlayerEntityPacket();
            ____result.AccessLevel = __AccessLevel__;
            ____result.Gender = __Gender__;
            ____result.ClassId = __ClassId__;
            ____result.Equipment = __Equipment__;
            ____result.CombatTimeRemaining = __CombatTimeRemaining__;
            ____result.Guild = __Guild__;
            ____result.CustomSpriteLayers = __CustomSpriteLayers__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Z = __Z__;
            ____result.Dir = __Dir__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.HideEntity = __HideEntity__;
            ____result.Animations = __Animations__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Stats = __Stats__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.IsSelf = __IsSelf__;
            ____result.NameColor = __NameColor__;
            ____result.HeaderLabel = __HeaderLabel__;
            ____result.FooterLabel = __FooterLabel__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayMusicPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PlayMusicPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PlayMusicPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BGM, options);
        }

        public global::Intersect.Network.Packets.Server.PlayMusicPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __BGM__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __BGM__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PlayMusicPacket(__BGM__);
            ____result.BGM = __BGM__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlaySoundPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.PlaySoundPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.PlaySoundPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sound, options);
        }

        public global::Intersect.Network.Packets.Server.PlaySoundPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Sound__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Sound__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.PlaySoundPacket(__Sound__);
            ____result.Sound = __Sound__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ProjectileDeadPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ProjectileDeadPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ProjectileDeadPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ProjectileId, options);
            writer.Write(value.SpawnId);
        }

        public global::Intersect.Network.Packets.Server.ProjectileDeadPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ProjectileId__ = default(global::System.Guid);
            var __SpawnId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ProjectileId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SpawnId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ProjectileDeadPacket(__ProjectileId__, __SpawnId__);
            ____result.ProjectileId = __ProjectileId__;
            ____result.SpawnId = __SpawnId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ProjectileEntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ProjectileEntityPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ProjectileEntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(28);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Z);
            writer.Write(value.Dir);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
            writer.Write(value.HideEntity);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.Animations, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.IsSelf);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.NameColor, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.HeaderLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.FooterLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ProjectileId, options);
            writer.Write(value.ProjectileDirection);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.OwnerId, options);
        }

        public global::Intersect.Network.Packets.Server.ProjectileEntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ProjectileId__ = default(global::System.Guid);
            var __ProjectileDirection__ = default(byte);
            var __TargetId__ = default(global::System.Guid);
            var __OwnerId__ = default(global::System.Guid);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Z__ = default(byte);
            var __Dir__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __HideEntity__ = default(bool);
            var __Animations__ = default(global::System.Guid[]);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Stats__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __IsSelf__ = default(bool);
            var __NameColor__ = default(global::Intersect.Color);
            var __HeaderLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __FooterLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 24:
                        __ProjectileId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __ProjectileDirection__ = reader.ReadByte();
                        break;
                    case 26:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __OwnerId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 7:
                        __X__ = reader.ReadByte();
                        break;
                    case 8:
                        __Y__ = reader.ReadByte();
                        break;
                    case 9:
                        __Z__ = reader.ReadByte();
                        break;
                    case 10:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 11:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __HideEntity__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __Animations__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __IsSelf__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __NameColor__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __HeaderLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __FooterLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ProjectileEntityPacket();
            ____result.ProjectileId = __ProjectileId__;
            ____result.ProjectileDirection = __ProjectileDirection__;
            ____result.TargetId = __TargetId__;
            ____result.OwnerId = __OwnerId__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Z = __Z__;
            ____result.Dir = __Dir__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.HideEntity = __HideEntity__;
            ____result.Animations = __Animations__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Stats = __Stats__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.IsSelf = __IsSelf__;
            ____result.NameColor = __NameColor__;
            ____result.HeaderLabel = __HeaderLabel__;
            ____result.FooterLabel = __FooterLabel__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestOfferPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.QuestOfferPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.QuestOfferPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.QuestId, options);
        }

        public global::Intersect.Network.Packets.Server.QuestOfferPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __QuestId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __QuestId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.QuestOfferPacket(__QuestId__);
            ____result.QuestId = __QuestId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestProgressPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.QuestProgressPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.QuestProgressPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, string>>().Serialize(ref writer, value.Quests, options);
        }

        public global::Intersect.Network.Packets.Server.QuestProgressPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Quests__ = default(global::System.Collections.Generic.Dictionary<global::System.Guid, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Quests__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.QuestProgressPacket(__Quests__);
            ____result.Quests = __Quests__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResourceEntityPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ResourceEntityPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ResourceEntityPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(26);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.MapId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Sprite, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Face, options);
            writer.Write(value.Level);
            writer.Write(value.X);
            writer.Write(value.Y);
            writer.Write(value.Z);
            writer.Write(value.Dir);
            writer.Write(value.Passable);
            writer.Write(value.HideName);
            writer.Write(value.HideEntity);
            formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Serialize(ref writer, value.Animations, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Vital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.MaxVital, options);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Stats, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Serialize(ref writer, value.StatusEffects, options);
            writer.Write(value.IsSelf);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.NameColor, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.HeaderLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Serialize(ref writer, value.FooterLabel, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ResourceId, options);
            writer.Write(value.IsDead);
        }

        public global::Intersect.Network.Packets.Server.ResourceEntityPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ResourceId__ = default(global::System.Guid);
            var __IsDead__ = default(bool);
            var __EntityId__ = default(global::System.Guid);
            var __MapId__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Sprite__ = default(string);
            var __Face__ = default(string);
            var __Level__ = default(int);
            var __X__ = default(byte);
            var __Y__ = default(byte);
            var __Z__ = default(byte);
            var __Dir__ = default(byte);
            var __Passable__ = default(bool);
            var __HideName__ = default(bool);
            var __HideEntity__ = default(bool);
            var __Animations__ = default(global::System.Guid[]);
            var __Vital__ = default(int[]);
            var __MaxVital__ = default(int[]);
            var __Stats__ = default(int[]);
            var __StatusEffects__ = default(global::Intersect.Network.Packets.Server.StatusPacket[]);
            var __IsSelf__ = default(bool);
            var __NameColor__ = default(global::Intersect.Color);
            var __HeaderLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __FooterLabel__ = default(global::Intersect.Network.Packets.Server.LabelPacket);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 24:
                        __ResourceId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __IsDead__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MapId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Sprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Face__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 7:
                        __X__ = reader.ReadByte();
                        break;
                    case 8:
                        __Y__ = reader.ReadByte();
                        break;
                    case 9:
                        __Z__ = reader.ReadByte();
                        break;
                    case 10:
                        __Dir__ = reader.ReadByte();
                        break;
                    case 11:
                        __Passable__ = reader.ReadBoolean();
                        break;
                    case 12:
                        __HideName__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __HideEntity__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __Animations__ = formatterResolver.GetFormatterWithVerify<global::System.Guid[]>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Vital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __MaxVital__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Stats__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.StatusPacket[]>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __IsSelf__ = reader.ReadBoolean();
                        break;
                    case 20:
                        __NameColor__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __HeaderLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __FooterLabel__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.LabelPacket>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ResourceEntityPacket();
            ____result.ResourceId = __ResourceId__;
            ____result.IsDead = __IsDead__;
            ____result.EntityId = __EntityId__;
            ____result.MapId = __MapId__;
            ____result.Name = __Name__;
            ____result.Sprite = __Sprite__;
            ____result.Face = __Face__;
            ____result.Level = __Level__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Z = __Z__;
            ____result.Dir = __Dir__;
            ____result.Passable = __Passable__;
            ____result.HideName = __HideName__;
            ____result.HideEntity = __HideEntity__;
            ____result.Animations = __Animations__;
            ____result.Vital = __Vital__;
            ____result.MaxVital = __MaxVital__;
            ____result.Stats = __Stats__;
            ____result.StatusEffects = __StatusEffects__;
            ____result.IsSelf = __IsSelf__;
            ____result.NameColor = __NameColor__;
            ____result.HeaderLabel = __HeaderLabel__;
            ____result.FooterLabel = __FooterLabel__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShopPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ShopPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ShopPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ShopData, options);
            writer.Write(value.Close);
        }

        public global::Intersect.Network.Packets.Server.ShopPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ShopData__ = default(string);
            var __Close__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ShopData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Close__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ShopPacket(__ShopData__, __Close__);
            ____result.ShopData = __ShopData__;
            ____result.Close = __Close__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShowPicturePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.ShowPicturePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.ShowPicturePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Picture, options);
            writer.Write(value.Size);
            writer.Write(value.Clickable);
        }

        public global::Intersect.Network.Packets.Server.ShowPicturePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Picture__ = default(string);
            var __Size__ = default(int);
            var __Clickable__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Picture__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Size__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Clickable__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.ShowPicturePacket(__Picture__, __Size__, __Clickable__);
            ____result.Picture = __Picture__;
            ____result.Size = __Size__;
            ____result.Clickable = __Clickable__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpellCastPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.SpellCastPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.SpellCastPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.EntityId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.SpellId, options);
        }

        public global::Intersect.Network.Packets.Server.SpellCastPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(global::System.Guid);
            var __SpellId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SpellId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.SpellCastPacket(__EntityId__, __SpellId__);
            ____result.EntityId = __EntityId__;
            ____result.SpellId = __SpellId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpellCooldownPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.SpellCooldownPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.SpellCooldownPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, long>>().Serialize(ref writer, value.SpellCds, options);
        }

        public global::Intersect.Network.Packets.Server.SpellCooldownPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SpellCds__ = default(global::System.Collections.Generic.Dictionary<global::System.Guid, long>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SpellCds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::System.Guid, long>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.SpellCooldownPacket(__SpellCds__);
            ____result.SpellCds = __SpellCds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpellPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.SpellPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.SpellPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.SpellPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.SpellPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpellsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.SpellsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.SpellsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellUpdatePacket[]>().Serialize(ref writer, value.Slots, options);
        }

        public global::Intersect.Network.Packets.Server.SpellsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slots__ = default(global::Intersect.Network.Packets.Server.SpellUpdatePacket[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slots__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Network.Packets.Server.SpellUpdatePacket[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.SpellsPacket(__Slots__);
            ____result.Slots = __Slots__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SpellUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.SpellUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.SpellUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.SpellId, options);
        }

        public global::Intersect.Network.Packets.Server.SpellUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Slot__ = default(int);
            var __SpellId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 1:
                        __SpellId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.SpellUpdatePacket(__Slot__, __SpellId__);
            ____result.Slot = __Slot__;
            ____result.SpellId = __SpellId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatPointsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.StatPointsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.StatPointsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Points);
        }

        public global::Intersect.Network.Packets.Server.StatPointsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Points__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Points__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.StatPointsPacket(__Points__);
            ____result.Points = __Points__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatusPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.StatusPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.StatusPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.SpellId, options);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.StatusTypes>().Serialize(ref writer, value.Type, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TransformSprite, options);
            writer.Write(value.TimeRemaining);
            writer.Write(value.TotalDuration);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.VitalShields, options);
        }

        public global::Intersect.Network.Packets.Server.StatusPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SpellId__ = default(global::System.Guid);
            var __Type__ = default(global::Intersect.Enums.StatusTypes);
            var __TransformSprite__ = default(string);
            var __TimeRemaining__ = default(long);
            var __TotalDuration__ = default(long);
            var __VitalShields__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SpellId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Enums.StatusTypes>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TransformSprite__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TimeRemaining__ = reader.ReadInt64();
                        break;
                    case 4:
                        __TotalDuration__ = reader.ReadInt64();
                        break;
                    case 5:
                        __VitalShields__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.StatusPacket(__SpellId__, __Type__, __TransformSprite__, __TimeRemaining__, __TotalDuration__, __VitalShields__);
            ____result.SpellId = __SpellId__;
            ____result.Type = __Type__;
            ____result.TransformSprite = __TransformSprite__;
            ____result.TimeRemaining = __TimeRemaining__;
            ____result.TotalDuration = __TotalDuration__;
            ____result.VitalShields = __VitalShields__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StopMusicPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.StopMusicPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.StopMusicPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.StopMusicPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.StopMusicPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StopSoundsPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.StopSoundsPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.StopSoundsPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Intersect.Network.Packets.Server.StopSoundsPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.StopSoundsPacket();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TargetOverridePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TargetOverridePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TargetOverridePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TargetId, options);
        }

        public global::Intersect.Network.Packets.Server.TargetOverridePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TargetId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TargetId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TargetOverridePacket(__TargetId__);
            ____result.TargetId = __TargetId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TimeDataPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TimeDataPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TimeDataPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TimeJson, options);
        }

        public global::Intersect.Network.Packets.Server.TimeDataPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TimeJson__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TimeJson__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TimeDataPacket(__TimeJson__);
            ____result.TimeJson = __TimeJson__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TimePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TimePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TimePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.Time, options);
            writer.Write(value.Rate);
            formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Serialize(ref writer, value.Color, options);
        }

        public global::Intersect.Network.Packets.Server.TimePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Time__ = default(global::System.DateTime);
            var __Rate__ = default(float);
            var __Color__ = default(global::Intersect.Color);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Time__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Rate__ = reader.ReadSingle();
                        break;
                    case 2:
                        __Color__ = formatterResolver.GetFormatterWithVerify<global::Intersect.Color>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TimePacket(__Time__, __Rate__, __Color__);
            ____result.Time = __Time__;
            ____result.Rate = __Rate__;
            ____result.Color = __Color__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TradePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TradePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TradePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TradePartner, options);
        }

        public global::Intersect.Network.Packets.Server.TradePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TradePartner__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TradePartner__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TradePacket(__TradePartner__);
            ____result.TradePartner = __TradePartner__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TradeRequestPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TradeRequestPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TradeRequestPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.PartnerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PartnerName, options);
        }

        public global::Intersect.Network.Packets.Server.TradeRequestPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PartnerId__ = default(global::System.Guid);
            var __PartnerName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __PartnerId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PartnerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TradeRequestPacket(__PartnerId__, __PartnerName__);
            ____result.PartnerId = __PartnerId__;
            ____result.PartnerName = __PartnerName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TradeUpdatePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Intersect.Network.Packets.Server.TradeUpdatePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::Intersect.Network.Packets.Server.TradeUpdatePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.WriteNil();
            writer.Write(value.Slot);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.ItemId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Serialize(ref writer, value.BagId, options);
            writer.Write(value.Quantity);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.StatBuffs, options);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.TraderId, options);
        }

        public global::Intersect.Network.Packets.Server.TradeUpdatePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TraderId__ = default(global::System.Guid);
            var __Slot__ = default(int);
            var __ItemId__ = default(global::System.Guid);
            var __BagId__ = default(global::System.Guid?);
            var __Quantity__ = default(int);
            var __StatBuffs__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 6:
                        __TraderId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Slot__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ItemId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __BagId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid?>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Quantity__ = reader.ReadInt32();
                        break;
                    case 5:
                        __StatBuffs__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Intersect.Network.Packets.Server.TradeUpdatePacket();
            ____result.TraderId = __TraderId__;
            ____result.Slot = __Slot__;
            ____result.ItemId = __ItemId__;
            ____result.BagId = __BagId__;
            ____result.Quantity = __Quantity__;
            ____result.StatBuffs = __StatBuffs__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

