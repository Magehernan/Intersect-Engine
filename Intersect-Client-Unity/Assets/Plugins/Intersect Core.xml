<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intersect Core</name>
    </assembly>
    <members>
        <member name="M:Intersect.Collections.SingleOrList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Collections.SingleOrList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Collections.SingleOrList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Collections.SingleOrList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Collections.SingleOrList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Compression.AssetPacker">
            <summary>
            Allows for packaging up assets and extracting them from packaged files.
            </summary>
        </member>
        <member name="P:Intersect.Compression.AssetPacker.PackageLocation">
            <summary>
            The location given at the creation of this object defining where we can find our asset packs.
            </summary>
        </member>
        <member name="P:Intersect.Compression.AssetPacker.CachedPackages">
            <summary>
            A list of all packages currently being cached.
            </summary>
        </member>
        <member name="P:Intersect.Compression.AssetPacker.FileList">
            <summary>
            A list of all files contained within the asset packs.
            </summary>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Intersect.Compression.AssetPacker"/>
            </summary>
            <param name="indexFile">The index file to load assets from.</param>
            <param name="packLocation">The location to load asset packages from.</param>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.GetAsset(System.String)">
            <summary>
            Retrieve an asset from the asset packages.
            </summary>
            <param name="fileName">The asset to retrieve.</param>
            <returns>Returns a <see cref="T:System.IO.MemoryStream"/> containing the requested file.</returns>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.Contains(System.String)">
            <summary>
            Checks whether or not an asset is contained within the loaded index file. This check is case insensitive!
            </summary>
            <param name="fileName">The file to look for.</param>
            <returns>Returns whether or not the file was found in the loaded Asset Packs.</returns>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.UpdateCache">
            <summary>
            Updates our cache timers and disposes of items no longer within the caching time limit.
            </summary>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.findAsset(System.String)">
            <summary>
            Find the location of an item in our asset packs.
            </summary>
            <param name="fileName">The asset file to locate.</param>
            <returns>Returns a <see cref="T:Intersect.Compression.AssetPacker.PackageIndexEntry"/> containing relevant information regarding the asset's location in our asset packages.</returns>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.Dispose">
            <summary>
            Disposes of all cached data in the cache.
            </summary>
        </member>
        <member name="M:Intersect.Compression.AssetPacker.PackageAssets(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Packages up assets according to our settings.
            </summary>
            <param name="inputDir">The directory to search for assets to package up in.</param>
            <param name="inputFilter">The filter to use when searching for assets to pack up.</param>
            <param name="outputDir">The directory to place output assets packs and index files.</param>
            <param name="indexName">The filename for the index file.</param>
            <param name="packPrefix">The file prefix for each asset pack.</param>
            <param name="packExt">The file extension for each asset pack.</param>
            <param name="batchSize">The maximum amount of files to pack up in each asset pack.</param>
        </member>
        <member name="T:Intersect.Compression.GzipCompression">
            <summary>
            Contains several wrapper methods used to generalize code in areas of the engine related to compressing and decompressing files and data.
            </summary>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.CreateProvider">
            <summary>
            Initialize our Cryptographic Provider and make it usable.
            </summary>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.ReadDecompressedString(System.String)">
            <summary>
            Read a decompressed unencrypted string from a specified file.
            </summary>
            <param name="fileName">The file to decompress.</param>
            <returns>Returns the decompressed file's content as a string.</returns>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.CreateDecompressedFileStream(System.String)">
            <summary>
            Read a decompressed unencrypted stream from a specified file.
            </summary>
            <param name="fileName">The file to decompress.</param>
            <returns>Returns a decompressed <see cref="T:System.Security.Cryptography.CryptoStream"/> of the file's content.</returns>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.CreateDecompressedFileStream(System.IO.FileStream)">
            <summary>
            Read decompressed unencrypted data from an existing filestream.
            </summary>
            <param name="stream">The Filestream to write data from.</param>
            <returns>Returns a decompressed <see cref="T:System.Security.Cryptography.CryptoStream"/> of the stream's content.</returns>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.WriteCompressedString(System.String,System.String)">
            <summary>
            Writes the given string to a compressed encrypted file.
            </summary>
            <param name="fileName">The file to write the string to.</param>
            <param name="data">The string to compress and write to the file.</param>
        </member>
        <member name="M:Intersect.Compression.GzipCompression.CreateCompressedFileStream(System.String)">
            <summary>
            Creates a compressed encrypted FileStream to write data to.
            </summary>
            <param name="fileName">The file to write the data to.</param>
            <returns>Returns a <see cref="T:System.Security.Cryptography.CryptoStream"/> to write data to, saving compressed data to a file.</returns>
        </member>
        <member name="T:Intersect.Configuration.IConfigurable`1">
            <summary>
            Base interface for configurable objects
            </summary>
            <typeparam name="TConfiguration">Configuration type</typeparam>
        </member>
        <member name="P:Intersect.Configuration.IConfigurable`1.Configuration">
            <summary>
            The configuration instance for this object
            </summary>
        </member>
        <member name="T:Intersect.Configuration.IConfiguration`1">
            <summary>
            Base interface for configuration structures
            </summary>
            <typeparam name="TConfiguration">Configuration type</typeparam>
        </member>
        <member name="M:Intersect.Configuration.IConfiguration`1.Load(System.String,System.Boolean)">
            <summary>
            Loads configuration into this instance from the specified file.
            </summary>
            <param name="filePath">the file to load from</param>
            <param name="failQuietly">do not throw an exception if an error is encountered, default false</param>
            <returns></returns>
        </member>
        <member name="M:Intersect.Configuration.IConfiguration`1.Save(System.String,System.Boolean)">
            <summary>
            Persists configuration from this instance into the specified file.
            </summary>
            <param name="filePath">the file to save to</param>
            <param name="failQuietly">do not throw an exception if an error is encountered, default false</param>
            <returns></returns>
        </member>
        <member name="T:Intersect.Configuration.ClientConfiguration">
            <inheritdoc />
            <summary>
            Client configuration options
            </summary>
        </member>
        <member name="M:Intersect.Configuration.ClientConfiguration.Load(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Configuration.ClientConfiguration.Save(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.Host">
            <summary>
            Hostname of the server to connect to
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.Port">
            <summary>
            Port of the server to connect to
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.GameFont">
            <summary>
            The font family to use on misc non-ui rendering
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.EntityNameFont">
            <summary>
            The font family to use on entity names
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.ChatBubbleFont">
            <summary>
            The font family to use on chat bubbles
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.ActionMsgFont">
            <summary>
            The font family to use on action messages
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.UIFont">
            <summary>
            The font family to use on unstyled windows such as the debug menu/admin window
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.ChatLines">
            <summary>
            Number of lines to save for chat scrollback
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.MenuMusic">
            <summary>
            Menu music file name
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.MenuBackground">
            <summary>
            Menu background art
            </summary>
        </member>
        <member name="P:Intersect.Configuration.ClientConfiguration.MouseCursor">
            <summary>
            Sets a custom mouse cursor.
            </summary>
        </member>
        <member name="F:Intersect.Config.ChatOptions.ShowAnnouncementBanners">
            <summary>
            Is the client allowed to show in-game banners for announcements made?
            </summary>
        </member>
        <member name="F:Intersect.Config.ChatOptions.AnnouncementDisplayDuration">
            <summary>
            The time (in milliseconds) the announcement banners should display, if enabled.
            </summary>
        </member>
        <member name="F:Intersect.Config.ChatOptions.LogChatMessagesToDatabase">
            <summary>
            Whether or not chat messages should be logged to the database.
            </summary>
        </member>
        <member name="T:Intersect.Config.Guilds.GuildOptions">
            <summary>
            Contains all options pertaining to guilds
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.MinimumGuildNameSize">
            <summary>
            Denotes the minimum amount of characters a guild name must contain before being accepted.
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.MaximumGuildNameSize">
            <summary>
            Denotes the maximum amount of characters a guild name can contain before being rejected.
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.AllowGuildMemberPvp">
            <summary>
            Configures whether or not to allow guild members to attack eachother.
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.ShowGuildNameTagsOverMembers">
            <summary>
            Configured whether the guild name should be rendered above player sprites as a tag
            </summary>
        </member>
        <member name="F:Intersect.Config.Guilds.GuildOptions.GuildUpdateInterval">
            <summary>
            How often to send guild updates to members, these updates are alongside updates whenever people log in or out
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.DeleteStaleGuildsAfterDays">
            <summary>
            If set to a value > 0 then upon server boot any guilds with only 1 member that hasn't played in this number of days will be deleted
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.GuildBankSlots">
            <summary>
            Default number of storage slots in guild banks
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildOptions.Ranks">
            <summary>
            Array of guild ranks that are available in this game
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.Invite">
            <summary>
            Defines whether or not this guild member can invite new members
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.Kick">
            <summary>
            Defines whether or not this guild member can kick members (under their rank of course)
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.Promote">
            <summary>
            Defines whether or not this guild member can promote other guilds members to ranks below this one
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.Demote">
            <summary>
            Defined whether or not this guild member can demote other members who are below this rank
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.BankRetrieve">
            <summary>
            Determines whether or not guild members of this rank can withdraw items from the guild bank
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.BankDeposit">
            <summary>
            Determines whether or not guild members of this rank can deposit items into the guild bank
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildPermissions.BankMove">
            <summary>
            Determines whether or not guild members of this rank can move items around within the guild bank
            </summary>
        </member>
        <member name="T:Intersect.Config.Guilds.GuildRank">
            <summary>
            Name and options for individual guild ranks
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildRank.Title">
            <summary>
            Name of this rank
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildRank.Limit">
            <summary>
            Maximum number of guild members with this title
            </summary>
        </member>
        <member name="P:Intersect.Config.Guilds.GuildRank.Permissions">
            <summary>
            Permissions that this rank holds for the guild and the actions they can take
            </summary>
        </member>
        <member name="T:Intersect.Config.LootOptions">
            <summary>
            Contains configurable options pertaining to the way loot (item) drops are handled by the engine.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.ItemDespawnTime">
            <summary>
            Defines how long (in ms) loot will be available for picking up on the map.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.ItemOwnershipTime">
            <summary>
            Defines how long (in ms) an item drop will be ''owned'' by a player and their party.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.ShowUnownedItems">
            <summary>
            Defines whether players can see items they do not ''own'' on the map.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.ConsolidateMapDrops">
            <summary>
            Defines whether or not spawning items on the map from anything but the map attribute should consolidate it into one item.
            When false, will drop multiple items with a quantity of 1, rather than a single item with a higher quantity for non-stackable items.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.EnableLootWindow">
            <summary>
            Configures whether the loot window feature of the client is allowed to be active.
            Note, there's no such setting on the client.. So enabling it here enables it there.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.MaximumLootWindowItems">
            <summary>
            Configures the maximum amount of items to be displayed on the client's Loot Window.
            </summary>
        </member>
        <member name="F:Intersect.Config.LootOptions.MaximumLootWindowDistance">
            <summary>
            Configures the maximum amount of tiles around you to search for loot with the Loot Window.
            </summary>
        </member>
        <member name="P:Intersect.Config.LootOptions.IndividualizedLootAutoIncludePartyMembers">
            <summary>
            When killing an npc which spawns individualized loot for all of it's attackers, include loot for all their party members, even if they didn't participate (deal damage) to the npc
            </summary>
        </member>
        <member name="T:Intersect.Config.MetricsOptions">
            <summary>
            Contains configurable options pertaining to stat/metrics collecting
            </summary>
        </member>
        <member name="P:Intersect.Config.MetricsOptions.Enable">
            <summary>
            Track game performance metrics
            </summary>
        </member>
        <member name="T:Intersect.Config.NpcOptions">
            <summary>
            Contains configurable options pertaining to the way Npcs are handled by the engine.
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.AllowResetRadius">
            <summary>
            Configures whether or not Npcs are allowed to reset after moving out of a specified radius when starting to fight another entity.
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.ResetRadius">
            <summary>
            Configures the radius in which an NPC is allowed to move after starting to fight another entity.
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.AllowNewResetLocationBeforeFinish">
            <summary>
            Configures whether or not the NPC is allowed to gain a new reset center point while it is still busy moving to its original reset point.
            NOTE: Can be used to allow the NPCs to be dragged far far away, as it constantly resets the center of its radius!!!
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.ResetVitalsAndStatusses">
            <summary>
            Configures whether or not the NPC should completely restore its vitals and statusses once it starts resetting.
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.ContinuouslyResetVitalsAndStatuses">
            <summary>
            Configures whether or not the NPCs health should continue to reset to full and clear statuses while working its way to the reset location
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.AllowEngagingWhileResetting">
            <summary>
            If true, a NPC can be attacked while they are resetting. Their new attacker will become a target if they are within the reset radius
            </summary>
        </member>
        <member name="F:Intersect.Config.NpcOptions.ShowLevelByName">
            <summary>
            Configures whether or not the level of an Npc is shown next to their name.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketOptions.BatchPlayerMovementPackets">
            <summary>
            If this value is true, player movements will be sent in the batch with npc/event movement when maps update instead of in realtime which will reduce workload on the network pool at the expense of being slightly delayed
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketOptions.BatchActionMessagePackets">
            <summary>
            If this value is true, action messages will be sent in a batch maps update instead of in realtime which will reduce workload on the network pool at the expense of being slightly delayed 
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketOptions.BatchAnimationPackets">
            <summary>
            If this value is true, animation packetswill be sent in a batch maps update instead of in realtime which will reduce workload on the network pool at the expense of being slightly delayed 
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.MinimumPing">
            <summary>
            Assumed minimum ping a client will have when communicating with the server.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.ErrorMarginFactor">
            <summary>
            This factor is multiplied by the client ping in order to determine the acceptable error margin in packet timing.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.NaturalLowerMargin">
            <summary>
            Lower bounds of adjusted packet times with pings taken into account for packets to be considered natural.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.NaturalUpperMargin">
            <summary>
            Upper bounds of adjusted packet times with pings taken into account for packets to be considered natural.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.AllowedSpikePackets">
            <summary>
            Number of consecutive unnatural packets that are accepted in short intervals before being dropped. 
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.BaseDesyncForegiveness">
            <summary>
            The base amount of time in ms that we will forgive the client for being desyned
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.DesyncForgivenessFactor">
            <summary>
            A factor in whch we will allow the client time to shift from the servers before dropping packets with configured error margins taken into account.
            </summary>
        </member>
        <member name="P:Intersect.Config.PacketSecurityOptions.DesyncForgivenessInterval">
            <summary>
            A value measured in milliseconds in which a packet that is out of sync will be forgiven (no matter how out of sync) and timing will sent to the client.
            </summary>
        </member>
        <member name="F:Intersect.Config.PacketSecurityOptions.EditorThreshholds">
            <summary>
            Packet flooding detection thresholds for the game editor. (No Restrictions.)
            </summary>
        </member>
        <member name="F:Intersect.Config.PacketSecurityOptions.PlayerThreshholds">
            <summary>
            Packet flooding detection thresholds for general players. Pretty strict. 
            Might need to be adjusted if there is a lot of high paceed actions/movement/combat in your game.
            </summary>
        </member>
        <member name="F:Intersect.Config.PacketSecurityOptions.ModAdminThreshholds">
            <summary>
            Packet flooding detection thresholds for mods/admins. Hopefully you trust these guys.
            Limits need to be higher than general players since they can warp quickly around the world with shift click.
            </summary>
        </member>
        <member name="F:Intersect.Config.PacketSecurityOptions.Threshholds">
            <summary>
            Packet flooding detection threshholds for all users who are not yet logged in.
            </summary>
        </member>
        <member name="P:Intersect.Config.FloodThreshholds.MaxPacketSize">
            <summary>
            The largest a single packet should be before it's considered flooding.
            </summary>
        </member>
        <member name="P:Intersect.Config.FloodThreshholds.MaxPacketPerSec">
            <summary>
            The maximum number of packets we should receive from a cient before we consider them to be flooding.
            </summary>
        </member>
        <member name="P:Intersect.Config.FloodThreshholds.KickAvgPacketPerSec">
            <summary>
            The number of packets received per second on average that we will accept before kicking the client for flooding.
            </summary>
        </member>
        <member name="F:Intersect.Config.PartyOptions.MaximumMembers">
            <summary>
            Defines the maximum amount of members a party can have.
            </summary>
        </member>
        <member name="T:Intersect.Config.ProcessingOptions">
            <summary>
            Thread count and timing options for game processing.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.CpsLock">
            <summary>
            Determined whether or not the server logic thread sleeps after each sloop by default
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MinLogicThreads">
            <summary>
            Minimum of threads that will be created process map logic, npc/event updates, hots/dots/status effects, projectiles and more.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MaxLogicThreads">
            <summary>
            Maximum number threads that will be created to handle map logic, npc/event updates, hots/dots/status effects, projectiles while the server is under load.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.LogicThreadIdleTimeout">
            <summary>
            This is how long (in ms) a logic thread in our logic pool should be idle before it is considered unneeded and therefore disposed.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MinNetworkThreads">
            <summary>
            Minimum number of threads that will be used for packet processing which we don't want to slow down our game loop.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MaxNetworkThreads">
            <summary>
            Maximum number of threads that will be used for packet processing which we don't want to slow down our game loop.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.NetworkThreadIdleTimeout">
            <summary>
            This is how long (in ms) a network thread in our network pool should be idle before it is considered unneeded and therefore disposed.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MinDatabaseThreads">
            <summary>
            Minimum number of threads that will be used for database interactions like player or variable saving
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MaxDatabaseThreads">
            <summary>
            Maximum number of threads that will be used for database interactions like player or variable saving
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.DatabaseThreadIdleTimeout">
            <summary>
            This is how long (in ms) a database thread should be idle before it is considered unneeded and therefore disposed.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.DatabaseSaveServerVariablesInterval">
            <summary>
            How often should the server save changes to server variable values?
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MinSystemThreadpoolWorkerThreads">
            <summary>
            Minimum number of worker threads that will be used in the system managed threadpool (-1 for default)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MaxSystemThreadpoolWorkerThreads">
            <summary>
            Maximum number of worker threads that will be used in the system managed threadpool (-1 for default)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MinSystemThreadpoolIOThreads">
            <summary>
            Minimum number of worker threads that will be used for io the system managed threadpool (-1 for default)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MaxSystemThreadpoolIOThreads">
            <summary>
            Maximum number of worker threads that will be used for io the system managed threadpool (-1 for default)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.MapUpdateInterval">
            <summary>
            This controls how often maps/npcs should be updated in ms.
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.ProjectileUpdateInterval">
            <summary>
            This controls how often projectiles should updated in ms. (It is recommended to keep this the same value as the MapUpdateInterval so they are all updated at the same time)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.PlayerSaveInterval">
            <summary>
            How long to delay between player saves (default 2 min)
            </summary>
        </member>
        <member name="P:Intersect.Config.ProcessingOptions.CommonEventAutorunStartInterval">
            <summary>
            How often should the server try to execute autorun common events for a player? This can get expensive if you have a lot of autorun common events with lots of complex conditions.
            </summary>
        </member>
        <member name="T:Intersect.Config.QuestOptions">
            <summary>
            Contains configurable options pertaining quests and the layout of the quest log
            </summary>
        </member>
        <member name="P:Intersect.Config.QuestOptions.Categories">
            <summary>
            Quest categories in which to separate quests into on the quest log
            </summary>
        </member>
        <member name="T:Intersect.Config.SpriteOptions">
            <summary>
            Contains configurable options pertaining to the way sprites are rendered within the engine
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.IdleFrames">
            <summary>
            Defines the number of frames there will be in idling sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.NormalFrames">
            <summary>
            Defines the number of frames there will be in normal (walking) sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.CastFrames">
            <summary>
            Defines the number of frames there will be in casting sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.AttackFrames">
            <summary>
            Defines the number of frames there will be in attacking sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.ShootFrames">
            <summary>
            Defines the number of frames there will be in shooting sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.WeaponFrames">
            <summary>
            Defines the number of frames there will be in weapon attacking sprite sheets
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.NormalSheetAttackFrame">
            <summary>
            The frame on the normal sprite sheet to show when attacking when there is no designated sheet for attack.
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.NormalSheetDashFrame">
            <summary>
            The frame on the normal sprite sheet to show when dashing or sliding.
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.MovingFrameDuration">
            <summary>
            Defines how long (in ms) between walking frames
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.IdleFrameDuration">
            <summary>
            Defines how long (in ms) between idling frames
            </summary>
        </member>
        <member name="F:Intersect.Config.SpriteOptions.TimeBeforeIdle">
            <summary>
            Defines how long (in ms) a player must idle before the idling sprite starts to render
            </summary>
        </member>
        <member name="P:Intersect.Config.SpriteOptions.Directions">
            <summary>
            Defines the number of rows in sprite sheets which will correlate to the number of directions in the game (Intersect is programmed by default with only 4 directions)
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.MovementCancelsCast">
            <summary>
            If enabled this allows spell casts to stop/be canceled if the player tries to move around (WASD)
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.MatchGroupCooldowns">
            <summary>
            Configures whether cooldowns within cooldown groups should match.
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.MatchGroupCooldownHighest">
            <summary>
            Only used when <seealso cref="F:Intersect.Config.CombatOptions.MatchGroupCooldowns"/> is enabled!
            Configures whether cooldowns are being matched to the highest cooldown within a cooldown group when true, or are matched to the current item or spell being used when false.
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.LinkSpellAndItemCooldowns">
            <summary>
            Only used when <seealso cref="F:Intersect.Config.CombatOptions.MatchGroupCooldowns"/> is enabled!
            Configures whether cooldown groups between items and spells are shared.
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.EnableGlobalCooldowns">
            <summary>
            Configures whether or not using a spell or item should trigger a global cooldown.
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.GlobalCooldownDuration">
            <summary>
            Configures the duration (in milliseconds) which the global cooldown lasts after each ability.
            Only used when <seealso cref="F:Intersect.Config.CombatOptions.EnableGlobalCooldowns"/> is enabled!
            </summary>
        </member>
        <member name="F:Intersect.Config.CombatOptions.MaxPlayerAutoTargetRadius">
            <summary>
            Configures the maximum distance a target is allowed to be from the player when auto targetting.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.ItemDropChance">
            <summary>
            A percentage between 0 and 100 which determines the chance in which they will lose any given item in their inventory when killed.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxBank">
            <summary>
            Number of bank slots a player has.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxCharacters">
            <summary>
            Number of characters an account may create.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxInventory">
            <summary>
            Number of inventory slots a player has.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxLevel">
            <summary>
            Max level a player can achieve.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxSpells">
            <summary>
            Number of spell slots a player has.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.MaxStat">
            <summary>
            The highest value a single stat can be for a player.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.RequestTimeout">
            <summary>
            How long a player must wait before sending a trade/party/friend request after the first as been denied.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.TradeRange">
            <summary>
            Distance (in tiles) between players in which a trade offer can be sent and accepted.
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.AllowCombatMovement">
            <summary>
            Unlinks the timers for combat and movement to facilitate complex combat (e.g. kiting)
            </summary>
        </member>
        <member name="F:Intersect.Config.PlayerOptions.ShowLevelByName">
            <summary>
            Configures whether or not the level of a player is shown next to their name.
            </summary>
        </member>
        <member name="T:Intersect.Core.ApplicationContext`2">
            <summary>
            Partial implementation of <see cref="T:Intersect.Core.IApplicationContext"/>.
            Implementation of additional members in <see cref="T:Intersect.Core.IApplicationContext`1"/>.
            </summary>
            <typeparam name="TContext">the context subtype</typeparam>
            <typeparam name="TStartupOptions">the specialized startup options type</typeparam>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.#ctor(`1,Intersect.Logging.Logger,Intersect.Plugins.Interfaces.INetworkHelper)">
            <summary>
            Initializes general pieces of the <see cref="T:Intersect.Core.ApplicationContext`2"/>.
            </summary>
            <param name="startupOptions">the <typeparamref name="TStartupOptions"/> the application was started with</param>
            <param name="logger">the application-level <see cref="P:Intersect.Core.ApplicationContext`2.Logger"/></param>
            <param name="networkHelper"></param>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.StartupOptions">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.Logger">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.NetworkHelper">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.UsesMainThread">
            <summary>
            If this is overridden to true, <see cref="M:Intersect.Core.ApplicationContext`2.PostStartup" /> must be manually invoked from within <see cref="M:Intersect.Core.ApplicationContext`2.InternalStart" />.
            </summary>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.IsDisposing">
            <summary>
            If the application is currently disposing.
            </summary>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.IsShutdownRequested">
            <summary>
            If the application shutdown has been requested.
            </summary>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.IsStarted">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.Services">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.GetService``1">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.GetExpectedService``1">
            <summary>
            Gets an <see cref="T:Intersect.Core.IApplicationService"/> that is expected to have been registered.
            </summary>
            <typeparam name="TApplicationService">the service type</typeparam>
            <returns>the expected <typeparamref name="TApplicationService"/> instance</returns>
            <exception cref="T:System.AccessViolationException">if there is no registered <typeparamref name="TApplicationService"/></exception>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.GetAssemblies">
            <summary>
            Gets all of the interesting assemblies (e.g. core and application).
            </summary>
            <returns>interesting assemblies</returns>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.DiscoverServices">
            <summary>
            Discovers, creates, and registers services.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.BootstrapServices">
            <summary>
            Run the bootstrap lifecycle method on all enabled services.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.StartServices">
            <summary>
            Run the startup lifecycle method on all enabled services.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.StopServices(System.Boolean)">
            <summary>
            Run the shutdown lifecycle method on all enabled services.
            </summary>
            <param name="force">if the service should be forced to stop no matter its status</param>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.Start(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.StartWithActionQueue">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.InternalStart">
            <summary>
            Handles startup for functionality specific to an individual application.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.RequestShutdown(System.Boolean)">
            <summary>
            Request shutdown of the application.
            </summary>
            <param name="join">optionally join the current thread, default false</param>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.AttachHandlers">
            <summary>
            Attach handlers for the <see cref="T:System.AppDomain"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/> that are of interest.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.DetachHandlers">
            <summary>
            Detach handlers for the <see cref="T:System.AppDomain"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/> that are of interest.
            </summary>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.HasErrors">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.NotifyNonTerminatingExceptionOccurred">
            <summary>
            Notify the context that a non-terminating exception occurred that it should handle.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.HandleUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handle unhandled exception events.
            </summary>
            <param name="sender">the exception sender</param>
            <param name="unhandledExceptionEvent">the event arguments</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="P:System.UnhandledExceptionEventArgs.ExceptionObject"/> isn't actually an <see cref="T:System.Exception"/></exception>
        </member>
        <member name="P:Intersect.Core.ApplicationContext`2.Instance">
            <summary>
            TODO: Finish refactoring code so this is no longer necessary.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationContext`2.Dispose(System.Boolean)">
            <summary>
            Dispose of internal resources.
            </summary>
            <param name="disposing">if we are actively disposing</param>
        </member>
        <member name="T:Intersect.Core.ApplicationService`2">
            <summary>
            Partially implements <see cref="T:Intersect.Core.IApplicationService"/>.
            </summary>
            <typeparam name="TServiceInterface">the service interface type</typeparam>
            <typeparam name="TServiceImplementation">the service implementation type</typeparam>
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.#ctor">
            <summary>
            Initializes <see cref="T:Intersect.Core.ApplicationService`2"/>.
            </summary>
        </member>
        <member name="P:Intersect.Core.ApplicationService`2.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationService`2.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationService`2.Name">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ApplicationService`2.ServiceType">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.Bootstrap(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.Dispose(System.Boolean)">
            <summary>
            Internal subclass Dispose() implementation method.
            </summary>
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.Start(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.Stop(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.TaskStart(Intersect.Core.IApplicationContext)">
            <summary>
            Internal startup handler declaration.
            </summary>
            <param name="applicationContext">the application context the service is being started in</param>
        </member>
        <member name="M:Intersect.Core.ApplicationService`2.TaskStop(Intersect.Core.IApplicationContext)">
            <summary>
            Internal shutdown handler declaration.
            </summary>
            <param name="applicationContext">the application context the service is being shutdown in</param>
        </member>
        <member name="T:Intersect.Core.ApplicationService`3">
            <summary>
            Partially implements <see cref="T:Intersect.Core.IApplicationService"/>.
            </summary>
            <typeparam name="TApplicationContext">the application context type</typeparam>
            <typeparam name="TServiceInterface">the service interface type</typeparam>
            <typeparam name="TServiceImplementation">the service implementation type</typeparam>
        </member>
        <member name="M:Intersect.Core.ApplicationService`3.TaskStart(Intersect.Core.IApplicationContext)">
            <exception cref="T:System.ArgumentNullException">throws an exception if <paramref name="applicationContext"/> is not an instance of <typeparamref name="TApplicationContext"/></exception>
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`3.TaskStop(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ApplicationService`3.TaskStart(`0)">
            <summary>
            Specialized internal startup handler declaration.
            </summary>
            <param name="applicationContext">the application context the service is being started in</param>
        </member>
        <member name="M:Intersect.Core.ApplicationService`3.TaskStop(`0)">
            <summary>
            Specialized internal shutdown handler declaration.
            </summary>
            <param name="applicationContext">the application context the service is being shutdown in</param>
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlag.Equals(Intersect.Core.ExperimentalFeatures.IExperimentalFlag)">
            <inheritdoc cref="T:System.IEquatable`1" />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlag.op_Implicit(Intersect.Core.ExperimentalFeatures.ExperimentalFlag)~System.Boolean">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:Intersect.Core.ExperimentalFeatures.ExperimentalFlagAlias.Guid">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Core.ExperimentalFeatures.ExperimentalFlagAlias.Enabled">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlagAlias.Equals(Intersect.Core.ExperimentalFeatures.IExperimentalFlag)">
            <inheritdoc cref="T:System.IEquatable`1" />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlagAlias.With(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlagConverter.WriteJson(Newtonsoft.Json.JsonWriter,Intersect.Core.ExperimentalFeatures.ExperimentalFlag,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.ExperimentalFlagConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Intersect.Core.ExperimentalFeatures.ExperimentalFlag,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Core.ExperimentalFeatures.IExperimentalFlag.With(System.Boolean)">
            <summary>
            Creates a clone of this <see cref="T:Intersect.Core.ExperimentalFeatures.IExperimentalFlag"/> with the given enablement.
            </summary>
            <param name="enabled">the new enablement state</param>
            <returns>a clone of this flag with the new enablement state</returns>
        </member>
        <member name="T:Intersect.Core.IApplicationContext">
            <summary>
            Declares the API surface for applications.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.HasErrors">
            <summary>
            If the application has encountered unhandled/unobserved exceptions during its lifespan.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.IsDisposed">
            <summary>
            If the application has been disposed.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.IsStarted">
            <summary>
            If the application has been started.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.IsRunning">
            <summary>
            If the application is running.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.StartupOptions">
            <summary>
            The options the application was started with.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.Logger">
            <summary>
            The application-specific logger.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.NetworkHelper">
            <summary>
            The network helper for the application.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationContext.Services">
            <summary>
            The <see cref="T:Intersect.Core.IApplicationService"/>s currently registered.
            </summary>
        </member>
        <member name="M:Intersect.Core.IApplicationContext.GetService``1">
            <summary>
            Gets a service of type <typeparamref name="TApplicationService"/> if one has been registered.
            </summary>
            <typeparam name="TApplicationService">the service type to look for</typeparam>
            <returns>an instance of <typeparamref name="TApplicationService"/> if found, otherwise <c>default(<typeparamref name="TApplicationService"/>)</c></returns>
        </member>
        <member name="M:Intersect.Core.IApplicationContext.Start(System.Boolean)">
            <summary>
            Start the application, optionally locking the current thread until shutdown (default true).
            </summary>
            <param name="lockUntilShutdown">if the current thread should be locked until shutdown</param>
        </member>
        <member name="M:Intersect.Core.IApplicationContext.StartWithActionQueue">
            <summary>
            Start the application with a <see cref="T:Intersect.Threading.LockingActionQueue"/>.
            </summary>
            <returns>the <see cref="T:Intersect.Threading.LockingActionQueue"/> instance being used</returns>
        </member>
        <member name="T:Intersect.Core.IApplicationContext`1">
            <summary>
            Declares the API surface for applications with specialized startup options types.
            </summary>
            <typeparam name="TStartupOptions">specialized startup options type</typeparam>
        </member>
        <member name="P:Intersect.Core.IApplicationContext`1.StartupOptions">
            <summary>
            The specialized options the application was started with.
            </summary>
        </member>
        <member name="T:Intersect.Core.IApplicationService">
            <summary>
            Declares the API surface for application services.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationService.ServiceType">
            <summary>
            The actual type of the service, should be an interface type.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationService.Name">
            <summary>
            The name of the service, should be the name of the implementation type.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationService.IsEnabled">
            <summary>
            If the service is currently enabled.
            </summary>
        </member>
        <member name="P:Intersect.Core.IApplicationService.IsRunning">
            <summary>
            If the service is currently running.
            </summary>
        </member>
        <member name="M:Intersect.Core.IApplicationService.Bootstrap(Intersect.Core.IApplicationContext)">
            <summary>
            Bootstrapping lifecycle method for application services.
            </summary>
            <param name="applicationContext">the current application context</param>
            <returns>if bootstrapping was successful</returns>
        </member>
        <member name="M:Intersect.Core.IApplicationService.Start(Intersect.Core.IApplicationContext)">
            <summary>
            Startup lifecycle method for application services.
            </summary>
            <param name="applicationContext">the current application context</param>
            <returns>if startup was successful</returns>
        </member>
        <member name="M:Intersect.Core.IApplicationService.Stop(Intersect.Core.IApplicationContext)">
            <summary>
            Shutdown lifecycle method for application services.
            </summary>
            <param name="applicationContext">the current application context</param>
            <returns>if shutdown was successful</returns>
        </member>
        <member name="T:Intersect.Core.ICommandLineOptions">
            <summary>
            Declares the common basic command line options for all applications.
            </summary>
        </member>
        <member name="P:Intersect.Core.ICommandLineOptions.WorkingDirectory">
            <summary>
            The override working directory.
            </summary>
        </member>
        <member name="P:Intersect.Core.ICommandLineOptions.PluginDirectories">
            <summary>
            Additional plugin directories besides <c>/working/directory/plugins</c>.
            </summary>
        </member>
        <member name="T:Intersect.Core.IThreadableApplicationService">
            <summary>
            Declares the API surface for application services that have their own thread.
            </summary>
        </member>
        <member name="P:Intersect.Core.IThreadableApplicationService.Thread">
            <summary>
            The thread for this service.
            </summary>
        </member>
        <member name="T:Intersect.Core.ServiceLifecycleStage">
            <summary>
            Enumeration of the different lifecycle stages for services.
            </summary>
        </member>
        <member name="F:Intersect.Core.ServiceLifecycleStage.Bootstrap">
            <summary>
            The stage that runs after basic initialization of the application.
            </summary>
        </member>
        <member name="F:Intersect.Core.ServiceLifecycleStage.Startup">
            <summary>
            The application initialization stage.
            </summary>
        </member>
        <member name="F:Intersect.Core.ServiceLifecycleStage.Shutdown">
            <summary>
            The application finalization stage.
            </summary>
        </member>
        <member name="F:Intersect.Core.ServiceLifecycleStage.Unknown">
            <summary>
            If the lifecycle stage is unknown.
            </summary>
        </member>
        <member name="T:Intersect.Core.ServiceLifecycleFailureException">
            <summary>
            Represents the container exception that occurs when services fail during a lifecycle method.
            </summary>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.#ctor(Intersect.Core.ServiceLifecycleStage,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Core.ServiceLifecycleFailureException"/> with a stage, name and inner exception.
            </summary>
            <param name="serviceLifecycleStage">the stage in which the service failed</param>
            <param name="serviceName">the name of the service throwing the exception</param>
            <param name="innerException">the cause of the failure</param>
        </member>
        <member name="P:Intersect.Core.ServiceLifecycleFailureException.ServiceLifecycleStage">
            <summary>
            The stage in which the service failed.
            </summary>
        </member>
        <member name="P:Intersect.Core.ServiceLifecycleFailureException.ServiceName">
            <summary>
            The name of the service throwing the exception.
            </summary>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Core.ServiceLifecycleFailureException"/>.
            </summary>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Core.ServiceLifecycleFailureException"/> with a descriptive message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Core.ServiceLifecycleFailureException"/> with a descriptive message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. For this type of exception this should not be used.</param>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Core.ServiceLifecycleFailureException"/> with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Intersect.Core.ServiceLifecycleFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Console.InputEncoding">
            <summary>Gets or sets the encoding the console uses to read input. </summary>
            <returns>The encoding used to read console input.</returns>
            <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
            <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
            <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        </member>
        <member name="P:Intersect.Console.OutputEncoding">
            <summary>Gets or sets the encoding the console uses to write output. </summary>
            <returns>The encoding used to write console output.</returns>
            <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
            <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
            <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        </member>
        <member name="M:Intersect.Console.Beep">
            <summary>Plays the sound of a beep through the console speaker.</summary>
            <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</exception>
        </member>
        <member name="M:Intersect.Console.Beep(System.Int32,System.Int32)">
            <summary>Plays the sound of a beep of a specified frequency and duration through the console speaker.</summary>
            <param name="frequency">The frequency of the beep, ranging from 37 to 32767 hertz.</param>
            <param name="duration">The duration of the beep measured in milliseconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="frequency" /> is less than 37 or more than 32767 hertz.-or-
            <paramref name="duration" /> is less than or equal to zero.</exception>
            <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to the console.</exception>
        </member>
        <member name="P:Intersect.Console.KeyAvailable">
            <summary>Gets a value indicating whether a key press is available in the input stream.</summary>
            <returns>
            <see langword="true" /> if a key press is available; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
            <exception cref="T:System.InvalidOperationException">Standard input is redirected to a file instead of the keyboard. </exception>
        </member>
        <member name="P:Intersect.Console.NumberLock">
            <summary>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</summary>
            <returns>
            <see langword="true" /> if NUM LOCK is turned on; <see langword="false" /> if NUM LOCK is turned off.</returns>
        </member>
        <member name="P:Intersect.Console.CapsLock">
            <summary>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</summary>
            <returns>
            <see langword="true" /> if CAPS LOCK is turned on; <see langword="false" /> if CAPS LOCK is turned off.</returns>
        </member>
        <member name="P:Intersect.Console.TreatControlCAsInput">
            <summary>Gets or sets a value indicating whether the combination of the <see cref="F:System.ConsoleModifiers.Control" /> modifier key and <see cref="F:System.ConsoleKey.C" /> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</summary>
            <returns>
            <see langword="true" /> if Ctrl+C is treated as ordinary input; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.IO.IOException">Unable to get or set the input mode of the console input buffer. </exception>
        </member>
        <member name="E:Intersect.Console.CancelKeyPress">
            <summary>Occurs when the <see cref="F:System.ConsoleModifiers.Control" /> modifier key (Ctrl) and either the <see cref="F:System.ConsoleKey.C" /> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</summary>
        </member>
        <member name="M:Intersect.Console.Read">
            <summary>Reads the next character from the standard input stream.</summary>
            <returns>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.ReadLine">
            <summary>Reads the next line of characters from the standard input stream.</summary>
            <returns>The next line of characters from the input stream, or <see langword="null" /> if no more lines are available.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line of characters is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Intersect.Console.WriteLine">
            <summary>Writes the current line terminator to the standard output stream.</summary>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.String,System.Object[])">
            <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg">An array of objects to write using <paramref name="format" />. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />. </exception>
            <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Char[])">
            <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
            <param name="buffer">A Unicode character array. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
            <param name="buffer">An array of Unicode characters. </param>
            <param name="index">The starting position in <paramref name="buffer" />. </param>
            <param name="count">The number of characters to write. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Boolean)">
            <summary>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Char)">
            <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Decimal)">
            <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Double)">
            <summary>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Single)">
            <summary>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Int32)">
            <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.UInt32)">
            <summary>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Int64)">
            <summary>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.UInt64)">
            <summary>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.Object)">
            <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.WriteLine(System.String)">
            <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.String,System.Object[])">
            <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg">An array of objects to write using <paramref name="format" />. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />. </exception>
            <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Char[])">
            <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
            <param name="buffer">A Unicode character array. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Char[],System.Int32,System.Int32)">
            <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
            <param name="buffer">An array of Unicode characters. </param>
            <param name="index">The starting position in <paramref name="buffer" />. </param>
            <param name="count">The number of characters to write. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Boolean)">
            <summary>Writes the text representation of the specified Boolean value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Char)">
            <summary>Writes the specified Unicode character value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Double)">
            <summary>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Decimal)">
            <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Single)">
            <summary>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Int32)">
            <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.UInt32)">
            <summary>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Int64)">
            <summary>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.UInt64)">
            <summary>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.Object)">
            <summary>Writes the text representation of the specified object to the standard output stream.</summary>
            <param name="value">The value to write, or <see langword="null" />. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.Write(System.String)">
            <summary>Writes the specified string value to the standard output stream.</summary>
            <param name="value">The value to write. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:Intersect.Console.OpenStandardError">
            <summary>Acquires the standard error stream.</summary>
            <returns>The standard error stream.</returns>
        </member>
        <member name="M:Intersect.Console.OpenStandardError(System.Int32)">
            <summary>Acquires the standard error stream, which is set to a specified buffer size.</summary>
            <param name="bufferSize">The internal stream buffer size. </param>
            <returns>The standard error stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize" /> is less than or equal to zero. </exception>
        </member>
        <member name="M:Intersect.Console.OpenStandardInput">
            <summary>Acquires the standard input stream.</summary>
            <returns>The standard input stream.</returns>
        </member>
        <member name="M:Intersect.Console.OpenStandardInput(System.Int32)">
            <summary>Acquires the standard input stream, which is set to a specified buffer size.</summary>
            <param name="bufferSize">The internal stream buffer size. </param>
            <returns>The standard input stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize" /> is less than or equal to zero. </exception>
        </member>
        <member name="M:Intersect.Console.OpenStandardOutput">
            <summary>Acquires the standard output stream.</summary>
            <returns>The standard output stream.</returns>
        </member>
        <member name="M:Intersect.Console.OpenStandardOutput(System.Int32)">
            <summary>Acquires the standard output stream, which is set to a specified buffer size.</summary>
            <param name="bufferSize">The internal stream buffer size. </param>
            <returns>The standard output stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize" /> is less than or equal to zero. </exception>
        </member>
        <member name="P:Intersect.Console.IsInputRedirected">
            <summary>Gets a value that indicates whether input has been redirected from the standard input stream.</summary>
            <returns>
            <see langword="true" /> if input is redirected; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:Intersect.Console.IsOutputRedirected">
            <summary>Gets a value that indicates whether output has been redirected from the standard output stream.</summary>
            <returns>
            <see langword="true" /> if output is redirected; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:Intersect.Console.IsErrorRedirected">
            <summary>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</summary>
            <returns>
            <see langword="true" /> if error output is redirected; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:Intersect.Console.In">
            <summary>Gets the standard input stream.</summary>
            <returns>A <see cref="T:System.IO.TextReader" /> that represents the standard input stream.</returns>
        </member>
        <member name="P:Intersect.Console.Out">
            <summary>Gets the standard output stream.</summary>
            <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.</returns>
        </member>
        <member name="P:Intersect.Console.Error">
            <summary>Gets the standard error output stream.</summary>
            <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.</returns>
        </member>
        <member name="M:Intersect.Console.SetIn(System.IO.TextReader)">
            <summary>Sets the <see cref="P:System.Console.In" /> property to the specified <see cref="T:System.IO.TextReader" /> object.</summary>
            <param name="newIn">A stream that is the new standard input. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="newIn" /> is <see langword="null" />. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Intersect.Console.SetOut(System.IO.TextWriter)">
            <summary>Sets the <see cref="P:System.Console.Out" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
            <param name="newOut">A stream that is the new standard output. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="newOut" /> is <see langword="null" />. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Intersect.Console.SetError(System.IO.TextWriter)">
            <summary>Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
            <param name="newError">A stream that is the new standard error output. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="newError" /> is <see langword="null" />. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Intersect.Enums.ChatboxTab">
            <summary>
            Defines the chat tabs available within the engine, and is used to determine which one is currently in view.
            </summary>
        </member>
        <member name="T:Intersect.Enums.ChatMessageType">
            <summary>
            Defines all different types for chat messages so we can filter them on the client for display purposes.
            </summary>
        </member>
        <member name="T:Intersect.Enums.ItemHandling">
            <summary>
            Contains the definitions to be used on how to handle giving or taking away items to and from players.
            </summary>
        </member>
        <member name="F:Intersect.Enums.ItemHandling.Normal">
            <summary>
            Give and take away items like normal, no special rules.
            </summary>
        </member>
        <member name="F:Intersect.Enums.ItemHandling.Overflow">
            <summary>
            Allow the inventory to overflow, dropping items on the map when the inventory reaches capacity.
            NOTE: Does not apply to taking away items!
            </summary>
        </member>
        <member name="F:Intersect.Enums.ItemHandling.UpTo">
            <summary>
            Give or Take as many items as possible until the user either runs out of items or space.
            NOTE: Requires at least one change to be successful!
            </summary>
        </member>
        <member name="T:Intersect.Extensions.StringExtensions">
            <summary>
            Extensions for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Intersect.Extensions.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            Formats the string in the current culture with the provided arguments.
            </summary>
            <param name="format">the format string</param>
            <param name="args">the format arguments</param>
            <returns>a formatted string</returns>
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:Intersect.Extensions.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Formats the string with the provided <see cref="T:System.IFormatProvider"/> and arguments.
            </summary>
            <param name="format">the format string</param>
            <param name="formatProvider">the format provider to use to format the provided string and arguments</param>
            <param name="args">the format arguments</param>
            <returns>a formatted string</returns>
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="T:Intersect.Factories.FactoryRegistry`1">
            <summary>
            Utility class that stores instances of <see cref="T:Intersect.Factories.IFactory`1"/>.
            </summary>
            <typeparam name="TValue">the type of created instances</typeparam>
        </member>
        <member name="P:Intersect.Factories.FactoryRegistry`1.Factory">
            <summary>
            The current <see cref="T:Intersect.Factories.IFactory`1"/> instance, null if one hasn't been registered.
            </summary>
        </member>
        <member name="M:Intersect.Factories.FactoryRegistry`1.Create(System.Object[])">
            <summary>
            Creates an instance of <typeparamref name="TValue"/> with the provided arguments.
            </summary>
            <param name="args">the optional creation arguments</param>
            <returns>an instance of <typeparamref name="TValue"/></returns>
            <see cref="M:Intersect.Factories.IFactory`1.Create(System.Object[])"/>
            <exception cref="T:System.ArgumentNullException">thrown if there is no registered <see cref="T:Intersect.Factories.IFactory`1"/></exception>
        </member>
        <member name="M:Intersect.Factories.FactoryRegistry`1.TryCreate(`0@,System.Object[])">
            <summary>
            Safely attempts to create an instance of <typeparamref name="TValue"/> without throwing an exception.
            </summary>
            <param name="value">the return parameter</param>
            <param name="args">the creation arguments</param>
            <returns>if the instance was created</returns>
            <see cref="M:Intersect.Factories.FactoryRegistry`1.Create(System.Object[])"/>
        </member>
        <member name="M:Intersect.Factories.FactoryRegistry`1.RegisterFactory(Intersect.Factories.IFactory{`0},System.Boolean)">
            <summary>
            Registers an <see cref="T:Intersect.Factories.IFactory`1"/> as the current instance.
            </summary>
            <param name="factory">the <see cref="T:Intersect.Factories.IFactory`1"/> instance to register</param>
            <param name="overrideExisting">if the current instance should be overwritten if it exists (default false)</param>
            <returns>true if registration was successful, false if a factory was already registered and <paramref name="overrideExisting"/> is false</returns>
        </member>
        <member name="T:Intersect.Factories.IFactory`1">
            <summary>
            Defines the interface for a factory class.
            </summary>
            <typeparam name="TValue">type of the created instances</typeparam>
        </member>
        <member name="M:Intersect.Factories.IFactory`1.Create(System.Object[])">
            <summary>
            Creates a not-null instance of <typeparamref name="TValue"/> given the input <paramref name="args"/>.
            </summary>
            <param name="args">the optional arguments used in creating a <typeparamref name="TValue"/></param>
            <returns>a not-null <typeparamref name="TValue"/></returns>
        </member>
        <member name="P:Intersect.GameObjects.Events.Condition.ElseEnabled">
            <summary>
            Configures whether or not this condition does or does not have an else branch.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasItemCondition.UseVariable">
            <summary>
            Defines whether this event command will use a variable for processing or not.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasItemCondition.VariableType">
            <summary>
            Defines whether the variable used is a Player or Global variable.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasItemCondition.VariableId">
            <summary>
            The Variable Id to use.
            </summary>
        </member>
        <member name="T:Intersect.GameObjects.Events.HasFreeInventorySlots">
            <summary>
            Defines the condition class used when checking for a player's free inventory slots.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasFreeInventorySlots.Type">
            <summary>
            Defines the type of condition.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasFreeInventorySlots.Quantity">
            <summary>
            Defines the amount of inventory slots that need to be free to clear this condition.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasFreeInventorySlots.UseVariable">
            <summary>
            Defines whether this event command will use a variable for processing or not.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasFreeInventorySlots.VariableType">
            <summary>
            Defines whether the variable used is a Player or Global variable.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.HasFreeInventorySlots.VariableId">
            <summary>
            The Variable Id to use.
            </summary>
        </member>
        <member name="T:Intersect.GameObjects.Events.InGuildWithRank">
            <summary>
            Defines the condition class used when checking whether a player is in a guild with at least a specified rank
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.InGuildWithRank.Type">
            <summary>
            Defines the type of condition
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.InGuildWithRank.Rank">
            <summary>
            The guild rank the condition checks for as a minimum
            </summary>
        </member>
        <member name="T:Intersect.GameObjects.Events.MapZoneTypeIs">
            <summary>
            Defines the condition class used when checking whether a player is on a specific map zone type.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.MapZoneTypeIs.Type">
            <summary>
            Defines the type of condition.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.MapZoneTypeIs.ZoneType">
            <summary>
            Defines the map Zone Type to compare to.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.GiveExperienceCommand.UseVariable">
            <summary>
            Defines whether this event command will use a variable for processing or not.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.GiveExperienceCommand.VariableType">
            <summary>
            Defines whether the variable used is a Player or Global variable.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.GiveExperienceCommand.VariableId">
            <summary>
            The Variable Id to use.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangeItemsCommand.ItemHandling">
            <summary>
            Defines how the server is supposed to handle changing the items of this request.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangeItemsCommand.UseVariable">
            <summary>
            Defines whether this event command will use a variable for processing or not.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangeItemsCommand.VariableType">
            <summary>
            Defines whether the variable used is a Player or Global variable.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangeItemsCommand.VariableId">
            <summary>
            The Variable Id to use.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ShowPictureCommand.File">
            <summary>
            Picture filename to show.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ShowPictureCommand.Size">
            <summary>
            How the picture is rendered on the screen.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ShowPictureCommand.Clickable">
            <summary>
            If true the picture will close upon being clicked
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ShowPictureCommand.HideTime">
            <summary>
            If not 0 the picture will go away after shown for the time below
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ShowPictureCommand.WaitUntilClosed">
            <summary>
            If true this event won't continue with commands until this picture is closed.
            </summary>
        </member>
        <member name="T:Intersect.GameObjects.Events.Commands.ChangePlayerColorCommand">
            <summary>
            Defines the Event command class for the Change Player Color command.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangePlayerColorCommand.Type">
            <summary>
            The <see cref="T:Intersect.GameObjects.Events.EventCommandType"/> of this command.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.Commands.ChangePlayerColorCommand.Color">
            <summary>
            The <see cref="P:Intersect.GameObjects.Events.Commands.ChangePlayerColorCommand.Color"/> to apply to the player.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.Events.EventBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.Crafting.CraftBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.CraftingTableBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.AnimationBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.ClassBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.CooldownGroup">
            <summary>
            Defines which cooldown group this item belongs to.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.IgnoreGlobalCooldown">
            <summary>
            Configures whether this should not trigger and be triggered by the global cooldown.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.IgnoreCooldownReduction">
            <summary>
            Configured whether the cooldown of this item should be reduced by the players cooldown reduction
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.JsonColor">
            <summary>
            The database compatible version of <see cref="P:Intersect.GameObjects.ItemBase.Color"/>
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.Color">
            <summary>
            Defines the ARGB color settings for this Item.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ItemBase.Folder">
            <inheritdoc />
        </member>
        <member name="M:Intersect.GameObjects.ItemBase.GetCooldownGroup(System.String)">
            <summary>
            Gets an array of all items sharing the provided cooldown group.
            </summary>
            <param name="cooldownGroup">The cooldown group to search for.</param>
            <returns>Returns an array of <see cref="T:Intersect.GameObjects.ItemBase"/> containing all items with the supplied cooldown group.</returns>
        </member>
        <member name="M:Intersect.GameObjects.LightBase.GetHashCode">
            <summary>
            Only checks for matching colors, intensity, and expand values... so we know if we can group lights and render them with the same shader values to boost performance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intersect.GameObjects.LightBase.Equals(System.Object)">
            <summary>
            Only checks for matching colors, intensity, and expand values... so we know if we can group lights and render them with the same shader values to boost performance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Intersect.GameObjects.NpcBase.IndividualizedLoot">
            <summary>
            If true this npc will drop individual loot for all of those who helped slay it.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.NpcBase.JsonColor">
            <summary>
            The database compatible version of <see cref="P:Intersect.GameObjects.NpcBase.Color"/>
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.NpcBase.Color">
            <summary>
            Defines the ARGB color settings for this Npc.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.NpcBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.PlayerVariableBase.Folder">
            <inheritdoc />
        </member>
        <member name="M:Intersect.GameObjects.PlayerVariableBase.GetNamesByType(Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve an array of variable names of the supplied data type.
            </summary>
            <param name="dataType">The data type to retrieve names of.</param>
            <returns>Returns an array of names.</returns>
        </member>
        <member name="M:Intersect.GameObjects.PlayerVariableBase.ListIndex(System.Guid,Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve the list index of an Id within a specific data type list.
            </summary>
            <param name="id">The Id to look up.</param>
            <param name="dataType">The data type to search up.</param>
            <returns>Returns the list Index of the provided Id.</returns>
        </member>
        <member name="M:Intersect.GameObjects.PlayerVariableBase.IdFromList(System.Int32,Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve the Id associated with a list index of a specific data type.
            </summary>
            <param name="listIndex">The list index to retrieve.</param>
            <param name="dataType">The data type to search up.</param>
            <returns>Returns the Id of the provided index.</returns>
        </member>
        <member name="P:Intersect.GameObjects.ProjectileBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.DoNotShowUnlessRequirementsMet">
            <summary>
            Hides this quest from the quest log if it has not been started and cannot be started due to the requiremetns/conditions
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.UnstartedCategory">
            <summary>
            Quest category in the quest log when this quest hasn't been started yet
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.InProgressCategory">
            <summary>
            Quest category in the quest log when this quest is in progress
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.CompletedCategory">
            <summary>
            Quest category in the quest log when this quest has been completed
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.QuestBase.OrderValue">
            <summary>
            Order priority of this quest within the quest log
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.ResourceBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.ServerVariableBase.Folder">
            <inheritdoc />
        </member>
        <member name="M:Intersect.GameObjects.ServerVariableBase.GetNamesByType(Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve an array of variable names of the supplied data type.
            </summary>
            <param name="dataType">The data type to retrieve names of.</param>
            <returns>Returns an array of names.</returns>
        </member>
        <member name="M:Intersect.GameObjects.ServerVariableBase.ListIndex(System.Guid,Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve the list index of an Id within a specific data type list.
            </summary>
            <param name="id">The Id to look up.</param>
            <param name="dataType">The data type to search up.</param>
            <returns>Returns the list Index of the provided Id.</returns>
        </member>
        <member name="M:Intersect.GameObjects.ServerVariableBase.IdFromList(System.Int32,Intersect.Enums.VariableDataTypes)">
            <summary>
            Retrieve the Id associated with a list index of a specific data type.
            </summary>
            <param name="listIndex">The list index to retrieve.</param>
            <param name="dataType">The data type to search up.</param>
            <returns>Returns the Id of the provided index.</returns>
        </member>
        <member name="P:Intersect.GameObjects.ShopBase.Folder">
            <inheritdoc />
        </member>
        <member name="P:Intersect.GameObjects.SpellBase.CooldownGroup">
            <summary>
            Defines which cooldown group this spell belongs to.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.SpellBase.IgnoreGlobalCooldown">
            <summary>
            Configures whether this should not trigger and be triggered by the global cooldown.
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.SpellBase.IgnoreCooldownReduction">
            <summary>
            Configured whether the cooldown of this spell should be reduced by the players cooldown reduction
            </summary>
        </member>
        <member name="P:Intersect.GameObjects.SpellBase.Folder">
            <inheritdoc />
        </member>
        <member name="M:Intersect.GameObjects.SpellBase.GetCooldownGroup(System.String)">
            <summary>
            Gets an array of all items sharing the provided cooldown group.
            </summary>
            <param name="cooldownGroup">The cooldown group to search for.</param>
            <returns>Returns an array of <see cref="T:Intersect.GameObjects.ItemBase"/> containing all items with the supplied cooldown group.</returns>
        </member>
        <member name="M:Intersect.IO.Files.FileSystemHelper.EnsureDirectoryExists(System.String)">
            <summary>
            Checks to see if the directory exists, and creates it otherwise.
            </summary>
            <param name="directoryPath">the directory path to check</param>
            <returns>
            <code>false</code> if the path is a file or creation fails
            <code>true</code> if the path is a directory or creation succeeded
            </returns>
        </member>
        <member name="T:Intersect.Logging.Formatting.DefaultFormatter">
            <summary>
            Basic formatter for text logs, includes details and timestamps.
            </summary>
        </member>
        <member name="M:Intersect.Logging.Formatting.DefaultFormatter.Format(Intersect.Logging.LogConfiguration,Intersect.Logging.LogLevel,System.DateTime,System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Logging.Formatting.PrettyFormatter">
            <summary>
            Pretty log formatter that does not include timestamps or extended details.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Intersect.Logging.Formatting.PrettyFormatter.FormatPrefix(Intersect.Logging.LogConfiguration,Intersect.Logging.LogLevel,System.DateTime,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Logging.LogConfiguration">
            <summary>
            Configuration class for <see cref="T:Intersect.Logging.Logger"/>.
            </summary>
        </member>
        <member name="P:Intersect.Models.IFolderable.Folder">
            <summary>
            Used to group editor items together into folders with the same name
            </summary>
        </member>
        <member name="M:Intersect.Network.Ceras.#ctor(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Creates Ceras with instructions on how to serialize type names. This is used for migrating legacy classes to newer versions during server migrations.
            </summary>
            <param name="nameTypeMap"></param>
        </member>
        <member name="M:Intersect.Network.LegacyCeras.#ctor">
            <summary>
            Creates a Ceras instance with legacy config (no version tolerance) in order for the server to use for database upgrades to the new serialized formats.
            </summary>
        </member>
        <member name="M:Intersect.Network.LegacyCeras.#ctor(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Creates a Ceras instant wtih legacy config (no version tolerance) in order for the server to use for database upgrades to new serialized formats.
            The dictionary parameters allow us to override what classes Ceras initializes by mapping old types to new ones.
            </summary>
        </member>
        <member name="M:Intersect.Network.PacketHandlerRegistry.DiscoverMethods(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Discovers all <see langword="static"/> methods in a given assembly that are valid packet handlers, by default requiring a <see cref="T:Intersect.Network.PacketHandlerAttribute"/>.
            
            Note: Changing <paramref name="requireAttribute"/> to <see langword="false"/> is very computationally expensive.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to scan</param>
            <param name="requireAttribute">if <see cref="T:Intersect.Network.PacketHandlerAttribute"/> needs to be specified (default <see langword="true"/>, <see langword="false"/> is slow)</param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of valid <see cref="T:System.Reflection.MethodInfo"/>s</returns>
        </member>
        <member name="M:Intersect.Network.PacketHandlerRegistry.DiscoverMethods(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Discovers all <see langword="static"/> methods in a given type that are valid packet handlers, by default requiring a <see cref="T:Intersect.Network.PacketHandlerAttribute"/>.
            
            Note: Changing <paramref name="requireAttribute"/> to <see langword="false"/> is very computationally expensive.
            </summary>
            <param name="type">the <see cref="T:System.Type"/> to scan</param>
            <param name="extraBindingFlags">extra <see cref="T:System.Reflection.BindingFlags"/> (besides <see cref="F:System.Reflection.BindingFlags.Public"/>) to filter the methods by</param>
            <param name="requireAttribute">if <see cref="T:Intersect.Network.PacketHandlerAttribute"/> needs to be specified (default <see langword="true"/>, <see langword="false"/> is slow)</param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of valid <see cref="T:System.Reflection.MethodInfo"/>s</returns>
        </member>
        <member name="M:Intersect.Network.PacketHandlerRegistry.DiscoverTypes(System.Reflection.Assembly,System.Boolean)">
             <summary>
             Discovers all <see cref="T:System.Type"/>s in a given assembly that are valid packet handlers, by default requiring a <see cref="T:Intersect.Network.PacketHandlerAttribute"/>.
            
             Note: Changing <paramref name="requireAttribute"/> to <see langword="false"/> is very computationally expensive.
             </summary>
             <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to scan</param>
             <param name="requireAttribute">if <see cref="T:Intersect.Network.PacketHandlerAttribute"/> needs to be specified (default <see langword="true"/>, <see langword="false"/> is slow)</param>
             <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of valid <see cref="T:System.Type"/>s</returns>
        </member>
        <member name="M:Intersect.Network.PacketHandlerRegistry.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Network.Packets.Client.GuildInviteAcceptPacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Client.GuildInviteDeclinePacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Client.GuildLeavePacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Client.RequestGuildPacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Client.UpdateGuildMemberPacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Server.GuildInvitePacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="T:Intersect.Network.Packets.Server.GuildPacket">
            <summary>
            The definition of the GuildPacket sent to a player containing the online and offline members of their guilds.
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Server.GuildPacket.#ctor">
            <summary>
            Parameterless Constructor for MessagePack
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Server.GuildPacket.#ctor(Intersect.Network.Packets.Server.GuildMember[])">
            <summary>
            Create a new instance of this class and define its contents.
            </summary>
            <param name="members">An array containing all guild members and metadata.</param>
        </member>
        <member name="M:Intersect.Network.Packets.Server.GuildMember.#ctor">
            <summary>
            Parameterless constructor for messagepack
            </summary>
        </member>
        <member name="T:Intersect.Network.Packets.Server.AnnouncementPacket">
            <summary>
            Defines the layout for an AnnouncementPacket.
            </summary>
        </member>
        <member name="P:Intersect.Network.Packets.Server.AnnouncementPacket.Message">
            <summary>
            The announcement message to send.
            </summary>
        </member>
        <member name="P:Intersect.Network.Packets.Server.AnnouncementPacket.Duration">
            <summary>
            The time (in milliseconds) for the announcement to display.
            </summary>
        </member>
        <member name="M:Intersect.Network.Packets.Server.AnnouncementPacket.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new instance of the <see cref="T:Intersect.Network.Packets.Server.AnnouncementPacket"/> class.
            </summary>
            <param name="message">The message to send to the client.</param>
            <param name="duration">The duration for this message to appear for on the client.</param>
        </member>
        <member name="M:Intersect.Network.IntersectPacket.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Network.IntersectPacket.Data">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Network.IntersectPacket.Sanitize">
            <inheritdoc />
        </member>
        <member name="F:Intersect.Network.TransmissionMode.All">
            <summary>
                Guarantees that all packets will be transmitted successfully
                and will be received and processed in the order they are sent.
            </summary>
        </member>
        <member name="F:Intersect.Network.TransmissionMode.Latest">
            <summary>
                Guarantees that all packets will be transmitted successfully
                but any packets of the same type will be ignored if they
                arrive after a newer packet of their type.
            </summary>
        </member>
        <member name="F:Intersect.Network.TransmissionMode.Any">
            <summary>
                Makes no guarantees about anything.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Helpers.CommandLineHelper">
            <inheritdoc cref="T:Intersect.Plugins.Interfaces.ICommandLineHelper" />
        </member>
        <member name="M:Intersect.Plugins.Helpers.CommandLineHelper.ParseArguments``1">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Helpers.ContextHelper`1">
            <summary>
            Partial implementation class for helpers that require a known <see cref="T:Intersect.Plugins.IPluginContext"/>.
            </summary>
            <typeparam name="TContext">the type of <see cref="T:Intersect.Plugins.IPluginContext"/> needed</typeparam>
        </member>
        <member name="P:Intersect.Plugins.Helpers.ContextHelper`1.Context">
            <summary>
            Reference to the current <see cref="T:Intersect.Plugins.IPluginContext"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Helpers.ContextHelper`1.#ctor(`0)">
            <summary>
            Partially instantiates a <see cref="T:Intersect.Plugins.Helpers.ContextHelper`1"/>.
            </summary>
            <param name="context">the required <typeparamref name="TContext"/></param>
        </member>
        <member name="T:Intersect.Plugins.Helpers.EmbeddedResourceHelper">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.GetInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.Read(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.Resolve(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.TryGetInfo(System.String,System.Reflection.ManifestResourceInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.TryRead(System.String,System.IO.Stream@)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.EmbeddedResourceHelper.TryResolve(System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Helpers.LoggingHelper">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Helpers.LoggingHelper.Application">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Helpers.LoggingHelper.CreateLogger(Intersect.Plugins.Interfaces.CreateLoggerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Interfaces.ICommandLineHelper">
            <summary>
            Defines the API for accessing command line arguments.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.ICommandLineHelper.ParseArguments``1">
            <summary>
            Parses the command line arguments used to start the application into an instance of the provided type.
            </summary>
            <typeparam name="TArguments">a custom arguments type</typeparam>
            <returns>an instance of <typeparamref name="TArguments"/> if valid</returns>
        </member>
        <member name="T:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper">
            <summary>
            Defines the API for accessing embedded resources.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Exists(System.String)">
            <summary>
            Checks if a resource with the given name exists.
            </summary>
            <param name="resourceName">the name of the resource to check for</param>
            <returns>if <paramref name="resourceName"/> exists</returns>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.GetInfo(System.String)">
            <summary>
            Gets the information for the requested resource using inexact name matching as described by <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)"/>.
            </summary>
            <param name="resourceName">the resource name to look for</param>
            <returns>the <see cref="T:System.Reflection.ManifestResourceInfo"/> of the specified resource</returns>
            <exception cref="T:System.InvalidOperationException">if <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)"/> does not throw an error but the resource cannot be found</exception>
            <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Read(System.String)">
            <summary>
            Opens a read stream for <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">the name of the resource to open for reading</param>
            <returns>the read stream for <paramref name="resourceName"/></returns>
            <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)">
             <summary>
             Resolves <paramref name="resourceName"/> to a fully-qualified resource name.
            
             <paramref name="resourceName"/> is used as "ends-with" matching
               criteria, where the shortest fully-qualified resource name found
               is returned as the resolved resource name.
             </summary>
             <param name="resourceName">the name of the resource to resolve</param>
             <returns>a fully-qualified resource name if any are found</returns>
             <exception cref="T:System.ArgumentNullException">if <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/> returns true for <paramref name="resourceName"/></exception>
             <exception cref="T:System.IO.FileNotFoundException">if there are *no* resources that end with <paramref name="resourceName"/></exception>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.TryGetInfo(System.String,System.Reflection.ManifestResourceInfo@)">
            <summary>
            Attempts to get the <see cref="T:System.Reflection.ManifestResourceInfo"/> of the resource
              identified by <paramref name="resourceName"/>, returning true if
              successful and false otherwise, without throwing exceptions.
            </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="resourceInfo">the output variable for the resource info</param>
            <returns>if the <see cref="T:System.Reflection.ManifestResourceInfo"/> was fetched successfully</returns>
            <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.GetInfo(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.TryRead(System.String,System.IO.Stream@)">
            <summary>
            Attempts to get the read <see cref="T:System.IO.Stream"/> of the resource
              identified by <paramref name="resourceName"/>, returning true if
              successful and false otherwise, without throwing exceptions.
            </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="stream">the output variable for the resource stream</param>
            <returns>if a read <see cref="T:System.IO.Stream"/> was opened successfully</returns>
            <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Read(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.TryResolve(System.String,System.String@)">
            <summary>
            Attempts to resolve the fully-qualified version of <paramref name="resourceName"/>,
              returning true if successful and false otherwise, without throwing exceptions.
            </summary>
            <param name="resourceName">the name of the resource to look for</param>
            <param name="manifestResourceName">the fully qualified resource name</param>
            <returns>if a resource was found that matches <paramref name="resourceName"/></returns>
            <see cref="M:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper.Resolve(System.String)"/>
        </member>
        <member name="T:Intersect.Plugins.Interfaces.ILifecycleHelper">
            <summary>
            Defines the API for accessing lifecycle information and events.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Interfaces.ILoggingHelper">
            <summary>
            Defines the API for accessing the logging system.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.ILoggingHelper.Application">
            <summary>
            The <see cref="T:Intersect.Logging.Logger"/> instance for the entire application.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.ILoggingHelper.Plugin">
            <summary>
            The <see cref="T:Intersect.Logging.Logger"/> instance for the active plugin.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Interfaces.ILoggingHelper.CreateLogger(Intersect.Plugins.Interfaces.CreateLoggerOptions)">
            <summary>
            Creates specialized <see cref="T:Intersect.Logging.Logger"/>s for the active plugin.
            </summary>
            <param name="createLoggerOptions">options to configure the <see cref="T:Intersect.Logging.Logger"/></param>
            <returns>a specialized <see cref="T:Intersect.Logging.Logger"/> instance</returns>
        </member>
        <member name="T:Intersect.Plugins.Interfaces.CreateLoggerOptions">
            <summary>
            Configuration options for creating <see cref="T:Intersect.Logging.Logger"/>s.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.CreateLoggerOptions.Console">
            <summary>
            The minimum <see cref="T:Intersect.Logging.LogLevel"/> for console output, set to <see cref="F:Intersect.Logging.LogLevel.None"/> to disable.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.CreateLoggerOptions.File">
            <summary>
            The minimum <see cref="T:Intersect.Logging.LogLevel"/> for file output, set to <see cref="F:Intersect.Logging.LogLevel.None"/> to disable.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.CreateLoggerOptions.Formatters">
            <summary>
            The custom formatters to use for output from the created <see cref="T:Intersect.Logging.Logger"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.CreateLoggerOptions.Name">
            <summary>
            The name of the created <see cref="T:Intersect.Logging.Logger"/>.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Interfaces.IManifestHelper">
            <summary>
            Defines the API for accessing plugin manifest information.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.IManifestHelper.Name">
            <summary>
            The end-user visible name of the plugin
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.IManifestHelper.Key">
            <summary>
            The unique key of the plugin (e.g. AscensionGameDev.Intersect.Client.DiscordButton)
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.IManifestHelper.Version">
            <summary>
            The version of the plugin
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.IManifestHelper.Authors">
            <summary>
            The <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>(s) of the plugin
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Interfaces.IManifestHelper.Homepage">
            <summary>
            The homepage for the plugin
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Contexts.PluginBootstrapContext">
            <summary>
            Common <see cref="T:Intersect.Plugins.IPluginBootstrapContext"/> implementation.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginBootstrapContext.CreateFactory(System.String[],CommandLine.Parser,Intersect.Plugins.Interfaces.INetworkHelper)">
            <summary>
            Creates a <see cref="T:Intersect.Factories.IFactory`1"/> for <see cref="T:Intersect.Plugins.IPluginBootstrapContext"/>.
            </summary>
            <param name="args">the startup arguments that were parsed</param>
            <param name="parser">the <see cref="T:CommandLine.Parser"/> used to parse <paramref name="args"/></param>
            <param name="networkHelper"></param>
            <returns>a <see cref="T:Intersect.Factories.IFactory`1"/> instance</returns>
        </member>
        <member name="T:Intersect.Plugins.Contexts.PluginBootstrapContext.Factory">
            <summary>
            Factory implementation for <see cref="T:Intersect.Plugins.IPluginBootstrapContext"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginBootstrapContext.Factory.#ctor(System.String[],CommandLine.Parser,Intersect.Plugins.Interfaces.INetworkHelper)">
            <summary>
            Initializes a <see cref="T:Intersect.Plugins.Contexts.PluginBootstrapContext.Factory"/> for <see cref="T:Intersect.Plugins.IPluginBootstrapContext"/>.
            </summary>
            <param name="args">the startup arguments that were parsed</param>
            <param name="parser">the <see cref="T:CommandLine.Parser"/> used to parse <paramref name="args"/></param>
            <param name="networkHelper"></param>
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginBootstrapContext.Factory.Create(System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.CommandLine">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.Network">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.Assembly">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.EmbeddedResources">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.Logging">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginBootstrapContext.Manifest">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginBootstrapContext.GetTypedConfiguration``1">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Contexts.PluginContext`2">
            <summary>
            Common implementation class for typed plugin contexts.
            </summary>
            <typeparam name="TPluginContext"><see cref="T:Intersect.Plugins.IPluginContext"/> extension type</typeparam>
            <typeparam name="TLifecycleHelper"><see cref="T:Intersect.Plugins.Interfaces.ILifecycleHelper"/> extension type used by <typeparamref name="TPluginContext"/></typeparam>
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.Assembly">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.EmbeddedResources">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.Lifecycle">
            <inheritdoc cref="P:Intersect.Plugins.IPluginContext.Lifecycle" />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.Logging">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Contexts.PluginContext`2.Manifest">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginContext`2.#ctor(Intersect.Plugins.Plugin)">
            <summary>
            Instantiates a <see cref="T:Intersect.Plugins.Contexts.PluginContext`2"/>.
            </summary>
            <param name="plugin">the <see cref="P:Intersect.Plugins.Contexts.PluginContext`2.Plugin"/> this context will be used for</param>
        </member>
        <member name="M:Intersect.Plugins.Contexts.PluginContext`2.GetTypedConfiguration``1">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.IPluginBaseContext">
            <summary>
            Defines the common required elements for a context between <see cref="T:Intersect.Plugins.IPluginContext"/> and <see cref="T:Intersect.Plugins.IPluginBootstrapContext"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBaseContext.Assembly">
            <summary>
            The <see cref="T:System.Reflection.Assembly"/> of the current plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBaseContext.Configuration">
            <summary>
            The <see cref="T:Intersect.Plugins.PluginConfiguration"/> of the current plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBaseContext.EmbeddedResources">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.IEmbeddedResourceHelper"/> for the current plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBaseContext.Logging">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.ILoggingHelper"/> for the current plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBaseContext.Manifest">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> for the current plugin.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.IPluginBaseContext.GetTypedConfiguration``1">
            <summary>
            Gets <see cref="P:Intersect.Plugins.IPluginBaseContext.Configuration"/> as a <typeparamref name="TConfiguration"/>.
            </summary>
            <typeparam name="TConfiguration">a subtype of <see cref="T:Intersect.Plugins.PluginConfiguration"/></typeparam>
            <returns><see cref="P:Intersect.Plugins.IPluginBaseContext.Configuration"/> if it is a <typeparamref name="TConfiguration"/> or null otherwise</returns>
        </member>
        <member name="T:Intersect.Plugins.IPluginBootstrapContext">
            <summary>
            Defines the API of the plugin context during application bootstrapping.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBootstrapContext.CommandLine">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.ICommandLineHelper"/> of the current plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginBootstrapContext.Network">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.INetworkHelper"/> of the current plugin.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.IPluginContext`1">
            <summary>
            Defines the API of the <typeparamref name="TPluginContext"/> during application runtime.
            </summary>
            <typeparam name="TPluginContext">a <see cref="T:Intersect.Plugins.IPluginContext"/> subtype</typeparam>
        </member>
        <member name="T:Intersect.Plugins.IPluginContext">
            <summary>
            Defines the API of the plugin context during application runtime.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginContext.Lifecycle">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.ILifecycleHelper"/> of the current plugin.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.IPluginContext`2">
            <summary>
            Defines the API of the <typeparamref name="TPluginContext"/> with a
            specialized <see cref="T:Intersect.Plugins.Interfaces.ILifecycleHelper"/> during application runtime.
            </summary>
            <typeparam name="TPluginContext"><see cref="T:Intersect.Plugins.IPluginContext"/> extension type</typeparam>
            <typeparam name="TLifecycleHelper"><see cref="T:Intersect.Plugins.Interfaces.ILifecycleHelper"/> extension type used by <typeparamref name="TPluginContext"/></typeparam>
        </member>
        <member name="P:Intersect.Plugins.IPluginContext`2.Lifecycle">
            <summary>
            The specialized <see cref="T:Intersect.Plugins.Interfaces.ILifecycleHelper"/> of the current plugin.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.IPluginEntry`1">
            <summary>
            Defines the API that plugin entry points must implement
            in order to be discovered by the plugin loader with
            specialized application lifecycle handlers.
            </summary>
            <typeparam name="TPluginContext">the specialized <see cref="T:Intersect.Plugins.IPluginContext"/> type</typeparam>
            <see cref="M:Intersect.Plugins.Loaders.PluginLoader.LoadFrom(Intersect.Core.IApplicationContext,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Intersect.Plugins.IPluginEntry`1.OnStart(`0)">
            <summary>
            Invoked during application startup after basic initialization.
            </summary>
            <param name="context">the current specialized plugin context</param>
        </member>
        <member name="M:Intersect.Plugins.IPluginEntry`1.OnStop(`0)">
            <summary>
            Invoked during application shutdown.
            </summary>
            <param name="context">the current specialized plugin context</param>
        </member>
        <member name="T:Intersect.Plugins.IPluginEntry">
            <summary>
            Defines the API that plugin entry points must implement
            in order to be discovered by the plugin loader.
            </summary>
            <see cref="M:Intersect.Plugins.Loaders.PluginLoader.LoadFrom(Intersect.Core.IApplicationContext,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Intersect.Plugins.IPluginEntry.OnBootstrap(Intersect.Plugins.IPluginBootstrapContext)">
            <summary>
            Invoked during application bootstrapping before startup.
            </summary>
            <param name="context">the current plugin context</param>
        </member>
        <member name="M:Intersect.Plugins.IPluginEntry.OnStart(Intersect.Plugins.IPluginContext)">
            <summary>
            Invoked during application startup after basic initialization.
            </summary>
            <param name="context">the current plugin context</param>
        </member>
        <member name="M:Intersect.Plugins.IPluginEntry.OnStop(Intersect.Plugins.IPluginContext)">
            <summary>
            Invoked during application shutdown.
            </summary>
            <param name="context">the current plugin context</param>
        </member>
        <member name="T:Intersect.Plugins.IPluginService">
            <summary>
            Declares the API surface for the plugin service.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.IPluginService.Item(System.String)">
            <summary>
            Indexer for looking up loaded <see cref="T:Intersect.Plugins.Plugin"/>s by their key.
            </summary>
            <param name="pluginKey">the </param>
            <returns></returns>
        </member>
        <member name="P:Intersect.Plugins.IPluginService.PluginDirectories">
            <summary>
            The directories to look for plugins in.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.IPluginService.IsPluginEnabled(System.String)">
            <summary>
            Checks if the plugin for the given key is enabled.
            </summary>
            <param name="pluginKey">the plugin key string</param>
            <returns>if the plugin is enabled (false if it is not even registered)</returns>
        </member>
        <member name="M:Intersect.Plugins.IPluginService.EnablePlugin(System.String)">
            <summary>
            Enable the <see cref="T:Intersect.Plugins.Plugin"/> with the given key.
            </summary>
            <param name="pluginKey">the plugin key string</param>
            <returns>true if the plugin exists and is now enabled, false otherwise</returns>
        </member>
        <member name="M:Intersect.Plugins.IPluginService.DisablePlugin(System.String)">
            <summary>
            Disable the <see cref="T:Intersect.Plugins.Plugin"/> with the given key.
            </summary>
            <param name="pluginKey">the plugin key string</param>
            <returns>true if the plugin exists and is now disabled, false otherwise</returns>
        </member>
        <member name="T:Intersect.Plugins.Loaders.ManifestLoader">
            <summary>
            Utility class for loading manifests from <see cref="T:System.Reflection.Assembly"/>s.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Loaders.ManifestLoader.ManifestLoaderDelegate">
            <summary>
            Delegate signature for manifest loading functions.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to pull the manifest from</param>
            <returns>an instance of <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> or null if not found or an error occurred</returns>
        </member>
        <member name="F:Intersect.Plugins.Loaders.ManifestLoader.ManifestLoaderDelegates">
            <summary>
            Currently registered manifest loading functions.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Loaders.ManifestLoader.FindManifest(System.Reflection.Assembly)">
            <summary>
            Locates manifests in the assembly with priority order declared by <see cref="F:Intersect.Plugins.Loaders.ManifestLoader.ManifestLoaderDelegates"/>.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to pull the manifest from</param>
            <returns>an instance of <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> or null if not found or an error occurred</returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.ManifestLoader.LoadJsonManifestFrom(System.Reflection.Assembly)">
            <summary>
            Loads a manifest from the <c>manifest.json</c> file embedded in the root of the assembly.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to pull the manifest from</param>
            <returns>an instance of <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> or null if not found or an error occurred</returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.ManifestLoader.LoadVirtualManifestFrom(System.Reflection.Assembly)">
            <summary>
            Loads a manifest from an assembly that is defined as an explicit class.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to pull the manifest from</param>
            <returns>an instance of <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> or null if not found or an error occurred</returns>
        </member>
        <member name="T:Intersect.Plugins.Loaders.MissingPluginEntryException">
            <summary>
            Exception class used for when a <see cref="T:Intersect.Plugins.IPluginEntry"/> cannot be found in a plugin <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Loaders.MissingPluginEntryException.AssemblyName">
            <summary>
            The name of the <see cref="T:System.Reflection.Assembly"/> that is missing the plugin entry type.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/> for the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> for the exception instance</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/> for the specified <see cref="T:System.Reflection.Assembly"/> name.
            </summary>
            <param name="assemblyName">the name of the <see cref="T:System.Reflection.Assembly"/> for the exception instance</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/> for the specified <see cref="T:System.Reflection.Assembly"/> name and message.
            </summary>
            <param name="assemblyName">the name of the <see cref="T:System.Reflection.Assembly"/> for the exception instance</param>
            <param name="message">the message for the exception instance</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/> with the specified message and inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">the message for the exception instance</param>
            <param name="innerException">the <see cref="T:System.Exception"/> that caused this one</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:Intersect.Plugins.Loaders.MissingPluginEntryException"/> during deserialization.
            </summary>
            <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.MissingPluginEntryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Loaders.PluginLoader">
            <summary>
            Utility class used for finding, loading, and configuring application plugins.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.LoadConfigurations(Intersect.Core.IApplicationContext,System.Collections.Generic.IEnumerable{Intersect.Plugins.Plugin})">
            <summary>
            Loads configuration for the provided <see cref="T:Intersect.Plugins.Plugin"/>s.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> in which to load plugin configurations</param>
            <param name="plugins">the <see cref="T:Intersect.Plugins.Plugin"/>s to load configuration for</param>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.LoadConfiguration(Intersect.Core.IApplicationContext,Intersect.Plugins.Plugin)">
            <summary>
            Loads configuration for the provided <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> in which to load plugin configuration</param>
            <param name="plugin">the <see cref="T:Intersect.Plugins.Plugin"/> to load configuration for</param>
            <returns>the <see cref="T:Intersect.Plugins.PluginConfiguration"/> that was loaded (or defaults set) for <paramref name="plugin"/></returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.DiscoverPlugins(Intersect.Core.IApplicationContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Discover plugins for the current <see cref="T:Intersect.Core.IApplicationContext"/> in the specified directories.
            Note: Yes, the <see cref="P:Intersect.Core.IApplicationContext.StartupOptions"/> exists with <see cref="P:Intersect.Core.ICommandLineOptions.PluginDirectories"/>,
                but <paramref name="pluginDirectories"/> exists here because <see cref="T:Intersect.Plugins.PluginService"/> adds a "built-in" directory that is
                scanned regardless of the command line options.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> to discover plugins for</param>
            <param name="pluginDirectories">the directories to scan for plugins in</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> of plugins, keyed by <see cref="P:Intersect.Plugins.Plugin.Key"/></returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.DiscoverPlugins(Intersect.Core.IApplicationContext,System.String)">
            <summary>
            Discovers plugins in a specific <paramref name="pluginDirectory"/>.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> to discover plugins for</param>
            <param name="pluginDirectory">the directory to scan for plugins in</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of plugins</returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.LoadFrom(Intersect.Core.IApplicationContext,System.String)">
            <summary>
            Load a <see cref="T:Intersect.Plugins.Plugin"/> from the specified <see cref="T:System.Reflection.Assembly"/> path.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> in which to load the plugin</param>
            <param name="assemblyPath">the path to the <see cref="T:System.Reflection.Assembly"/> to load the <see cref="T:Intersect.Plugins.Plugin"/> from</param>
            <returns>a <see cref="T:Intersect.Plugins.Plugin"/> or null if one cannot be found</returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.LoadFrom(Intersect.Core.IApplicationContext,System.Reflection.Assembly)">
            <summary>
            Load a <see cref="T:Intersect.Plugins.Plugin"/> from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> in which to load the plugin</param>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to load the <see cref="T:Intersect.Plugins.Plugin"/> from</param>
            <returns>a <see cref="T:Intersect.Plugins.Plugin"/> or null if one cannot be found</returns>
        </member>
        <member name="M:Intersect.Plugins.Loaders.PluginLoader.IsPluginEntryType(System.Type)">
            <summary>
            The plugin entry type is defined as follows:
            - Is completely defined (not abstract, not generic, not an interface)
            - Implements <see cref="T:Intersect.Plugins.IPluginEntry"/> (or <see cref="T:Intersect.Plugins.IPluginEntry`1"/>, a sub-interface)
            - Has a default constructor (optional parameters are not a default constructor!)
            </summary>
            <param name="type">the <see cref="T:System.Type"/> to check</param>
            <returns>if <paramref name="type"/> is a valid plugin entry type</returns>
        </member>
        <member name="T:Intersect.Plugins.Manifests.JsonManifest">
            <summary>
            Represents the structure of an embedded JSON manifest.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Manifests.JsonManifest.Name">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Manifests.JsonManifest.Key">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Manifests.JsonManifest.Version">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Manifests.JsonManifest.Authors">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Manifests.JsonManifest.Homepage">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Manifests.Types.Author">
            <summary>
            Structure that defines an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> that can be represented as an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Author.AuthorStringExpression">
             <summary>
             Expression that defines what qualifies as an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/>.
            
             Can be summarized as <code>Name[ &lt;Email&gt;][ (Homepage)]</code>
             </summary>
        </member>
        <member name="P:Intersect.Plugins.Manifests.Types.Author.Empty">
            <summary>
            The empty <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> created using the default constructor.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Author.Email">
            <summary>
            Email address of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> (not validated).
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Author.Homepage">
            <summary>
            Homepage (URL) of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> (not validated).
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Author.Name">
            <summary>
            Name of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Author.mHashCode">
            <summary>
            Precomputed hash code.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.#ctor(System.String)">
            <summary>
            Constructs an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> from a <see cref="T:System.String"/>.
            </summary>
            <param name="authorString">an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/></param>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="authorString"/> is null, empty, or whitespace</exception>
            <exception cref="T:System.ArgumentException">thrown if <paramref name="authorString"/> does not match the format defined by <see cref="F:Intersect.Plugins.Manifests.Types.Author.AuthorStringExpression" /></exception>
            <seealso cref="F:Intersect.Plugins.Manifests.Types.Author.AuthorStringExpression"/>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> from an explicitly defined name, email, and homepage.
            </summary>
            <param name="name">the name of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/></param>
            <param name="email">the email address of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/></param>
            <param name="homepage">the homepage of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/></param>
        </member>
        <member name="P:Intersect.Plugins.Manifests.Types.Author.Parts">
            <summary>
            Gets the parts as an enumerable for <see cref="M:Intersect.Plugins.Manifests.Types.Author.CompareTo(Intersect.Plugins.Manifests.Types.Author)"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.CompareTo(Intersect.Plugins.Manifests.Types.Author)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.Equals(Intersect.Plugins.Manifests.Types.Author)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.Equals(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.ToString">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.op_Implicit(System.String)~Intersect.Plugins.Manifests.Types.Author">
            <summary>
            Converts a <see cref="T:System.String"/> to an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>.
            </summary>
            <param name="authorString">an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/></param>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.op_Implicit(Intersect.Plugins.Manifests.Types.Author)~System.String">
            <summary>
            Converts an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="author">an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/></param>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.op_Inequality(Intersect.Plugins.Manifests.Types.Author,Intersect.Plugins.Manifests.Types.Author)">
            <summary>
            Checks if two <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>if any of the parts are not equal</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.op_Equality(Intersect.Plugins.Manifests.Types.Author,Intersect.Plugins.Manifests.Types.Author)">
            <summary>
            Checks if two <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>if all of the parts are equal</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.AuthorStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Intersect.Plugins.Manifests.Types.Author,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Author.AuthorStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,Intersect.Plugins.Manifests.Types.Author,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.Manifests.Types.Authors">
            <summary>
            Immutable container structure for multiple <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Authors.ExceptionComparisonNotSupported">
            <summary>
            The exception message that is used when comparison is attempted on invalid types or null.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Authors.mAuthors">
            <summary>
            Backing enumerable of authors.
            </summary>
        </member>
        <member name="F:Intersect.Plugins.Manifests.Types.Authors.mHashCode">
            <summary>
            Precomputed hash code.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.#ctor(Intersect.Plugins.Manifests.Types.Author[])">
            <summary>
            Initializes a new instance of the <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> structure.
            </summary>
            <param name="authors">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s in this list</param>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.#ctor(System.Collections.Generic.IEnumerable{Intersect.Plugins.Manifests.Types.Author})">
            <summary>
            Initializes a new instance of the <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> structure.
            </summary>
            <param name="authors">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s in this list</param>
        </member>
        <member name="P:Intersect.Plugins.Manifests.Types.Authors.Count">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.Manifests.Types.Authors.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone" />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareTo(System.Object,System.Collections.IComparer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareTo(System.Collections.Generic.IEnumerable{Intersect.Plugins.Manifests.Types.Author})">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareTo(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals(System.Object,System.Collections.IEqualityComparer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals(System.Collections.Generic.IEnumerable{Intersect.Plugins.Manifests.Types.Author})">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.GetHashCode(System.Collections.IEqualityComparer)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.ToString">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Compares equality against the other <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TEnumerableValue"></typeparam>
            <param name="other">another enumerable</param>
            <param name="comparisonFunc">indexed equality comparison function</param>
            <returns>equality as determined by <paramref name="comparisonFunc"/></returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareElement(Intersect.Plugins.Manifests.Types.Author,System.Int32)">
             <summary>
             Compares <paramref name="author"/> to the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> located at <paramref name="index"/>.
            
             Shorter arrays are considered "less than".
             </summary>
             <param name="author">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> to compare</param>
             <param name="index">the index to compare at</param>
             <returns>the result of <see cref="M:Intersect.Plugins.Manifests.Types.Author.CompareTo(Intersect.Plugins.Manifests.Types.Author)"/> or -1 <paramref name="index"/> is out of bounds</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.CompareElement(System.String,System.Int32)">
             <summary>
             Compares <paramref name="authorString"/> to the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> located at <paramref name="index"/>.
            
             Shorter arrays are considered "less than".
             </summary>
             <param name="authorString">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/> to compare</param>
             <param name="index">the index to compare at</param>
             <returns>the result of <see cref="M:Intersect.Plugins.Manifests.Types.Author.CompareTo(Intersect.Plugins.Manifests.Types.Author)"/> or -1 <paramref name="index"/> is out of bounds</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.EqualsElement(Intersect.Plugins.Manifests.Types.Author,System.Int32)">
            <summary>
            Compares equality between <paramref name="author"/> and the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> located at <paramref name="index"/>.
            </summary>
            <param name="author">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> to compare</param>
            <param name="index">the index to compare at</param>
            <returns>the result of <see cref="M:Intersect.Plugins.Manifests.Types.Author.Equals(Intersect.Plugins.Manifests.Types.Author)"/> or false if <paramref name="index"/> is out of bounds</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.EqualsElement(System.String,System.Int32)">
            <summary>
            Compares equality between <paramref name="authorString"/> and the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> located at <paramref name="index"/>.
            </summary>
            <param name="authorString">the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/><see cref="T:System.String"/>  to compare</param>
            <param name="index">the index to compare at</param>
            <returns>the result of <see cref="M:Intersect.Plugins.Manifests.Types.Author.Equals(Intersect.Plugins.Manifests.Types.Author)"/> or false if <paramref name="index"/> is out of bounds</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Implicit(System.String)~Intersect.Plugins.Manifests.Types.Authors">
            <summary>
            Converts a JSON <see cref="T:System.String"/> of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s into an instance of <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/>.
            </summary>
            <param name="authorsString">a JSON <see cref="T:System.String"/> of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s</param>
            <returns>an <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> instance</returns>
            <seealso cref="M:Intersect.Plugins.Manifests.Types.Author.#ctor(System.String)"/>
            <seealso cref="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Implicit(Intersect.Plugins.Manifests.Types.Author)~Intersect.Plugins.Manifests.Types.Authors">
            <summary>
            Converts a single <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> into a single-element instance of <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/>.
            </summary>
            <param name="author">an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/></param>
            <returns>an <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> instance</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Implicit(System.String[])~Intersect.Plugins.Manifests.Types.Authors">
            <summary>
            Converts an array of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/>s to an instance of <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/>.
            </summary>
            <param name="authorStrings">an array of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> <see cref="T:System.String"/>s</param>
            <returns>an <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> instance</returns>
            <seealso cref="M:Intersect.Plugins.Manifests.Types.Author.#ctor(System.String)"/>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Implicit(Intersect.Plugins.Manifests.Types.Author[])~Intersect.Plugins.Manifests.Types.Authors">
            <summary>
            Converts an array of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s to an instance of <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/>.
            </summary>
            <param name="authors">an array of <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s</param>
            <returns>an <see cref="T:Intersect.Plugins.Manifests.Types.Author"/> array</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Implicit(Intersect.Plugins.Manifests.Types.Authors)~System.String">
            <summary>
            Converts <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> to <see cref="T:System.String"/> using <see cref="M:Intersect.Plugins.Manifests.Types.Authors.ToString"/>.
            </summary>
            <param name="authors">an <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> instance</param>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Inequality(Intersect.Plugins.Manifests.Types.Authors,Intersect.Plugins.Manifests.Types.Authors)">
            <summary>
            Checks if two <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>if any of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s are not equal</returns>
        </member>
        <member name="M:Intersect.Plugins.Manifests.Types.Authors.op_Equality(Intersect.Plugins.Manifests.Types.Authors,Intersect.Plugins.Manifests.Types.Authors)">
            <summary>
            Checks if two <see cref="T:Intersect.Plugins.Manifests.Types.Authors"/> are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>if all of the <see cref="T:Intersect.Plugins.Manifests.Types.Author"/>s are equal</returns>
        </member>
        <member name="T:Intersect.Plugins.PluginConfiguration">
            <summary>
            The basic plugin configuration class.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginConfiguration.IsEnabled">
            <summary>
            If this plugin is enabled or not.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.Plugin">
            <summary>
            Representation of a loaded plugin descriptor.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.Plugin.Create(Intersect.Core.IApplicationContext,Intersect.Plugins.Interfaces.IManifestHelper,Intersect.Plugins.PluginReference)">
            <summary>
            Create a <see cref="T:Intersect.Plugins.Plugin"/> instance for the given context, manifest and reference.
            </summary>
            <param name="applicationContext">the <see cref="T:Intersect.Core.IApplicationContext"/> the plugin is running in</param>
            <param name="manifest">the <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> that describes this plugin</param>
            <param name="reference">the <see cref="T:Intersect.Plugins.PluginReference"/> with pre-searched reflection information</param>
            <returns></returns>
        </member>
        <member name="P:Intersect.Plugins.Plugin.Manifest">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.IManifestHelper"/> that describes this <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Plugin.Logging">
            <summary>
            The <see cref="T:Intersect.Plugins.Interfaces.ILoggingHelper"/> for this <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Plugin.Configuration">
            <summary>
            The <see cref="T:Intersect.Plugins.PluginConfiguration"/> for this <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Plugin.Reference">
            <summary>
            The <see cref="T:Intersect.Plugins.PluginReference"/> to reflection information for this plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.Plugin.IsEnabled">
            <inheritdoc cref="P:Intersect.Plugins.PluginConfiguration.IsEnabled" />
        </member>
        <member name="P:Intersect.Plugins.Plugin.Key">
            <inheritdoc cref="P:Intersect.Plugins.Interfaces.IManifestHelper.Key" />
        </member>
        <member name="M:Intersect.Plugins.Plugin.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.PluginReference">
            <summary>
            Reference container type of type, method handles, and other information gathered via reflection.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginReference.#ctor(System.Reflection.Assembly,System.Type,System.Type)">
            <summary>
            Initializes a <see cref="T:Intersect.Plugins.PluginReference"/>.
            </summary>
            <param name="assembly">The <see cref="P:Intersect.Plugins.PluginReference.Assembly"/> this plugin belongs to.</param>
            <param name="configurationType">The plugin configuration <see cref="T:System.Type"/>, should descend from or be <see cref="T:Intersect.Plugins.PluginConfiguration"/>.</param>
            <param name="entryType">The <see cref="T:System.Type"/> of the entry point for the plugin, should descend from <see cref="T:Intersect.Plugins.IPluginEntry"/>.</param>
        </member>
        <member name="P:Intersect.Plugins.PluginReference.Assembly">
            <summary>
            The <see cref="P:Intersect.Plugins.PluginReference.Assembly"/> this plugin belongs to.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginReference.ConfigurationType">
            <summary>
            The plugin configuration <see cref="T:System.Type"/>, should descend from or be <see cref="T:Intersect.Plugins.PluginConfiguration"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginReference.EntryType">
            <summary>
            The <see cref="T:System.Type"/> of the entry point for the plugin, should descend from <see cref="T:Intersect.Plugins.IPluginEntry"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginReference.ConfigurationFile">
            <summary>
            The path to the configuration file for this plugin.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginReference.Directory">
            <summary>
            The path to the directory this plugin is located in.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginReference.CreateInstance">
            <summary>
            Create an instance of the plugin entry type.
            </summary>
            <returns>an instance of <see cref="T:Intersect.Plugins.IPluginEntry"/> specific to this plugin</returns>
        </member>
        <member name="T:Intersect.Plugins.PluginEntry">
            <summary>
            Abstract class that virtually defines all of the methods declared by <see cref="T:Intersect.Plugins.IPluginEntry"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginEntry.OnBootstrap(Intersect.Plugins.IPluginBootstrapContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry.OnStart(Intersect.Plugins.IPluginContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry.OnStop(Intersect.Plugins.IPluginContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose" />
            <param name="disposing">if it is disposing or finalizing</param>
        </member>
        <member name="T:Intersect.Plugins.PluginEntry`1">
            <summary>
            Abstract class that defines translates between the generic <see cref="T:Intersect.Plugins.IPluginEntry"/> methods and the context type specific methods of <see cref="T:Intersect.Plugins.IPluginEntry`1"/>.
            </summary>
            <typeparam name="TPluginContext">The specific plugin context type.</typeparam>
        </member>
        <member name="M:Intersect.Plugins.PluginEntry`1.OnStart(Intersect.Plugins.IPluginContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry`1.OnStop(Intersect.Plugins.IPluginContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry`1.OnStart(`0)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginEntry`1.OnStop(`0)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Plugins.PluginHelper">
            <summary>
            Convenience abstract class that defines commonly used properties for certain plugin helpers.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginHelper.Logger">
            <summary>
            The <see cref="P:Intersect.Plugins.PluginHelper.Logger"/> for this helper to use.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginHelper.#ctor(Intersect.Logging.Logger)">
            <summary>
            Initializes this <see cref="T:Intersect.Plugins.PluginHelper"/>.
            </summary>
            <param name="logger">The <see cref="P:Intersect.Plugins.PluginHelper.Logger"/> for this helper to use.</param>
        </member>
        <member name="T:Intersect.Plugins.PluginInstance">
            <summary>
            Representation of an instance of a <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginInstance.Create(Intersect.Plugins.Plugin)">
            <summary>
            Create a <see cref="T:Intersect.Plugins.PluginInstance"/> for the given <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
            <param name="plugin">The plugin descriptor to create an instance for.</param>
            <returns>A <see cref="T:Intersect.Plugins.PluginInstance"/> for <paramref name="plugin"/>.</returns>
        </member>
        <member name="P:Intersect.Plugins.PluginInstance.Entry">
            <summary>
            The entry point instance.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginInstance.BootstrapContext">
            <summary>
            The context used for bootstrap lifecycle actions.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginInstance.Context">
            <summary>
            The context used for non-bootstrap lifecycle actions.
            </summary>
        </member>
        <member name="T:Intersect.Plugins.PluginService">
            <summary>
            Implementation of <see cref="T:Intersect.Plugins.IPluginService"/>.
            </summary>
        </member>
        <member name="M:Intersect.Plugins.PluginService.#ctor">
            <summary>
            Initializes the <see cref="T:Intersect.Plugins.PluginService"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginService.Plugins">
            <summary>
            Map of all loaded <see cref="T:Intersect.Plugins.Plugin"/>s by their name.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginService.Instances">
            <summary>
            Map of all <see cref="T:Intersect.Plugins.PluginInstance"/>s by their describing <see cref="T:Intersect.Plugins.Plugin"/>.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginService.Loader">
            <summary>
            Reference to the <see cref="T:Intersect.Plugins.Loaders.PluginLoader"/> used for discovering and loading <see cref="T:Intersect.Plugins.Plugin"/>s and their configuration.
            </summary>
        </member>
        <member name="P:Intersect.Plugins.PluginService.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.Bootstrap(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.TaskStart(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.TaskStop(Intersect.Core.IApplicationContext)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.PluginService.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Intersect.Plugins.PluginService.PluginDirectories">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.IsPluginEnabled(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.EnablePlugin(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Plugins.PluginService.DisablePlugin(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Intersect.Properties.DeveloperStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intersect.Properties.DeveloperStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intersect.Properties.DeveloperStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Intersect.Properties.DeveloperStrings.ApplicationContextExited">
            <summary>
              Looks up a localized string similar to Application context exited..
            </summary>
        </member>
        <member name="P:Intersect.Properties.DeveloperStrings.ServiceLifecycleFailureExceptionUnknknownServiceName">
            <summary>
              Looks up a localized string similar to UnknownService.
            </summary>
        </member>
        <member name="T:Intersect.Properties.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.FoundPluginEntryTypeMissingDefaultConstructor">
            <summary>
              Looks up a localized string similar to Plugin entry type found in the assembly does not have a generic constructor..
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.MissingPluginAssembly">
            <summary>
              Looks up a localized string similar to No plugin assembly was found for the provided path..
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.MissingPluginEntryExceptionAssemblyName">
            <summary>
              Looks up a localized string similar to Unable to find a plugin entry type in:.
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.MissingPluginEntryExceptionDefault">
            <summary>
              Looks up a localized string similar to Unable to find a plugin entry type in the assembly..
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.PluginBootstrapContextMissingPluginArgument">
            <summary>
              Looks up a localized string similar to PluginBootstrap factory needs at lease one non-null argument of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.SwallowingExceptionFrom">
            <summary>
              Looks up a localized string similar to Swallowing unexpected exception from {0}..
            </summary>
        </member>
        <member name="P:Intersect.Properties.ExceptionMessages.SwallowingExceptionFromWithQualifiedName">
            <summary>
              Looks up a localized string similar to Swallowing unexpected exception from {0}.{1}..
            </summary>
        </member>
        <member name="T:Intersect.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intersect.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intersect.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Intersect.Reflection.AssemblyExtensions">
            <summary>
            Extension methods for <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Intersect.Reflection.AssemblyExtensions.CreateInstanceOf``1(System.Reflection.Assembly,System.Object[])">
            <inheritdoc cref="M:Intersect.Reflection.AssemblyExtensions.CreateInstanceOf``1(System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Object[])"/>
        </member>
        <member name="M:Intersect.Reflection.AssemblyExtensions.CreateInstanceOf``1(System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Object[])">
            <summary>
            Creates an instance of <typeparamref name="TParentType"/> given <paramref name="args"/>.
            </summary>
            <typeparam name="TParentType">the type to search for subtypes and create an instance of</typeparam>
            <param name="assembly">the <see cref="T:System.Reflection.Assembly"/> to search for subtypes in</param>
            <param name="predicate">a function to filter subtypes with</param>
            <param name="args">the arguments to create the instance with</param>
            <returns>an instance of <typeparamref name="TParentType"/></returns>
            <exception cref="T:System.InvalidOperationException">if no matching subtypes are found, or instance creation fails</exception>
        </member>
        <member name="F:Intersect.Security.ApiVisibility.Public">
            <summary>
            Anyone has access.
            </summary>
        </member>
        <member name="F:Intersect.Security.ApiVisibility.Restricted">
            <summary>
            Privileged users have access.
            </summary>
        </member>
        <member name="F:Intersect.Security.ApiVisibility.Private">
            <summary>
            Data owners have access.
            </summary>
        </member>
        <member name="F:Intersect.Security.ApiVisibility.Hidden">
            <summary>
            No users have access.
            </summary>
        </member>
        <member name="T:Intersect.SuppressionJustifications">
            <summary>
            Collection of commonly used justifications for suppressing code analysis warnings.
            </summary>
        </member>
        <member name="F:Intersect.SuppressionJustifications.NotNullJetBrains">
            <summary>
            Analyzer doesn't respect JetBrains NotNullAttribute which already asserts non-nullability.
            </summary>
        </member>
        <member name="T:Intersect.Threading.Threaded`1">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Threading.Threaded`1.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Threading.Threaded`1.ThreadStart(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Intersect.Utilities.GuidUtils.CreateNamed(System.Guid,System.String)">
            <inheritdoc cref="M:Intersect.Utilities.GuidUtils.CreateNamed(System.Guid,System.Byte[])" />
        </member>
        <member name="M:Intersect.Utilities.GuidUtils.CreateNamed(System.Guid,System.Byte[])">
            <summary>
            Version 5 UUID implementation of RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">the UUID of the namespace</param>
            <param name="name">the name to generate the UUID for</param>
            <returns>a Version 5 UUID generated from the provided namespace UUID and text name</returns>
        </member>
        <member name="M:Intersect.Utilities.Randomization.Next">
            <summary>Returns a non-negative random integer.</summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue" />.</returns>
        </member>
        <member name="M:Intersect.Utilities.Randomization.Next(System.Int32,System.Int32)">
            <summary>Returns a random integer that is within a specified range.</summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
        </member>
        <member name="M:Intersect.Utilities.Randomization.Next(System.Int32)">
            <summary>Returns a non-negative random integer that is less than the specified maximum.</summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to 0.</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:Intersect.Utilities.Randomization.NextDouble">
            <summary>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Intersect.Utilities.Randomization.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Intersect.Utilities.Timing">
            <summary>
            Utility class for timing.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.Global">
            <summary>
            The global <see cref="T:Intersect.Utilities.Timing"/> instance.
            </summary>
        </member>
        <member name="M:Intersect.Utilities.Timing.#ctor">
            <summary>
            Initializes a <see cref="T:Intersect.Utilities.Timing"/> instance.
            </summary>
        </member>
        <member name="M:Intersect.Utilities.Timing.Synchronize(System.Int64,System.Int64)">
             <summary>
             Synchronizes this <see cref="T:Intersect.Utilities.Timing"/> instance with another based on the other's current time.
            
             Sets <see cref="P:Intersect.Utilities.Timing.TicksOffset"/>.
             </summary>
             <param name="remoteOffset">a point in time to synchronize to in ticks</param>
        </member>
        <member name="P:Intersect.Utilities.Timing.Ticks">
            <summary>
            Ticks since the instance started adjusted by <see cref="P:Intersect.Utilities.Timing.TicksOffset"/>.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.TicksOffset">
            <summary>
            The offset from the master instance in ticks.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.TicksUTC">
            <summary>
            Real-world unix time in ticks.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.Milliseconds">
            <summary>
            Gets the total elapsed time in milliseconds since this instance was created.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.MillisecondsOffset">
            <summary>
            The offset from UTC in milliseconds.
            </summary>
        </member>
        <member name="P:Intersect.Utilities.Timing.MillisecondsUTC">
            <summary>
            Gets the real-world unix time in milliseconds.
            </summary>
        </member>
        <member name="M:Intersect.Utilities.ValueUtils.ComputeHashCode(System.Object[])">
            <summary>
            Computes the aggregate hash code for <paramref name="values"/>.
            </summary>
            <param name="values">the set of values</param>
            <returns>the aggregate hash code</returns>
        </member>
        <member name="M:Intersect.Utilities.ValueUtils.ComputeHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the aggregate hash code for <paramref name="values"/>.
            </summary>
            <typeparam name="TValue">the value type</typeparam>
            <param name="values">the enumerable set of values</param>
            <returns>the aggregate hash code</returns>
        </member>
        <member name="M:Intersect.Utilities.ValueUtils.Compare(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Compares two <see cref="T:System.Collections.Generic.IEnumerable`1"/> if <see cref="T:System.String"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="stringComparison">the <see cref="T:System.StringComparison"/> mode to use</param>
            <returns>the comparison between the two <see cref="T:System.String"/> enumerables</returns>
        </member>
        <member name="P:Intersect.Options.MaxConnections">
            <summary>
            Defines the maximum amount of network connections our server is allowed to handle.
            </summary>
        </member>
        <member name="P:Intersect.Options.MaxLoggedinUsers">
            <summary>
            Defines the maximum amount of logged in users our server is allowed to handle.
            </summary>
        </member>
        <member name="P:Intersect.Options.Passability">
            <summary>
            Passability configuration by map zone
            </summary>
        </member>
    </members>
</doc>
